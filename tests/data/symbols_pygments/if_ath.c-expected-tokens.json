[
  {
    "position": 3,
    "token_type": "comment",
    "token_value": "/*-\n  * Copyright (c) 2002-2005 Sam Leffler, Errno Consulting\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions\n  * are met:\n  * 1. Redistributions of source code must retain the above copyright\n  *    notice, this list of conditions and the following disclaimer,\n  *    without modification.\n  * 2. Redistributions in binary form must reproduce at minimum a disclaimer\n  *    similar to the \"NO WARRANTY\" disclaimer below (\"Disclaimer\") and any\n  *    redistribution must be conditioned upon including a substantially\n  *    similar Disclaimer requirement for further binary redistribution.\n  * 3. Neither the names of the above-listed copyright holders nor the names\n  *    of any contributors may be used to endorse or promote products derived\n  *    from this software without specific prior written permission.\n  *\n  * Alternatively, this software may be distributed under the terms of the\n  * GNU General Public License (\"GPL\") version 2 as published by the Free\n  * Software Foundation.\n  *\n  * NO WARRANTY\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY\n  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\n  * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,\n  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n  * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n  * THE POSSIBILITY OF SUCH DAMAGES.\n  *\n  * $Id: if_ath.c 3354 2008-02-13 05:13:10Z mrenzmann $\n  */"
  },
  {
    "position": 1993,
    "token_type": "comment",
    "token_value": "/*\n  * Driver for the Atheros Wireless LAN controller.\n  *\n  * This software is derived from work of Atsushi Onoe; his contribution\n  * is greatly appreciated.\n  */"
  },
  {
    "position": 2159,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2160,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2168,
    "token_type": "comment",
    "token_value": "\"opt_ah.h\""
  },
  {
    "position": 2182,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2183,
    "token_type": "comment",
    "token_value": "ifndef AUTOCONF_INCLUDED"
  },
  {
    "position": 2209,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2210,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2218,
    "token_type": "comment",
    "token_value": "<linux/config.h>"
  },
  {
    "position": 2236,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2237,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 2244,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2245,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2253,
    "token_type": "comment",
    "token_value": "<linux/version.h>"
  },
  {
    "position": 2272,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2273,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2281,
    "token_type": "comment",
    "token_value": "<linux/module.h>"
  },
  {
    "position": 2299,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2300,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2308,
    "token_type": "comment",
    "token_value": "<linux/init.h>"
  },
  {
    "position": 2324,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2325,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2333,
    "token_type": "comment",
    "token_value": "<linux/skbuff.h>"
  },
  {
    "position": 2351,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2352,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2360,
    "token_type": "comment",
    "token_value": "<linux/netdevice.h>"
  },
  {
    "position": 2381,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2382,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2390,
    "token_type": "comment",
    "token_value": "<linux/etherdevice.h>"
  },
  {
    "position": 2413,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2414,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2422,
    "token_type": "comment",
    "token_value": "<linux/random.h>"
  },
  {
    "position": 2440,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2441,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2449,
    "token_type": "comment",
    "token_value": "<linux/delay.h>"
  },
  {
    "position": 2466,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2467,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2475,
    "token_type": "comment",
    "token_value": "<linux/cache.h>"
  },
  {
    "position": 2492,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2493,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2501,
    "token_type": "comment",
    "token_value": "<linux/sysctl.h>"
  },
  {
    "position": 2519,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2520,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2528,
    "token_type": "comment",
    "token_value": "<linux/proc_fs.h>"
  },
  {
    "position": 2547,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2548,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2556,
    "token_type": "comment",
    "token_value": "<linux/if_arp.h>"
  },
  {
    "position": 2574,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2575,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2583,
    "token_type": "comment",
    "token_value": "<linux/rtnetlink.h>"
  },
  {
    "position": 2604,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2605,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2613,
    "token_type": "comment",
    "token_value": "<asm/uaccess.h>"
  },
  {
    "position": 2632,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2633,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2641,
    "token_type": "comment",
    "token_value": "\"if_ethersubr.h\""
  },
  {
    "position": 2657,
    "token_type": "comment",
    "token_value": "/* for ETHER_IS_MULTICAST */"
  },
  {
    "position": 2689,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2690,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2698,
    "token_type": "comment",
    "token_value": "\"if_media.h\""
  },
  {
    "position": 2712,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2713,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2721,
    "token_type": "comment",
    "token_value": "\"if_llc.h\""
  },
  {
    "position": 2735,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2736,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2744,
    "token_type": "comment",
    "token_value": "<net80211/ieee80211_radiotap.h>"
  },
  {
    "position": 2777,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2778,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2786,
    "token_type": "comment",
    "token_value": "<net80211/ieee80211_var.h>"
  },
  {
    "position": 2814,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2815,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2823,
    "token_type": "comment",
    "token_value": "<net80211/ieee80211_monitor.h>"
  },
  {
    "position": 2855,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2856,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2864,
    "token_type": "comment",
    "token_value": "<net80211/ieee80211_rate.h>"
  },
  {
    "position": 2895,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2896,
    "token_type": "comment",
    "token_value": "ifdef USE_HEADERLEN_RESV"
  },
  {
    "position": 2922,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2923,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2931,
    "token_type": "comment",
    "token_value": "<net80211/if_llc.h>"
  },
  {
    "position": 2952,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2953,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 2962,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2963,
    "token_type": "comment",
    "token_value": "define\tAR_DEBUG"
  },
  {
    "position": 2982,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 2983,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 2991,
    "token_type": "comment",
    "token_value": "\"net80211/if_athproto.h\""
  },
  {
    "position": 3017,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3018,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3026,
    "token_type": "comment",
    "token_value": "\"if_athvar.h\""
  },
  {
    "position": 3041,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3042,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3050,
    "token_type": "comment",
    "token_value": "\"ah_desc.h\""
  },
  {
    "position": 3063,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3064,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3072,
    "token_type": "comment",
    "token_value": "\"ah_devid.h\""
  },
  {
    "position": 3084,
    "token_type": "comment",
    "token_value": "/* XXX to identify chipset */"
  },
  {
    "position": 3120,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3121,
    "token_type": "comment",
    "token_value": "ifdef ATH_PCI"
  },
  {
    "position": 3136,
    "token_type": "comment",
    "token_value": "/* PCI BUS */"
  },
  {
    "position": 3151,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3152,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3160,
    "token_type": "comment",
    "token_value": "\"if_ath_pci.h\""
  },
  {
    "position": 3176,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3177,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 3185,
    "token_type": "comment",
    "token_value": "/* PCI BUS */"
  },
  {
    "position": 3200,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3201,
    "token_type": "comment",
    "token_value": "ifdef ATH_AHB"
  },
  {
    "position": 3216,
    "token_type": "comment",
    "token_value": "/* AHB BUS */"
  },
  {
    "position": 3231,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3232,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3240,
    "token_type": "comment",
    "token_value": "\"if_ath_ahb.h\""
  },
  {
    "position": 3256,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3257,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 3265,
    "token_type": "comment",
    "token_value": "/* AHB BUS */"
  },
  {
    "position": 3282,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3283,
    "token_type": "comment",
    "token_value": "ifdef ATH_TX99_DIAG"
  },
  {
    "position": 3304,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3305,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 3313,
    "token_type": "comment",
    "token_value": "\"ath_tx99.h\""
  },
  {
    "position": 3327,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3328,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 3337,
    "token_type": "comment",
    "token_value": "/* unaligned little endian access */"
  },
  {
    "position": 3375,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3376,
    "token_type": "comment",
    "token_value": "define LE_READ_2(p)\t\t\t\t\t\t\t\\"
  },
  {
    "position": 3404,
    "token_type": "comment",
    "token_value": "((u_int16_t)\t\t\t\t\t\t\t\\"
  },
  {
    "position": 3427,
    "token_type": "comment",
    "token_value": "((((u_int8_t *)(p))[0]      ) | (((u_int8_t *)(p))[1] <<  8)))"
  },
  {
    "position": 3494,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3495,
    "token_type": "comment",
    "token_value": "define LE_READ_4(p)\t\t\t\t\t\t\t\\"
  },
  {
    "position": 3523,
    "token_type": "comment",
    "token_value": "((u_int32_t)\t\t\t\t\t\t\t\\"
  },
  {
    "position": 3546,
    "token_type": "comment",
    "token_value": "((((u_int8_t *)(p))[0]      ) | (((u_int8_t *)(p))[1] <<  8) |\t\\"
  },
  {
    "position": 3614,
    "token_type": "comment",
    "token_value": "(((u_int8_t *)(p))[2] << 16) | (((u_int8_t *)(p))[3] << 24)))"
  },
  {
    "position": 3683,
    "token_type": "comment",
    "token_value": "/* Default rate control algorithm */"
  },
  {
    "position": 3721,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3722,
    "token_type": "comment",
    "token_value": "ifdef CONFIG_ATHEROS_RATE_DEFAULT"
  },
  {
    "position": 3757,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3758,
    "token_type": "comment",
    "token_value": "define DEF_RATE_CTL CONFIG_ATHEROS_RATE_DEFAULT"
  },
  {
    "position": 3807,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3808,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 3814,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3815,
    "token_type": "comment",
    "token_value": "define DEF_RATE_CTL \"sample\""
  },
  {
    "position": 3845,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 3846,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 3927,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 3963,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 4017,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 4045,
    "token_type": "symbol",
    "token_value": "ath_vap_delete"
  },
  {
    "position": 4067,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 4096,
    "token_type": "symbol",
    "token_value": "ath_init"
  },
  {
    "position": 4112,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 4139,
    "token_type": "symbol",
    "token_value": "ath_set_ack_bitrate"
  },
  {
    "position": 4166,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 4197,
    "token_type": "symbol",
    "token_value": "ath_reset"
  },
  {
    "position": 4214,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 4242,
    "token_type": "symbol",
    "token_value": "ath_fatal_tasklet"
  },
  {
    "position": 4286,
    "token_type": "symbol",
    "token_value": "ath_rxorn_tasklet"
  },
  {
    "position": 4330,
    "token_type": "symbol",
    "token_value": "ath_bmiss_tasklet"
  },
  {
    "position": 4374,
    "token_type": "symbol",
    "token_value": "ath_bstuck_tasklet"
  },
  {
    "position": 4419,
    "token_type": "symbol",
    "token_value": "ath_radar_task"
  },
  {
    "position": 4441,
    "token_type": "symbol",
    "token_value": "work_struct"
  },
  {
    "position": 4470,
    "token_type": "symbol",
    "token_value": "ath_dfs_test_return"
  },
  {
    "position": 4520,
    "token_type": "symbol",
    "token_value": "ath_stop_locked"
  },
  {
    "position": 4543,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 4570,
    "token_type": "symbol",
    "token_value": "ath_stop"
  },
  {
    "position": 4586,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 4602,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 4608,
    "token_type": "comment",
    "token_value": "static void ath_initkeytable(struct ath_softc *);"
  },
  {
    "position": 4659,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 4679,
    "token_type": "symbol",
    "token_value": "ath_key_alloc"
  },
  {
    "position": 4700,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 4729,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 4759,
    "token_type": "symbol",
    "token_value": "ath_key_delete"
  },
  {
    "position": 4781,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 4810,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 4836,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 4867,
    "token_type": "symbol",
    "token_value": "ath_key_set"
  },
  {
    "position": 4886,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 4915,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 4988,
    "token_type": "symbol",
    "token_value": "ath_key_update_begin"
  },
  {
    "position": 5016,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 5046,
    "token_type": "symbol",
    "token_value": "ath_key_update_end"
  },
  {
    "position": 5072,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 5102,
    "token_type": "symbol",
    "token_value": "ath_mode_init"
  },
  {
    "position": 5123,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 5151,
    "token_type": "symbol",
    "token_value": "ath_setslottime"
  },
  {
    "position": 5174,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5201,
    "token_type": "symbol",
    "token_value": "ath_updateslot"
  },
  {
    "position": 5223,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 5250,
    "token_type": "symbol",
    "token_value": "ath_beaconq_setup"
  },
  {
    "position": 5275,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 5299,
    "token_type": "symbol",
    "token_value": "ath_beacon_alloc"
  },
  {
    "position": 5323,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5343,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 5363,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 5364,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 5403,
    "token_type": "symbol",
    "token_value": "ath_beacon_dturbo_update"
  },
  {
    "position": 5435,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 5482,
    "token_type": "symbol",
    "token_value": "ath_beacon_dturbo_config"
  },
  {
    "position": 5514,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 5555,
    "token_type": "symbol",
    "token_value": "ath_turbo_switch_mode"
  },
  {
    "position": 5605,
    "token_type": "symbol",
    "token_value": "ath_check_beacon_done"
  },
  {
    "position": 5634,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5649,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 5650,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 5669,
    "token_type": "symbol",
    "token_value": "ath_beacon_send"
  },
  {
    "position": 5692,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5726,
    "token_type": "symbol",
    "token_value": "ath_beacon_start_adhoc"
  },
  {
    "position": 5756,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5776,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 5806,
    "token_type": "symbol",
    "token_value": "ath_beacon_return"
  },
  {
    "position": 5831,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5851,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 5876,
    "token_type": "symbol",
    "token_value": "ath_beacon_free"
  },
  {
    "position": 5899,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5926,
    "token_type": "symbol",
    "token_value": "ath_beacon_config"
  },
  {
    "position": 5951,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 5971,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 6000,
    "token_type": "symbol",
    "token_value": "ath_desc_alloc"
  },
  {
    "position": 6022,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 6049,
    "token_type": "symbol",
    "token_value": "ath_desc_free"
  },
  {
    "position": 6070,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 6097,
    "token_type": "symbol",
    "token_value": "ath_desc_swap"
  },
  {
    "position": 6118,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 6146,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 6184,
    "token_type": "symbol",
    "token_value": "ieee80211_node_table"
  },
  {
    "position": 6217,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 6247,
    "token_type": "symbol",
    "token_value": "ath_node_cleanup"
  },
  {
    "position": 6271,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 6303,
    "token_type": "symbol",
    "token_value": "ath_node_free"
  },
  {
    "position": 6324,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 6360,
    "token_type": "symbol",
    "token_value": "ath_node_getrssi"
  },
  {
    "position": 6390,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 6421,
    "token_type": "symbol",
    "token_value": "ath_rxbuf_init"
  },
  {
    "position": 6443,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 6463,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 6488,
    "token_type": "symbol",
    "token_value": "ath_recv_mgmt"
  },
  {
    "position": 6509,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 6534,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 6582,
    "token_type": "symbol",
    "token_value": "ath_setdefantenna"
  },
  {
    "position": 6607,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 6643,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 6673,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 6710,
    "token_type": "symbol",
    "token_value": "ath_rx_tasklet"
  },
  {
    "position": 6750,
    "token_type": "symbol",
    "token_value": "ath_hardstart"
  },
  {
    "position": 6771,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 6789,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 6816,
    "token_type": "symbol",
    "token_value": "ath_mgtstart"
  },
  {
    "position": 6836,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 6859,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 6872,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 6873,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 6913,
    "token_type": "symbol",
    "token_value": "ath_get_icvlen"
  },
  {
    "position": 6935,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 6971,
    "token_type": "symbol",
    "token_value": "ath_get_ivlen"
  },
  {
    "position": 6992,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 7023,
    "token_type": "symbol",
    "token_value": "ath_setup_comp"
  },
  {
    "position": 7045,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 7082,
    "token_type": "symbol",
    "token_value": "ath_comp_set"
  },
  {
    "position": 7102,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 7125,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 7151,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 7152,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 7170,
    "token_type": "symbol",
    "token_value": "ath_tx_setup"
  },
  {
    "position": 7190,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7226,
    "token_type": "symbol",
    "token_value": "ath_wme_update"
  },
  {
    "position": 7248,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 7278,
    "token_type": "symbol",
    "token_value": "ath_uapsd_flush"
  },
  {
    "position": 7301,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 7333,
    "token_type": "symbol",
    "token_value": "ath_tx_cleanupq"
  },
  {
    "position": 7356,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7376,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 7401,
    "token_type": "symbol",
    "token_value": "ath_tx_cleanup"
  },
  {
    "position": 7423,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7450,
    "token_type": "symbol",
    "token_value": "ath_tx_uapsdqueue"
  },
  {
    "position": 7475,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7495,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 7516,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 7542,
    "token_type": "symbol",
    "token_value": "ath_tx_start"
  },
  {
    "position": 7562,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 7583,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 7610,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 7628,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 7658,
    "token_type": "symbol",
    "token_value": "ath_tx_tasklet_q0"
  },
  {
    "position": 7702,
    "token_type": "symbol",
    "token_value": "ath_tx_tasklet_q0123"
  },
  {
    "position": 7749,
    "token_type": "symbol",
    "token_value": "ath_tx_tasklet"
  },
  {
    "position": 7790,
    "token_type": "symbol",
    "token_value": "ath_tx_timeout"
  },
  {
    "position": 7812,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 7840,
    "token_type": "symbol",
    "token_value": "ath_tx_draintxq"
  },
  {
    "position": 7863,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7883,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 7907,
    "token_type": "symbol",
    "token_value": "ath_chan_set"
  },
  {
    "position": 7927,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 7947,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 7982,
    "token_type": "symbol",
    "token_value": "ath_draintxq"
  },
  {
    "position": 8002,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8038,
    "token_type": "symbol",
    "token_value": "ath_tx_txqaddbuf"
  },
  {
    "position": 8062,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8082,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 8109,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 8127,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 8145,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 8176,
    "token_type": "symbol",
    "token_value": "ath_stoprecv"
  },
  {
    "position": 8196,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8222,
    "token_type": "symbol",
    "token_value": "ath_startrecv"
  },
  {
    "position": 8243,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8270,
    "token_type": "symbol",
    "token_value": "ath_flushrecv"
  },
  {
    "position": 8291,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8318,
    "token_type": "symbol",
    "token_value": "ath_chan_change"
  },
  {
    "position": 8341,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8361,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 8396,
    "token_type": "symbol",
    "token_value": "ath_calibrate"
  },
  {
    "position": 8438,
    "token_type": "symbol",
    "token_value": "ath_newstate"
  },
  {
    "position": 8458,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 8517,
    "token_type": "symbol",
    "token_value": "ath_scan_start"
  },
  {
    "position": 8539,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 8569,
    "token_type": "symbol",
    "token_value": "ath_scan_end"
  },
  {
    "position": 8589,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 8619,
    "token_type": "symbol",
    "token_value": "ath_set_channel"
  },
  {
    "position": 8642,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 8672,
    "token_type": "symbol",
    "token_value": "ath_set_coverageclass"
  },
  {
    "position": 8701,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 8732,
    "token_type": "symbol",
    "token_value": "ath_mhz2ieee"
  },
  {
    "position": 8752,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 8784,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 8785,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 8817,
    "token_type": "symbol",
    "token_value": "athff_can_aggregate"
  },
  {
    "position": 8844,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 8864,
    "token_type": "symbol",
    "token_value": "ether_header"
  },
  {
    "position": 8889,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 8908,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 8939,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 8940,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 8961,
    "token_type": "symbol",
    "token_value": "net_device_stats"
  },
  {
    "position": 8999,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9027,
    "token_type": "symbol",
    "token_value": "ath_setup_stationkey"
  },
  {
    "position": 9055,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 9087,
    "token_type": "symbol",
    "token_value": "ath_setup_stationwepkey"
  },
  {
    "position": 9118,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 9150,
    "token_type": "symbol",
    "token_value": "ath_setup_keycacheslot"
  },
  {
    "position": 9180,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 9200,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 9232,
    "token_type": "symbol",
    "token_value": "ath_newassoc"
  },
  {
    "position": 9252,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 9288,
    "token_type": "symbol",
    "token_value": "ath_getchannels"
  },
  {
    "position": 9311,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9366,
    "token_type": "symbol",
    "token_value": "ath_led_event"
  },
  {
    "position": 9387,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 9419,
    "token_type": "symbol",
    "token_value": "ath_update_txpow"
  },
  {
    "position": 9443,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 9471,
    "token_type": "symbol",
    "token_value": "ath_set_mac_address"
  },
  {
    "position": 9498,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9533,
    "token_type": "symbol",
    "token_value": "ath_change_mtu"
  },
  {
    "position": 9555,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9587,
    "token_type": "symbol",
    "token_value": "ath_ioctl"
  },
  {
    "position": 9604,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9625,
    "token_type": "symbol",
    "token_value": "ifreq"
  },
  {
    "position": 9654,
    "token_type": "symbol",
    "token_value": "ath_rate_setup"
  },
  {
    "position": 9676,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9711,
    "token_type": "symbol",
    "token_value": "ath_setup_subrates"
  },
  {
    "position": 9737,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9753,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 9754,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 9786,
    "token_type": "symbol",
    "token_value": "ath_xr_rate_setup"
  },
  {
    "position": 9811,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 9839,
    "token_type": "symbol",
    "token_value": "ath_grppoll_txq_setup"
  },
  {
    "position": 9868,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 9905,
    "token_type": "symbol",
    "token_value": "ath_grppoll_start"
  },
  {
    "position": 9930,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 9965,
    "token_type": "symbol",
    "token_value": "ath_grppoll_stop"
  },
  {
    "position": 9989,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 10023,
    "token_type": "symbol",
    "token_value": "ath_node_move_data"
  },
  {
    "position": 10055,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 10087,
    "token_type": "symbol",
    "token_value": "ath_grppoll_txq_update"
  },
  {
    "position": 10117,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10149,
    "token_type": "symbol",
    "token_value": "ath_grppoll_period_update"
  },
  {
    "position": 10182,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10197,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 10198,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 10217,
    "token_type": "symbol",
    "token_value": "ath_setcurmode"
  },
  {
    "position": 10239,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10292,
    "token_type": "symbol",
    "token_value": "ath_dynamic_sysctl_register"
  },
  {
    "position": 10327,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10354,
    "token_type": "symbol",
    "token_value": "ath_dynamic_sysctl_unregister"
  },
  {
    "position": 10391,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10418,
    "token_type": "symbol",
    "token_value": "ath_announce"
  },
  {
    "position": 10438,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 10465,
    "token_type": "symbol",
    "token_value": "ath_descdma_setup"
  },
  {
    "position": 10490,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10510,
    "token_type": "symbol",
    "token_value": "ath_descdma"
  },
  {
    "position": 10580,
    "token_type": "symbol",
    "token_value": "ath_descdma_cleanup"
  },
  {
    "position": 10607,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 10627,
    "token_type": "symbol",
    "token_value": "ath_descdma"
  },
  {
    "position": 10678,
    "token_type": "symbol",
    "token_value": "ath_check_dfs_clear"
  },
  {
    "position": 10734,
    "token_type": "symbol",
    "token_value": "ath_get_hal_status_desc"
  },
  {
    "position": 10790,
    "token_type": "symbol",
    "token_value": "ath_rcv_dev_event"
  },
  {
    "position": 10815,
    "token_type": "symbol",
    "token_value": "notifier_block"
  },
  {
    "position": 10914,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t\t\t\t\t * calibrate every 30 secs in steady state\n \t\t\t\t\t\t\t\t * but check every second at first.\n \t\t\t\t\t\t\t\t */"
  },
  {
    "position": 11071,
    "token_type": "comment",
    "token_value": "/* country code */"
  },
  {
    "position": 11127,
    "token_type": "comment",
    "token_value": "/* enable outdoor use */"
  },
  {
    "position": 11190,
    "token_type": "comment",
    "token_value": "/* enable extended channels */"
  },
  {
    "position": 11268,
    "token_type": "comment",
    "token_value": "/* set default maximum vaps */"
  },
  {
    "position": 11391,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 11421,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 11447,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 11473,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 11501,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 11551,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11552,
    "token_type": "string",
    "token_value": "No error"
  },
  {
    "position": 11560,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11565,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11566,
    "token_type": "string",
    "token_value": "No hardware present or device not yet supported"
  },
  {
    "position": 11613,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11618,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11619,
    "token_type": "string",
    "token_value": "Memory allocation failed"
  },
  {
    "position": 11643,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11648,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11649,
    "token_type": "string",
    "token_value": "Hardware didn't respond as expected"
  },
  {
    "position": 11684,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11689,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11690,
    "token_type": "string",
    "token_value": "EEPROM magic number invalid"
  },
  {
    "position": 11717,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11722,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11723,
    "token_type": "string",
    "token_value": "EEPROM version invalid"
  },
  {
    "position": 11745,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11750,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11751,
    "token_type": "string",
    "token_value": "EEPROM unreadable"
  },
  {
    "position": 11768,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11773,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11774,
    "token_type": "string",
    "token_value": "EEPROM checksum invalid"
  },
  {
    "position": 11797,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11802,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11803,
    "token_type": "string",
    "token_value": "EEPROM read problem"
  },
  {
    "position": 11822,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11827,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11828,
    "token_type": "string",
    "token_value": "EEPROM mac address invalid"
  },
  {
    "position": 11854,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11859,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11860,
    "token_type": "string",
    "token_value": "EEPROM size not supported"
  },
  {
    "position": 11885,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11890,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11891,
    "token_type": "string",
    "token_value": "Attempt to change write-locked EEPROM"
  },
  {
    "position": 11928,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11933,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11934,
    "token_type": "string",
    "token_value": "Invalid parameter to function"
  },
  {
    "position": 11963,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11968,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 11969,
    "token_type": "string",
    "token_value": "Hardware revision not supported"
  },
  {
    "position": 12000,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12005,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12006,
    "token_type": "string",
    "token_value": "Hardware self-test failed"
  },
  {
    "position": 12031,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12036,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12037,
    "token_type": "string",
    "token_value": "Operation incomplete"
  },
  {
    "position": 12057,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12080,
    "token_type": "symbol",
    "token_value": "notifier_block"
  },
  {
    "position": 12166,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 12167,
    "token_type": "comment",
    "token_value": "if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,52))"
  },
  {
    "position": 12242,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12243,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 12244,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12270,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12271,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 12272,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12298,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12299,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 12300,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12328,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12329,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 12330,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12355,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12356,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 12357,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12386,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12387,
    "token_type": "string",
    "token_value": "s"
  },
  {
    "position": 12388,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12414,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12415,
    "token_type": "string",
    "token_value": "s"
  },
  {
    "position": 12416,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12421,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 12422,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 12428,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 12429,
    "token_type": "comment",
    "token_value": "include"
  },
  {
    "position": 12437,
    "token_type": "comment",
    "token_value": "<linux/moduleparam.h>"
  },
  {
    "position": 12491,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12526,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12561,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12598,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12632,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12672,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12709,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 12717,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 12718,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 12755,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12756,
    "token_type": "string",
    "token_value": "Override default country code"
  },
  {
    "position": 12785,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12816,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12817,
    "token_type": "string",
    "token_value": "Maximum VAPs"
  },
  {
    "position": 12829,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12860,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12861,
    "token_type": "string",
    "token_value": "Enable/disable outdoor use"
  },
  {
    "position": 12887,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12920,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12921,
    "token_type": "string",
    "token_value": "Enable/disable extended channel mode"
  },
  {
    "position": 12957,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12987,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 12988,
    "token_type": "string",
    "token_value": "Enable/disable RFKILL capability"
  },
  {
    "position": 13020,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13054,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13055,
    "token_type": "string",
    "token_value": "Create ath device in [sta|ap|wds|adhoc|ahdemo|monitor] mode. defaults to sta, use 'none' to disable"
  },
  {
    "position": 13154,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13185,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13186,
    "token_type": "string",
    "token_value": "Rate control algorithm [amrr|minstrel|onoe|sample], defaults to '"
  },
  {
    "position": 13251,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13266,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13267,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 13268,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13298,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 13302,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 13303,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 13319,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 13320,
    "token_type": "comment",
    "token_value": "if (LINUX_VERSION_CODE < KERNEL_VERSION(2,5,52))"
  },
  {
    "position": 13393,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13394,
    "token_type": "string",
    "token_value": "i"
  },
  {
    "position": 13395,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13400,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 13401,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 13436,
    "token_type": "string",
    "token_value": "0600"
  },
  {
    "position": 13444,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 13445,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 13480,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13481,
    "token_type": "string",
    "token_value": "Load-time debug output enable"
  },
  {
    "position": 13510,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 13517,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 13518,
    "token_type": "comment",
    "token_value": "define\tIFF_DUMPPKTS(sc, _m) \\"
  },
  {
    "position": 13548,
    "token_type": "comment",
    "token_value": "((sc->sc_debug & _m))"
  },
  {
    "position": 13585,
    "token_type": "symbol",
    "token_value": "ath_printrxbuf"
  },
  {
    "position": 13607,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 13637,
    "token_type": "symbol",
    "token_value": "ath_printtxbuf"
  },
  {
    "position": 13659,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 13704,
    "token_type": "string",
    "token_value": "0x00000001"
  },
  {
    "position": 13716,
    "token_type": "comment",
    "token_value": "/* basic xmit operation */"
  },
  {
    "position": 13767,
    "token_type": "string",
    "token_value": "0x00000002"
  },
  {
    "position": 13779,
    "token_type": "comment",
    "token_value": "/* xmit descriptors */"
  },
  {
    "position": 13822,
    "token_type": "string",
    "token_value": "0x00000004"
  },
  {
    "position": 13834,
    "token_type": "comment",
    "token_value": "/* basic recv operation */"
  },
  {
    "position": 13885,
    "token_type": "string",
    "token_value": "0x00000008"
  },
  {
    "position": 13897,
    "token_type": "comment",
    "token_value": "/* recv descriptors */"
  },
  {
    "position": 13940,
    "token_type": "string",
    "token_value": "0x00000010"
  },
  {
    "position": 13952,
    "token_type": "comment",
    "token_value": "/* rate control */"
  },
  {
    "position": 13992,
    "token_type": "string",
    "token_value": "0x00000020"
  },
  {
    "position": 14004,
    "token_type": "comment",
    "token_value": "/* reset processing */"
  },
  {
    "position": 14029,
    "token_type": "comment",
    "token_value": "/* 0x00000040 was ATH_DEBUG_MODE */"
  },
  {
    "position": 14087,
    "token_type": "string",
    "token_value": "0x00000080"
  },
  {
    "position": 14099,
    "token_type": "comment",
    "token_value": "/* beacon handling */"
  },
  {
    "position": 14145,
    "token_type": "string",
    "token_value": "0x00000100"
  },
  {
    "position": 14157,
    "token_type": "comment",
    "token_value": "/* watchdog timeout */"
  },
  {
    "position": 14200,
    "token_type": "string",
    "token_value": "0x00001000"
  },
  {
    "position": 14212,
    "token_type": "comment",
    "token_value": "/* ISR */"
  },
  {
    "position": 14244,
    "token_type": "string",
    "token_value": "0x00002000"
  },
  {
    "position": 14256,
    "token_type": "comment",
    "token_value": "/* tx ISR proc */"
  },
  {
    "position": 14296,
    "token_type": "string",
    "token_value": "0x00004000"
  },
  {
    "position": 14308,
    "token_type": "comment",
    "token_value": "/* rx ISR proc */"
  },
  {
    "position": 14352,
    "token_type": "string",
    "token_value": "0x00008000"
  },
  {
    "position": 14364,
    "token_type": "comment",
    "token_value": "/* beacon ISR proc */"
  },
  {
    "position": 14410,
    "token_type": "string",
    "token_value": "0x00010000"
  },
  {
    "position": 14422,
    "token_type": "comment",
    "token_value": "/* periodic calibration */"
  },
  {
    "position": 14472,
    "token_type": "string",
    "token_value": "0x00020000"
  },
  {
    "position": 14484,
    "token_type": "comment",
    "token_value": "/* key cache management */"
  },
  {
    "position": 14532,
    "token_type": "string",
    "token_value": "0x00040000"
  },
  {
    "position": 14544,
    "token_type": "comment",
    "token_value": "/* 802.11 state transitions */"
  },
  {
    "position": 14595,
    "token_type": "string",
    "token_value": "0x00080000"
  },
  {
    "position": 14607,
    "token_type": "comment",
    "token_value": "/* node management */"
  },
  {
    "position": 14648,
    "token_type": "string",
    "token_value": "0x00100000"
  },
  {
    "position": 14660,
    "token_type": "comment",
    "token_value": "/* led management */"
  },
  {
    "position": 14699,
    "token_type": "string",
    "token_value": "0x00200000"
  },
  {
    "position": 14711,
    "token_type": "comment",
    "token_value": "/* fast frames */"
  },
  {
    "position": 14750,
    "token_type": "string",
    "token_value": "0x00400000"
  },
  {
    "position": 14762,
    "token_type": "comment",
    "token_value": "/* turbo/dynamic turbo */"
  },
  {
    "position": 14809,
    "token_type": "string",
    "token_value": "0x00800000"
  },
  {
    "position": 14821,
    "token_type": "comment",
    "token_value": "/* uapsd */"
  },
  {
    "position": 14853,
    "token_type": "string",
    "token_value": "0x01000000"
  },
  {
    "position": 14865,
    "token_type": "comment",
    "token_value": "/* 11.h */"
  },
  {
    "position": 14897,
    "token_type": "string",
    "token_value": "0x80000000"
  },
  {
    "position": 14909,
    "token_type": "comment",
    "token_value": "/* fatal errors */"
  },
  {
    "position": 14947,
    "token_type": "string",
    "token_value": "0xffffffff"
  },
  {
    "position": 14963,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 14964,
    "token_type": "comment",
    "token_value": "define\tDPRINTF(sc, _m, _fmt, ...) do {\t\t\t\t\\"
  },
  {
    "position": 15008,
    "token_type": "comment",
    "token_value": "if (sc->sc_debug & (_m))\t\t\t\t\\"
  },
  {
    "position": 15040,
    "token_type": "comment",
    "token_value": "printk(_fmt, __VA_ARGS__);\t\t\t\\"
  },
  {
    "position": 15074,
    "token_type": "comment",
    "token_value": "} while (0)"
  },
  {
    "position": 15088,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15089,
    "token_type": "comment",
    "token_value": "define\tKEYPRINTF(sc, ix, hk, mac) do {\t\t\t\t\\"
  },
  {
    "position": 15133,
    "token_type": "comment",
    "token_value": "if (sc->sc_debug & ATH_DEBUG_KEYCACHE)\t\t\t\\"
  },
  {
    "position": 15178,
    "token_type": "comment",
    "token_value": "ath_keyprint(sc, __func__, ix, hk, mac);\t\\"
  },
  {
    "position": 15224,
    "token_type": "comment",
    "token_value": "} while (0)"
  },
  {
    "position": 15238,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15239,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 15244,
    "token_type": "comment",
    "token_value": "/* defined(AR_DEBUG) */"
  },
  {
    "position": 15269,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15270,
    "token_type": "comment",
    "token_value": "define\tIFF_DUMPPKTS(sc, _m)\tnetif_msg_dumppkts(&sc->sc_ic)"
  },
  {
    "position": 15330,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15331,
    "token_type": "comment",
    "token_value": "define\tDPRINTF(sc, _m, _fmt, ...)"
  },
  {
    "position": 15366,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15367,
    "token_type": "comment",
    "token_value": "define\tKEYPRINTF(sc, k, ix, mac)"
  },
  {
    "position": 15401,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15402,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 15408,
    "token_type": "comment",
    "token_value": "/* defined(AR_DEBUG) */"
  },
  {
    "position": 15435,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 15436,
    "token_type": "comment",
    "token_value": "define ATH_SETUP_XR_VAP(sc,vap,rfilt) \\"
  },
  {
    "position": 15476,
    "token_type": "comment",
    "token_value": "do { \\"
  },
  {
    "position": 15485,
    "token_type": "comment",
    "token_value": "if (sc->sc_curchan.privFlags & CHANNEL_4MS_LIMIT) \\"
  },
  {
    "position": 15540,
    "token_type": "comment",
    "token_value": "vap->iv_fragthreshold = XR_4MS_FRAG_THRESHOLD; \\"
  },
  {
    "position": 15593,
    "token_type": "comment",
    "token_value": "else \\"
  },
  {
    "position": 15603,
    "token_type": "comment",
    "token_value": "vap->iv_fragthreshold = vap->iv_xrvap->iv_fragthreshold; \\"
  },
  {
    "position": 15666,
    "token_type": "comment",
    "token_value": "if (!sc->sc_xrgrppoll) { \\"
  },
  {
    "position": 15696,
    "token_type": "comment",
    "token_value": "ath_grppoll_txq_setup(sc, HAL_TX_QUEUE_DATA, GRP_POLL_PERIOD_NO_XR_STA(sc)); \\"
  },
  {
    "position": 15779,
    "token_type": "comment",
    "token_value": "ath_grppoll_start(vap, sc->sc_xrpollcount); \\"
  },
  {
    "position": 15829,
    "token_type": "comment",
    "token_value": "ath_hal_setrxfilter(sc->sc_ah, rfilt|HAL_RX_FILTER_XRPOLL); \\"
  },
  {
    "position": 15895,
    "token_type": "comment",
    "token_value": "} \\"
  },
  {
    "position": 15902,
    "token_type": "comment",
    "token_value": "} while(0)"
  },
  {
    "position": 15921,
    "token_type": "comment",
    "token_value": "/*\n  * Define the scheme that we select MAC address for multiple BSS on the same radio.\n  * The very first VAP will just use the MAC address from the EEPROM.\n  * For the next 3 VAPs, we set the U/L bit (bit 1) in MAC address,\n  * and use the next two bits as the index of the VAP.\n  */"
  },
  {
    "position": 16208,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 16209,
    "token_type": "comment",
    "token_value": "define ATH_SET_VAP_BSSID_MASK(bssid_mask)\t\t\t\t\\"
  },
  {
    "position": 16256,
    "token_type": "comment",
    "token_value": "((bssid_mask)[0] &= ~(((ath_maxvaps-1) << 2) | 0x02))"
  },
  {
    "position": 16313,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 16314,
    "token_type": "comment",
    "token_value": "define ATH_GET_VAP_ID(bssid)                   ((bssid)[0] >> 2)"
  },
  {
    "position": 16380,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 16381,
    "token_type": "comment",
    "token_value": "define ATH_SET_VAP_BSSID(bssid, id)            \t\t\t\\"
  },
  {
    "position": 16433,
    "token_type": "comment",
    "token_value": "do {                                    \t\t\t\\"
  },
  {
    "position": 16484,
    "token_type": "comment",
    "token_value": "if (id)                            \t\t\t\\"
  },
  {
    "position": 16527,
    "token_type": "comment",
    "token_value": "(bssid)[0] |= (((id) << 2) | 0x02); \t\t\\"
  },
  {
    "position": 16582,
    "token_type": "comment",
    "token_value": "} while(0)"
  },
  {
    "position": 16603,
    "token_type": "symbol",
    "token_value": "ath_attach"
  },
  {
    "position": 16638,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 16684,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 16720,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 16760,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 16808,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 16950,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 16951,
    "token_type": "string",
    "token_value": "%s: devid 0x%x"
  },
  {
    "position": 16965,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 16967,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 16992,
    "token_type": "comment",
    "token_value": "/* Allocate space for dynamically determined maximum VAP count */"
  },
  {
    "position": 17111,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 17162,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 17193,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 17213,
    "token_type": "comment",
    "token_value": "/*\n \t * Cache line size is used to size and align various\n \t * structures used to communicate with the hardware.\n \t */"
  },
  {
    "position": 17366,
    "token_type": "comment",
    "token_value": "/* XXX assert csz is non-zero */"
  },
  {
    "position": 17426,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 17430,
    "token_type": "comment",
    "token_value": "/* convert to bytes */"
  },
  {
    "position": 17939,
    "token_type": "comment",
    "token_value": "/*\n \t * Attach the HAL and verify ABI compatibility by checking\n \t * the HAL's ABI signature against the one the driver was\n \t * compiled with.  A mismatch indicates the driver was\n \t * built with an ah.h that does not correspond to the HAL\n \t * module loaded in the kernel.\n \t */"
  },
  {
    "position": 18323,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18324,
    "token_type": "string",
    "token_value": "%s: unable to attach hardware: '%s' (HAL status %u)"
  },
  {
    "position": 18375,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 18377,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18530,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18531,
    "token_type": "string",
    "token_value": "%s: HAL ABI mismatch;"
  },
  {
    "position": 18553,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18559,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18560,
    "token_type": "string",
    "token_value": "driver expects 0x%x, HAL reports 0x%x"
  },
  {
    "position": 18597,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 18599,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 18666,
    "token_type": "comment",
    "token_value": "/* XXX */"
  },
  {
    "position": 18715,
    "token_type": "comment",
    "token_value": "/*\n \t * Check if the MAC has multi-rate retry support.\n \t * We do this by trying to setup a fake extended\n \t * descriptor.  MAC's that don't have support will\n \t * return false w/o doing anything.  MAC's that do\n \t * support it will return true w/o doing anything.\n \t */"
  },
  {
    "position": 19036,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19038,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19041,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19043,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19046,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19048,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19056,
    "token_type": "comment",
    "token_value": "/*\n \t * Check if the device has hardware counters for PHY\n \t * errors.  If so we need to enable the MIB interrupt\n \t * so we can act on stat triggers.\n \t */"
  },
  {
    "position": 19266,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 19273,
    "token_type": "comment",
    "token_value": "/*\n \t * Get the hardware key cache size.\n \t */"
  },
  {
    "position": 19410,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 19411,
    "token_type": "string",
    "token_value": "%s: Warning, using only %u entries in %u key cache"
  },
  {
    "position": 19461,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 19463,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 19546,
    "token_type": "comment",
    "token_value": "/*\n \t * Reset the key cache since some parts do not\n \t * reset the contents on initial power up.\n \t */"
  },
  {
    "position": 19660,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 19719,
    "token_type": "comment",
    "token_value": "/*\n \t * Collect the channel list using the default country\n \t * code and including outdoor channels.  The 802.11 layer\n \t * is responsible for filtering this list based on settings\n \t * like the phy mode.\n \t */"
  },
  {
    "position": 19951,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 20006,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 20205,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 20254,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 20384,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 20501,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 20527,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20528,
    "token_type": "string",
    "token_value": "ath_pci: switching rfkill capability %s"
  },
  {
    "position": 20567,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 20569,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20585,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20586,
    "token_type": "string",
    "token_value": "on"
  },
  {
    "position": 20588,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20592,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20593,
    "token_type": "string",
    "token_value": "off"
  },
  {
    "position": 20596,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 20645,
    "token_type": "comment",
    "token_value": "/*\n \t * Setup rate tables for all potential media types.\n \t */"
  },
  {
    "position": 20935,
    "token_type": "comment",
    "token_value": "/* Setup for half/quarter rates */"
  },
  {
    "position": 21001,
    "token_type": "comment",
    "token_value": "/* NB: setup here so ath_rate_update is happy */"
  },
  {
    "position": 21096,
    "token_type": "comment",
    "token_value": "/*\n \t * Allocate tx+rx descriptors and populate the lists.\n \t */"
  },
  {
    "position": 21206,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 21230,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 21231,
    "token_type": "string",
    "token_value": "%s: failed to allocate descriptors: %d"
  },
  {
    "position": 21269,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 21271,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 21318,
    "token_type": "comment",
    "token_value": "/*\n \t * Init ic_caps prior to queue init, since WME cap setting\n \t * depends on queue setup.\n \t */"
  },
  {
    "position": 21433,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 21440,
    "token_type": "comment",
    "token_value": "/*\n \t * Allocate hardware transmit queues: one queue for\n \t * beacon frames and one data queue for each QoS\n \t * priority.  Note that the HAL handles resetting\n \t * these queues at the needed time.\n \t *\n \t * XXX PS-Poll\n \t */"
  },
  {
    "position": 21736,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 21761,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 21762,
    "token_type": "string",
    "token_value": "%s: unable to setup a beacon xmit queue!"
  },
  {
    "position": 21802,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 21804,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 21909,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 21961,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 21962,
    "token_type": "string",
    "token_value": "%s: unable to setup CAB xmit queue!"
  },
  {
    "position": 21997,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 21999,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 22054,
    "token_type": "comment",
    "token_value": "/* NB: ensure BK queue is the lowest priority h/w queue */"
  },
  {
    "position": 22185,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 22186,
    "token_type": "string",
    "token_value": "%s: unable to setup xmit queue for %s traffic!"
  },
  {
    "position": 22232,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 22234,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 22483,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Not enough hardware tx queues to properly do WME;\n \t\t * just punt and assign them all to the same h/w queue.\n \t\t * We could do a better job of this if, for example,\n \t\t * we allocate queues when we switch from station to\n \t\t * AP mode.\n \t\t */"
  },
  {
    "position": 23081,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Mark WME capability since we have sufficient\n \t\t * hardware queues to do proper priority scheduling.\n \t\t */"
  },
  {
    "position": 23290,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 23357,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 23358,
    "token_type": "string",
    "token_value": "%s: unable to setup UAPSD xmit queue!"
  },
  {
    "position": 23395,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 23397,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 23468,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * default UAPSD on if HW capable\n \t\t\t */"
  },
  {
    "position": 23563,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 23564,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 23789,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 23862,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 23863,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 23873,
    "token_type": "comment",
    "token_value": "/*\n \t * Special case certain configurations.  Note the\n \t * CAB queue is handled by these specially so don't\n \t * include them when checking the txq setup mask.\n \t */"
  },
  {
    "position": 24071,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 24122,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 24152,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 24166,
    "token_type": "string",
    "token_value": "0x01"
  },
  {
    "position": 24247,
    "token_type": "string",
    "token_value": "0x0f"
  },
  {
    "position": 24606,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 24607,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 24794,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 24795,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 24823,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 24846,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 24866,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 24871,
    "token_type": "comment",
    "token_value": "/* low true */"
  },
  {
    "position": 24922,
    "token_type": "string",
    "token_value": "2700"
  },
  {
    "position": 24929,
    "token_type": "comment",
    "token_value": "/* 2.7 sec */"
  },
  {
    "position": 25274,
    "token_type": "comment",
    "token_value": "/* NB: ether_setup is done by bus-specific code */"
  },
  {
    "position": 25473,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 25483,
    "token_type": "comment",
    "token_value": "/* XXX */"
  },
  {
    "position": 25715,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 25719,
    "token_type": "comment",
    "token_value": "/* 1 for mgmt frame */"
  },
  {
    "position": 25743,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 25744,
    "token_type": "comment",
    "token_value": "ifdef USE_HEADERLEN_RESV"
  },
  {
    "position": 25809,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 25850,
    "token_type": "symbol",
    "token_value": "llc"
  },
  {
    "position": 25938,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 25939,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 26002,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26003,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 26010,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26011,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 26285,
    "token_type": "comment",
    "token_value": "/* XXX not right but it's not used anywhere important */"
  },
  {
    "position": 26445,
    "token_type": "comment",
    "token_value": "/* \n \t * Set the Atheros Advanced Capabilities from station config before \n \t * starting 802.11 state machine.  Currently, set only fast-frames \n \t * capability.\n \t */"
  },
  {
    "position": 26632,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 26671,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26672,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 26766,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 26771,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26772,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 26851,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 26858,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26859,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 26959,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 26965,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26966,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 26975,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 26976,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 27108,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 27113,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 27114,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 27121,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 27122,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 27209,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 27214,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 27215,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 27263,
    "token_type": "comment",
    "token_value": "/* ibss, nee adhoc, mode */"
  },
  {
    "position": 27316,
    "token_type": "comment",
    "token_value": "/* hostap mode */"
  },
  {
    "position": 27360,
    "token_type": "comment",
    "token_value": "/* monitor mode */"
  },
  {
    "position": 27404,
    "token_type": "comment",
    "token_value": "/* adhoc demo mode */"
  },
  {
    "position": 27454,
    "token_type": "comment",
    "token_value": "/* short preamble supported */"
  },
  {
    "position": 27510,
    "token_type": "comment",
    "token_value": "/* short slot time supported */"
  },
  {
    "position": 27564,
    "token_type": "comment",
    "token_value": "/* capable of WPA1+WPA2 */"
  },
  {
    "position": 27616,
    "token_type": "comment",
    "token_value": "/* capable of bg scanning */"
  },
  {
    "position": 27652,
    "token_type": "comment",
    "token_value": "/*\n \t * Query the HAL to figure out h/w crypto support.\n \t */"
  },
  {
    "position": 28165,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Check if h/w does the MIC and/or whether the\n \t\t * separate key cache entries are required to\n \t\t * handle both tx+rx MIC keys.\n \t\t */"
  },
  {
    "position": 28407,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Check if h/w does MIC correctly when\n \t\t\t * WMM is turned on.\n \t\t\t */"
  },
  {
    "position": 28574,
    "token_type": "comment",
    "token_value": "/*\n \t\t * If the h/w supports storing tx+rx MIC keys\n \t\t * in one cache slot automatically enable use.\n \t\t */"
  },
  {
    "position": 28784,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 28858,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 28864,
    "token_type": "comment",
    "token_value": "sc->sc_mcastkey = ath_hal_getmcastkeysearch(ah);"
  },
  {
    "position": 28915,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 28925,
    "token_type": "comment",
    "token_value": "/*\n \t * Mark key cache slots associated with global keys\n \t * as in use.  If we knew TKIP was not to be used we\n \t * could leave the +32, +64, and +32+64 slots free.\n \t */"
  },
  {
    "position": 29108,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 29198,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 29257,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 29290,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 29293,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 29309,
    "token_type": "comment",
    "token_value": "/*\n \t * TPC support can be done either with a global cap or\n \t * per-packet support.  The latter is not available on\n \t * all parts.  We're a bit pedantic here as all parts\n \t * support a global cap.\n \t */"
  },
  {
    "position": 29645,
    "token_type": "comment",
    "token_value": "/*\n \t * Default 11.h to start enabled.\n \t */"
  },
  {
    "position": 29731,
    "token_type": "comment",
    "token_value": "/*\n \t * Check for misc other capabilities.\n \t */"
  },
  {
    "position": 29943,
    "token_type": "comment",
    "token_value": "/*\n \t * Indicate we need the 802.11 header padded to a\n \t * 32-bit boundary for 4-address and QoS frames.\n \t */"
  },
  {
    "position": 30098,
    "token_type": "comment",
    "token_value": "/*\n \t * Query the HAL about antenna support\n \t * Enable rx fast diversity if HAL has support\n \t */"
  },
  {
    "position": 30256,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 30319,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 30358,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 30383,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 30478,
    "token_type": "comment",
    "token_value": "/*\n \t * Not all chips have the VEOL support we want to\n \t * use with IBSS beacons; check here for it.\n \t */"
  },
  {
    "position": 30636,
    "token_type": "comment",
    "token_value": "/* Interference Mitigation causes problems with recevive sensitivity\n         * for OFDM rates when we are in non-STA modes. We will turn this\n         * capability off in non-STA VAPs\n         */"
  },
  {
    "position": 30898,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 30905,
    "token_type": "comment",
    "token_value": "/* get mac address from hardware */"
  },
  {
    "position": 31203,
    "token_type": "comment",
    "token_value": "/* call MI attach routine. */"
  },
  {
    "position": 31261,
    "token_type": "comment",
    "token_value": "/* override default methods */"
  },
  {
    "position": 31448,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 31449,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 31516,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 31517,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 32016,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32017,
    "token_type": "string",
    "token_value": "%s: unable to register device"
  },
  {
    "position": 32046,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 32048,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32083,
    "token_type": "comment",
    "token_value": "/*\n \t * Attach dynamic MIB vars and announce support\n \t * now that we have a device name with unit number.\n \t */"
  },
  {
    "position": 32279,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 32280,
    "token_type": "comment",
    "token_value": "ifdef ATH_TX99_DIAG"
  },
  {
    "position": 32309,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32310,
    "token_type": "string",
    "token_value": "%s: TX99 support enabled"
  },
  {
    "position": 32334,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 32336,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32352,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 32353,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 32378,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 32430,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32431,
    "token_type": "string",
    "token_value": "none"
  },
  {
    "position": 32435,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32460,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 32496,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32497,
    "token_type": "string",
    "token_value": "sta"
  },
  {
    "position": 32500,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32574,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32575,
    "token_type": "string",
    "token_value": "ap"
  },
  {
    "position": 32577,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32654,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32655,
    "token_type": "string",
    "token_value": "adhoc"
  },
  {
    "position": 32660,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32735,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32736,
    "token_type": "string",
    "token_value": "ahdemo"
  },
  {
    "position": 32742,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32819,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32820,
    "token_type": "string",
    "token_value": "wds"
  },
  {
    "position": 32823,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32897,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32898,
    "token_type": "string",
    "token_value": "monitor"
  },
  {
    "position": 32905,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32982,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 32983,
    "token_type": "string",
    "token_value": "Unknown autocreate mode: %s"
  },
  {
    "position": 33010,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 33012,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33054,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 33094,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 33152,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33153,
    "token_type": "string",
    "token_value": "ath%d"
  },
  {
    "position": 33158,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33263,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33264,
    "token_type": "string",
    "token_value": "%s: autocreation of VAP failed: %d"
  },
  {
    "position": 33298,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 33300,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33342,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 33576,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 33608,
    "token_type": "symbol",
    "token_value": "ath_detach"
  },
  {
    "position": 33626,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 33655,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 33691,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 33762,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33763,
    "token_type": "string",
    "token_value": "%s: flags %x"
  },
  {
    "position": 33775,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 33777,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 33869,
    "token_type": "comment",
    "token_value": "/* Flush the radar task if it's scheduled */"
  },
  {
    "position": 33941,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 33992,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 33999,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: the order of these is important:\n \t * o call the 802.11 layer before detaching the HAL to\n \t *   ensure callbacks into the driver to delete global\n \t *   key cache entries can be handled\n \t * o reclaim the tx queue data structures after calling\n \t *   the 802.11 layer as we'll get called back to reclaim\n \t *   node state and potentially want to use them\n \t * o to cleanup the tx queues the HAL is called, so detach\n \t *   it last\n \t * Other than that, it's straightforward...\n \t */"
  },
  {
    "position": 34553,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 34558,
    "token_type": "comment",
    "token_value": "/* disable further intr's */"
  },
  {
    "position": 34615,
    "token_type": "comment",
    "token_value": "/* clear ISR */"
  },
  {
    "position": 34690,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 34698,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 34699,
    "token_type": "comment",
    "token_value": "ifdef ATH_TX99_DIAG"
  },
  {
    "position": 34784,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 34785,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 35021,
    "token_type": "comment",
    "token_value": "/* prevent calling ath_stop again */"
  },
  {
    "position": 35093,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 35116,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 35154,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 35232,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 35262,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 35305,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 35339,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 35365,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 35388,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 35470,
    "token_type": "comment",
    "token_value": "/* needs to disable hardware too */"
  },
  {
    "position": 35529,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 35534,
    "token_type": "comment",
    "token_value": "/* disable interrupts */"
  },
  {
    "position": 35581,
    "token_type": "comment",
    "token_value": "/* stop xmit side */"
  },
  {
    "position": 35624,
    "token_type": "comment",
    "token_value": "/* stop recv side */"
  },
  {
    "position": 35651,
    "token_type": "comment",
    "token_value": "/* XXX ic unlocked and race against add */"
  },
  {
    "position": 35721,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_STA"
  },
  {
    "position": 35738,
    "token_type": "comment",
    "token_value": "/* ap+sta for repeater application */"
  },
  {
    "position": 35802,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 35806,
    "token_type": "comment",
    "token_value": "/* only one sta regardless */"
  },
  {
    "position": 35877,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 35940,
    "token_type": "comment",
    "token_value": "/* If using station beacons, must first up */"
  },
  {
    "position": 36054,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 36093,
    "token_type": "comment",
    "token_value": "/* Run with chip in AP mode */"
  },
  {
    "position": 36176,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_IBSS"
  },
  {
    "position": 36217,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 36221,
    "token_type": "comment",
    "token_value": "/* only one */"
  },
  {
    "position": 36293,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_AHDEMO"
  },
  {
    "position": 36320,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_MONITOR"
  },
  {
    "position": 36364,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 36400,
    "token_type": "comment",
    "token_value": "/* preserve existing mode */"
  },
  {
    "position": 36511,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_HOSTAP"
  },
  {
    "position": 36538,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_WDS"
  },
  {
    "position": 36558,
    "token_type": "comment",
    "token_value": "/* permit multiple ap's and/or wds links */"
  },
  {
    "position": 36605,
    "token_type": "comment",
    "token_value": "/* XXX sta+ap for repeater/bridge application */"
  },
  {
    "position": 36678,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 36740,
    "token_type": "comment",
    "token_value": "/* XXX not right, beacon buffer is allocated on RUN trans */"
  },
  {
    "position": 36888,
    "token_type": "comment",
    "token_value": "/*\n \t\t * XXX Not sure if this is correct when operating only\n \t\t * with WDS links.\n \t\t */"
  },
  {
    "position": 37118,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 37119,
    "token_type": "string",
    "token_value": "too many virtual ap's (already got %d)"
  },
  {
    "position": 37157,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 37159,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 37236,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 37298,
    "token_type": "comment",
    "token_value": "/* XXX msg */"
  },
  {
    "position": 37415,
    "token_type": "comment",
    "token_value": "/* override with driver methods */"
  },
  {
    "position": 37754,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 37755,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 37813,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 37814,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 37824,
    "token_type": "comment",
    "token_value": "/* Let rate control register proc entries for the VAP */"
  },
  {
    "position": 37977,
    "token_type": "comment",
    "token_value": "/*\n \t * Change the interface type for monitor mode.\n \t */"
  },
  {
    "position": 38177,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 38240,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 38305,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Hardware supports the bssid mask and a unique\n \t\t * bssid was requested.  Assign a new mac address\n \t\t * and expand our bssid mask to cover the active\n \t\t * virtual ap's with distinct addresses.\n \t\t */"
  },
  {
    "position": 38523,
    "token_type": "comment",
    "token_value": "/* do a full search to mark all the allocated VAPs */"
  },
  {
    "position": 38590,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 38652,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 38705,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 38738,
    "token_type": "comment",
    "token_value": "/* get the first available slot */"
  },
  {
    "position": 38793,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 38806,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 38900,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 39051,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Allocate beacon state for hostap/ibss.  We know\n \t\t * a buffer is available because of the check above.\n \t\t */"
  },
  {
    "position": 39340,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Assign the VAP to a beacon xmit slot.  As\n \t\t\t * above, this cannot fail to find one.\n \t\t\t */"
  },
  {
    "position": 39464,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 39483,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 39559,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t\t * XXX hack, space out slots to better\n \t\t\t\t\t * deal with misses\n \t\t\t\t\t */"
  },
  {
    "position": 39660,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 39707,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 39751,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 39810,
    "token_type": "comment",
    "token_value": "/* NB: keep looking for a double slot */"
  },
  {
    "position": 39913,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 39914,
    "token_type": "string",
    "token_value": "beacon slot %u not empty?"
  },
  {
    "position": 39939,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40093,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Multiple VAPs are to transmit beacons and we\n \t\t\t * have h/w support for TSF adjusting; enable use\n \t\t\t * of staggered beacons.\n \t\t\t */"
  },
  {
    "position": 40243,
    "token_type": "comment",
    "token_value": "/* XXX check for beacon interval too small */"
  },
  {
    "position": 40311,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 40357,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40358,
    "token_type": "string",
    "token_value": "Staggered beacons are not possible"
  },
  {
    "position": 40393,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40401,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40402,
    "token_type": "string",
    "token_value": "with maxvaps set to %d."
  },
  {
    "position": 40425,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 40427,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40476,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 40518,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 40565,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40566,
    "token_type": "string",
    "token_value": "sc->stagbeacons %sabled"
  },
  {
    "position": 40589,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 40591,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40620,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40621,
    "token_type": "string",
    "token_value": "en"
  },
  {
    "position": 40623,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40627,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40628,
    "token_type": "string",
    "token_value": "dis"
  },
  {
    "position": 40631,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 40771,
    "token_type": "comment",
    "token_value": "/* complete setup */"
  },
  {
    "position": 41090,
    "token_type": "comment",
    "token_value": "/*\n \t * Adhoc demo mode is a pseudo mode; to the HAL it's\n \t * just ibss mode and the driver doesn't use management\n \t * frames.  Other modes carry over directly to the HAL.\n \t */"
  },
  {
    "position": 41398,
    "token_type": "comment",
    "token_value": "/* NB: compatible */"
  },
  {
    "position": 41422,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 41423,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 41558,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 41559,
    "token_type": "string",
    "token_value": "grppoll"
  },
  {
    "position": 41566,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 41589,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 41616,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 41622,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 41636,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 41637,
    "token_type": "string",
    "token_value": "%s:grppoll Buf allocation failed"
  },
  {
    "position": 41670,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 41672,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 41811,
    "token_type": "comment",
    "token_value": "/* Save current diversity state if user destroys XR VAP */"
  },
  {
    "position": 41950,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 41977,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 41990,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 41991,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 42041,
    "token_type": "comment",
    "token_value": "/* restart hardware */"
  },
  {
    "position": 42092,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 42095,
    "token_type": "comment",
    "token_value": "/* restart recv */"
  },
  {
    "position": 42125,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 42126,
    "token_type": "string",
    "token_value": "%s: %s: unable to start recv logic"
  },
  {
    "position": 42160,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 42162,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 42248,
    "token_type": "comment",
    "token_value": "/* restart beacons */"
  },
  {
    "position": 42369,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 42400,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 42447,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 42483,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 42517,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 42563,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 42621,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 42622,
    "token_type": "string",
    "token_value": "VAP not stopped"
  },
  {
    "position": 42637,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 42681,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Quiesce the hardware while we remove the VAP.  In\n \t\t * particular we need to reclaim all references to the\n \t\t * VAP state by any frames pending on the tx queues.\n \t\t *\n \t\t * XXX can we do this w/o affecting other VAPs?\n \t\t */"
  },
  {
    "position": 42941,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 42946,
    "token_type": "comment",
    "token_value": "/* disable interrupts */"
  },
  {
    "position": 42993,
    "token_type": "comment",
    "token_value": "/* stop xmit side */"
  },
  {
    "position": 43036,
    "token_type": "comment",
    "token_value": "/* stop recv side */"
  },
  {
    "position": 43065,
    "token_type": "comment",
    "token_value": "/*\n \t * Reclaim any pending mcast bufs on the VAP.\n \t */"
  },
  {
    "position": 43207,
    "token_type": "comment",
    "token_value": "/*\n \t * Reclaim beacon state.  Note this must be done before\n \t * VAP instance is reclaimed as we may have a reference\n \t * to it in the buffer for the beacon frame.\n \t */"
  },
  {
    "position": 43434,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 43600,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 43628,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 43754,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 43897,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 43935,
    "token_type": "comment",
    "token_value": "/* NB: memory is reclaimed through dev->destructor callback */"
  },
  {
    "position": 44036,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 44037,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 44060,
    "token_type": "comment",
    "token_value": "/*\n \t * If it's an XR VAP, free the memory allocated explicitly.\n \t * Since the XR VAP is not registered, OS cannot free the memory.\n \t */"
  },
  {
    "position": 44383,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 44444,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 44651,
    "token_type": "comment",
    "token_value": "/* Restore diversity setting to old diversity setting */"
  },
  {
    "position": 44813,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 44814,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 44833,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 45010,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 45061,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Restart rx+tx machines if device is still running.\n \t\t */"
  },
  {
    "position": 45156,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 45159,
    "token_type": "comment",
    "token_value": "/* restart recv */"
  },
  {
    "position": 45189,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45190,
    "token_type": "string",
    "token_value": "%s: %s: unable to start recv logic"
  },
  {
    "position": 45224,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 45226,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45312,
    "token_type": "comment",
    "token_value": "/* restart beacons */"
  },
  {
    "position": 45407,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 45436,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 45494,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45495,
    "token_type": "string",
    "token_value": "%s: flags %x"
  },
  {
    "position": 45507,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 45509,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45582,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 45611,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 45669,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45670,
    "token_type": "string",
    "token_value": "%s: flags %x"
  },
  {
    "position": 45682,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 45684,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 45779,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 45806,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 45840,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 45862,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 45885,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 45908,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 45937,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 45960,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 45994,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 46042,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 46148,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 46149,
    "token_type": "comment",
    "token_value": "define\tPA2DESC(_sc, _pa) \\"
  },
  {
    "position": 46176,
    "token_type": "comment",
    "token_value": "((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc + \\"
  },
  {
    "position": 46236,
    "token_type": "comment",
    "token_value": "((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))"
  },
  {
    "position": 46285,
    "token_type": "comment",
    "token_value": "/* XXXAPSD: build in check against max triggers we could see\n \t *          based on ic->ic_uapsdmaxtriggers.\n \t */"
  },
  {
    "position": 46664,
    "token_type": "comment",
    "token_value": "/* NB: never process the self-linked entry at the end */"
  },
  {
    "position": 46786,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * already processed this buffer (shouldn't occur if\n \t\t\t * we change code to always process descriptors in\n \t\t\t * rx intr handler - as opposed to sometimes processing\n \t\t\t * in the rx tasklet).\n \t\t\t */"
  },
  {
    "position": 47060,
    "token_type": "comment",
    "token_value": "/* XXX ??? can this happen */"
  },
  {
    "position": 47101,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 47102,
    "token_type": "string",
    "token_value": "%s: no skbuff"
  },
  {
    "position": 47115,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 47117,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 47155,
    "token_type": "comment",
    "token_value": "/*\n \t\t * XXXAPSD: consider new HAL call that does only the subset\n \t\t *          of ath_hal_rxprocdesc we require for trigger search.\n \t\t */"
  },
  {
    "position": 47301,
    "token_type": "comment",
    "token_value": "/* \n \t\t * NB: descriptor memory doesn't need to be sync'd\n \t\t *     due to the way it was allocated. \n \t\t */"
  },
  {
    "position": 47415,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Must provide the virtual address of the current\n \t\t * descriptor, the physical address, and the virtual\n \t\t * address of the next descriptor in the h/w chain.\n \t\t * This allows the HAL to look ahead to see if the\n \t\t * hardware is done with a descriptor by checking the\n \t\t * done bit in the following descriptor and the address\n \t\t * of the current descriptor the DMA engine is working\n \t\t * on.  All this is necessary because of our use of\n \t\t * a self-linked list to avoid rx overruns.\n \t\t */"
  },
  {
    "position": 48055,
    "token_type": "comment",
    "token_value": "/* XXX: we do not support frames spanning multiple descriptors */"
  },
  {
    "position": 48166,
    "token_type": "comment",
    "token_value": "/* errors? */"
  },
  {
    "position": 48231,
    "token_type": "comment",
    "token_value": "/* prepare wireless header for examination */"
  },
  {
    "position": 48352,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 48420,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 48458,
    "token_type": "comment",
    "token_value": "/* find the node. it MUST be in the keycache. */"
  },
  {
    "position": 48632,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * XXX: this can occur if WEP mode is used for non-Atheros clients\n \t\t\t *      (since we do not know which of the 4 WEP keys will be used\n \t\t\t *      at association time, so cannot setup a key-cache entry.\n \t\t\t *      The Atheros client can convey this in the Atheros IE.)\n \t\t\t *\n \t\t\t * TODO: The fix is to use the hash lookup on the node here.\n \t\t\t */"
  },
  {
    "position": 48994,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 49000,
    "token_type": "comment",
    "token_value": "/*"
  },
  {
    "position": 49007,
    "token_type": "comment",
    "token_value": "* This print is very chatty, so removing for now."
  },
  {
    "position": 49062,
    "token_type": "comment",
    "token_value": "*/"
  },
  {
    "position": 49070,
    "token_type": "comment",
    "token_value": "DPRINTF(sc, ATH_DEBUG_UAPSD, \"%s: U-APSD node (%s) has invalid keycache entry\\n\","
  },
  {
    "position": 49156,
    "token_type": "comment",
    "token_value": "__func__, ether_sprintf(qwh->i_addr2));"
  },
  {
    "position": 49201,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 49300,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Must deal with change of state here, since otherwise there would\n \t\t * be a race (on two quick frames from STA) between this code and the\n \t\t * tasklet where we would:\n \t\t *   - miss a trigger on entry to PS if we're already trigger hunting\n \t\t *   - generate spurious SP on exit (due to frame following exit frame)\n \t\t */"
  },
  {
    "position": 49651,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 49737,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * NB: do not require lock here since this runs at intr\n \t\t\t * \"proper\" time and cannot be interrupted by rx tasklet\n \t\t\t * (code there has lock). May want to place a macro here\n \t\t\t * (that does nothing) to make this more clear.\n \t\t\t */"
  },
  {
    "position": 50078,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 50191,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 50378,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 50379,
    "token_type": "string",
    "token_value": "%s: Node (%s) became U-APSD triggerable (%d)"
  },
  {
    "position": 50423,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 50425,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 50640,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 50641,
    "token_type": "string",
    "token_value": "%s: Node (%s) no longer U-APSD triggerable (%d)"
  },
  {
    "position": 50688,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 50690,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 50776,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t\t * XXX: rapidly thrashing sta could get \n \t\t\t\t * out-of-order frames due this flush placing\n \t\t\t\t * frames on backlogged regular AC queue and\n \t\t\t\t * re-entry to PS having fresh arrivals onto\n \t\t\t\t * faster UPSD delivery queue. if this is a\n \t\t\t\t * big problem we may need to drop these.\n \t\t\t\t */"
  },
  {
    "position": 51174,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 51198,
    "token_type": "comment",
    "token_value": "/* make sure the frame is QoS data/null */"
  },
  {
    "position": 51244,
    "token_type": "comment",
    "token_value": "/* NB: with current sub-type definitions, the \n \t\t * IEEE80211_FC0_SUBTYPE_QOS check, below, covers the \n \t\t * QoS null case too.\n \t\t */"
  },
  {
    "position": 51400,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 51481,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 51535,
    "token_type": "comment",
    "token_value": "/*\n \t\t * To be a trigger:\n \t\t *   - node is in triggerable state\n \t\t *   - QoS data/null frame with triggerable AC\n \t\t */"
  },
  {
    "position": 51677,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 51826,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 51827,
    "token_type": "string",
    "token_value": "%s: U-APSD trigger detected for node (%s) on AC %d"
  },
  {
    "position": 51877,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 51879,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 51985,
    "token_type": "comment",
    "token_value": "/* have trigger, but SP in progress, so ignore */"
  },
  {
    "position": 52073,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52074,
    "token_type": "string",
    "token_value": "%s:   SP already in progress - ignoring"
  },
  {
    "position": 52113,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 52115,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52158,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Detect duplicate triggers and drop if so.\n \t\t */"
  },
  {
    "position": 52281,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 52391,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52392,
    "token_type": "string",
    "token_value": "%s: dropped dup trigger, ac %d, seq %d"
  },
  {
    "position": 52430,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 52432,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52514,
    "token_type": "comment",
    "token_value": "/* start the SP */"
  },
  {
    "position": 52824,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52825,
    "token_type": "string",
    "token_value": "%s: Queue empty, generating QoS NULL to send"
  },
  {
    "position": 52869,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 52871,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 52894,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * Empty queue, so need to send QoS null on this ac. Make a\n \t\t\t * call that will dump a QoS null onto the node's queue, then\n \t\t\t * we can proceed as normal.\n \t\t\t */"
  },
  {
    "position": 53167,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 53246,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 53298,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 53333,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 53382,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * NB: flip the bit to cause intr on the EOSP desc,\n \t\t\t * which is the last one\n \t\t\t */"
  },
  {
    "position": 53544,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 53631,
    "token_type": "comment",
    "token_value": "/* simulate lost EOSP */"
  },
  {
    "position": 53675,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 53681,
    "token_type": "string",
    "token_value": "0x40"
  },
  {
    "position": 53702,
    "token_type": "comment",
    "token_value": "/* more data bit only for EOSP frame */"
  },
  {
    "position": 53795,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 53904,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 54103,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54104,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 54214,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54215,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 54293,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54294,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 54310,
    "token_type": "comment",
    "token_value": "/* below leaves an_uapsd_q NULL */"
  },
  {
    "position": 54656,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 54747,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54748,
    "token_type": "comment",
    "token_value": "undef PA2DESC"
  },
  {
    "position": 54768,
    "token_type": "comment",
    "token_value": "/*\n  * Interrupt handler.  Most of the actual processing is deferred.\n  */"
  },
  {
    "position": 54857,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54858,
    "token_type": "comment",
    "token_value": "if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,19)"
  },
  {
    "position": 54940,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 54941,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 54986,
    "token_type": "symbol",
    "token_value": "pt_regs"
  },
  {
    "position": 55002,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 55003,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 55021,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 55056,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 55092,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 55180,
    "token_type": "comment",
    "token_value": "/*\n \t\t * The hardware is not ready/present, don't touch anything.\n \t\t * Note this can happen early on if the IRQ is shared.\n \t\t */"
  },
  {
    "position": 55365,
    "token_type": "comment",
    "token_value": "/* shared irq, not for us */"
  },
  {
    "position": 55518,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 55519,
    "token_type": "string",
    "token_value": "%s: flags 0x%x"
  },
  {
    "position": 55533,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 55535,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 55597,
    "token_type": "comment",
    "token_value": "/* clear ISR */"
  },
  {
    "position": 55636,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 55641,
    "token_type": "comment",
    "token_value": "/* disable further intr's */"
  },
  {
    "position": 55710,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 55715,
    "token_type": "comment",
    "token_value": "/*\n \t * Figure out the reason(s) for the interrupt.  Note\n \t * that the HAL returns a pseudo-ISR that may include\n \t * bits we haven't explicitly enabled so we mask the\n \t * value to ensure we only process bits we requested.\n \t */"
  },
  {
    "position": 55978,
    "token_type": "comment",
    "token_value": "/* NB: clears ISR too */"
  },
  {
    "position": 56033,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 56034,
    "token_type": "string",
    "token_value": "%s: status 0x%x"
  },
  {
    "position": 56049,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 56051,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 56101,
    "token_type": "comment",
    "token_value": "/* discard unasked for bits */"
  },
  {
    "position": 56219,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 56224,
    "token_type": "comment",
    "token_value": "/* disable intr's until reset */"
  },
  {
    "position": 56400,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 56405,
    "token_type": "comment",
    "token_value": "/* disable intr's until reset */"
  },
  {
    "position": 56537,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Software beacon alert--time to send a beacon.\n \t\t\t * Handle beacon transmission directly; deferring\n \t\t\t * this is too slow to meet timing constraints\n \t\t\t * under load.\n \t\t\t */"
  },
  {
    "position": 56803,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * NB: the hardware should re-read the link when\n \t\t\t *     RXE bit is written, but it doesn't work at\n \t\t\t *     least on older hardware revs.\n \t\t\t */"
  },
  {
    "position": 57064,
    "token_type": "comment",
    "token_value": "/* bump tx trigger level */"
  },
  {
    "position": 57210,
    "token_type": "comment",
    "token_value": "/* Get the noise floor data in interrupt context as we can't get it\n \t\t\t * per frame, so we need to get it as soon as possible (i.e. the tasklet\n \t\t\t * might take too long to fire */"
  },
  {
    "position": 57588,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 57589,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 57619,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Check if the beacon queue caused the interrupt \n \t\t\t * when a dynamic turbo switch\n \t\t\t * is pending so we can initiate the change. \n \t\t\t * XXX must wait for all VAPs' beacons\n \t\t\t */"
  },
  {
    "position": 57870,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 57945,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 57996,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 58005,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t\t * Hack: defer switch for 10ms to permit slow\n \t\t\t\t\t * clients time to track us.  This especially\n \t\t\t\t\t * noticeable with Windows clients.\n \t\t\t\t\t */"
  },
  {
    "position": 58245,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 58266,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 58267,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 58512,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Disable interrupts until we service the MIB\n \t\t\t * interrupt; otherwise it will continue to fire.\n \t\t\t */"
  },
  {
    "position": 58652,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 58660,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Let the HAL handle the event.  We assume it will\n \t\t\t * clear whatever condition caused the interrupt.\n \t\t\t */"
  },
  {
    "position": 58978,
    "token_type": "symbol",
    "token_value": "work_struct"
  },
  {
    "position": 59008,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 59049,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 59084,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 59118,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 59158,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 59228,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 59271,
    "token_type": "comment",
    "token_value": "/*\n \t\t * DFS was found, initiate channel change\n \t\t */"
  },
  {
    "position": 59785,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 60097,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 60124,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 60251,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 60275,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 60303,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 60355,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 60482,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60508,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60538,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 60539,
    "token_type": "string",
    "token_value": "%s: hardware error; resetting"
  },
  {
    "position": 60568,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 60570,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 60669,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60695,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60725,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 60726,
    "token_type": "string",
    "token_value": "%s: rx FIFO overrun; resetting"
  },
  {
    "position": 60756,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 60758,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 60857,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60883,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 60911,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 60999,
    "token_type": "comment",
    "token_value": "/* Beacon miss interrupt occured too short after last beacon\n \t\t * timer configuration. Ignore it as it could be spurious. */"
  },
  {
    "position": 61155,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 61156,
    "token_type": "string",
    "token_value": "%s: ignored"
  },
  {
    "position": 61167,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 61169,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 61224,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 61225,
    "token_type": "string",
    "token_value": "%s"
  },
  {
    "position": 61227,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 61229,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 61327,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 61410,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 61414,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_AUTO    */"
  },
  {
    "position": 61457,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_11A     */"
  },
  {
    "position": 61500,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_11B     */"
  },
  {
    "position": 61547,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_11G     */"
  },
  {
    "position": 61579,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 61583,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_FH      */"
  },
  {
    "position": 61629,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_TURBO_A */"
  },
  {
    "position": 61675,
    "token_type": "comment",
    "token_value": "/* IEEE80211_MODE_TURBO_G */"
  },
  {
    "position": 61920,
    "token_type": "comment",
    "token_value": "/*\n  * Context: process context\n  */"
  },
  {
    "position": 61988,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 62017,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 62053,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 62093,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 62153,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62207,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 62208,
    "token_type": "string",
    "token_value": "%s: mode %d"
  },
  {
    "position": 62219,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 62221,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 62254,
    "token_type": "comment",
    "token_value": "/*\n \t * Stop anything previously setup.  This is safe\n \t * whether this is the first time through or not.\n \t */"
  },
  {
    "position": 62393,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 62394,
    "token_type": "comment",
    "token_value": "ifdef ATH_CAP_TPC"
  },
  {
    "position": 62460,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62463,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 62474,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 62475,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 62485,
    "token_type": "comment",
    "token_value": "/* Whether we should enable h/w TKIP MIC */"
  },
  {
    "position": 62570,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62627,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62630,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62700,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62802,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62805,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62878,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 62881,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 62901,
    "token_type": "comment",
    "token_value": "/*\n \t * Flush the skb's allocated for receive in case the rx\n \t * buffer size changes.  This could be optimized but for\n \t * now we do it each time under the assumption it does\n \t * not happen often.\n \t */"
  },
  {
    "position": 63132,
    "token_type": "comment",
    "token_value": "/*\n \t * The basic interface to setting the hardware in a good\n \t * state is ``reset''.  On return the hardware is known to\n \t * be powered up and with interrupts disabled.  This must\n \t * be followed by initialization of the appropriate bits\n \t * and then setup of the interrupt mask.\n \t */"
  },
  {
    "position": 63628,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 63629,
    "token_type": "string",
    "token_value": "%s: unable to reset hardware: '%s' (HAL status %u)"
  },
  {
    "position": 63680,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 63686,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 63687,
    "token_type": "string",
    "token_value": "(freq %u flags 0x%x)"
  },
  {
    "position": 63707,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 63709,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 63934,
    "token_type": "comment",
    "token_value": "/* Turn off Interference Mitigation in non-STA modes */"
  },
  {
    "position": 64105,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 64106,
    "token_type": "string",
    "token_value": "%s: disabling interference mitigation (ANI)"
  },
  {
    "position": 64149,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 64151,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 64190,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 64202,
    "token_type": "comment",
    "token_value": "/*\n \t * This is needed only to setup initial state\n \t * but it's best done after a reset.\n \t */"
  },
  {
    "position": 64326,
    "token_type": "comment",
    "token_value": "/* Set the default RX antenna; it may get lost on reset. */"
  },
  {
    "position": 64430,
    "token_type": "comment",
    "token_value": "/*\n \t * Setup the hardware after reset: the key cache\n \t * is filled as needed and the receive engine is\n \t * set going.  Frame transmit is handled entirely\n \t * in the frame output path; there's nothing to do\n \t * here except setup the interrupt mask.\n \t */"
  },
  {
    "position": 64690,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 64696,
    "token_type": "comment",
    "token_value": "ath_initkeytable(sc);\t\t/* XXX still needed? */"
  },
  {
    "position": 64745,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 64780,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 64795,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 64796,
    "token_type": "string",
    "token_value": "%s: unable to start recv logic"
  },
  {
    "position": 64826,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 64828,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 64880,
    "token_type": "comment",
    "token_value": "/* Enable interrupts. */"
  },
  {
    "position": 65024,
    "token_type": "comment",
    "token_value": "/*\n \t * Enable MIB interrupts when there are hardware phy counters.\n \t * Note we only do this (at the moment) for station mode.\n \t */"
  },
  {
    "position": 65289,
    "token_type": "comment",
    "token_value": "/*\n \t * The hardware should be ready to go now so it's safe\n \t * to kick the 802.11 state machine as it's likely to\n \t * immediately call back to us to send mgmt frames.\n \t */"
  },
  {
    "position": 65577,
    "token_type": "comment",
    "token_value": "/* we are ready to go */"
  },
  {
    "position": 65634,
    "token_type": "comment",
    "token_value": "/* start all VAPs */"
  },
  {
    "position": 65656,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 65657,
    "token_type": "comment",
    "token_value": "ifdef ATH_TX99_DIAG"
  },
  {
    "position": 65741,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 65742,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 65795,
    "token_type": "comment",
    "token_value": "/* Caller must lock ATH_LOCK \n  *\n  * Context: softIRQ\n  */"
  },
  {
    "position": 65892,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 65921,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 65957,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 65997,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 66055,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 66056,
    "token_type": "string",
    "token_value": "%s: invalid %u flags 0x%x"
  },
  {
    "position": 66081,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 66083,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 66167,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Shutdown the hardware and driver:\n \t\t *    stop output from above\n \t\t *    reset 802.11 state machine\n \t\t *\t(sends station deassoc/deauth frames)\n \t\t *    turn off timers\n \t\t *    disable interrupts\n \t\t *    clear transmit machinery\n \t\t *    clear receive machinery\n \t\t *    turn off the radio\n \t\t *    reclaim beacon resources\n \t\t *\n \t\t * Note that some of this work is not possible if the\n \t\t * hardware is gone (invalid).\n \t\t */"
  },
  {
    "position": 66609,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 66610,
    "token_type": "comment",
    "token_value": "ifdef ATH_TX99_DIAG"
  },
  {
    "position": 66695,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 66696,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 66729,
    "token_type": "comment",
    "token_value": "/* XXX re-enabled by ath_newstate */"
  },
  {
    "position": 66797,
    "token_type": "comment",
    "token_value": "/* NB: avoid recursion */"
  },
  {
    "position": 66854,
    "token_type": "comment",
    "token_value": "/* stop all VAPs */"
  },
  {
    "position": 66924,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 67067,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 67093,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 67265,
    "token_type": "comment",
    "token_value": "/* XXX needed? */"
  },
  {
    "position": 67323,
    "token_type": "comment",
    "token_value": "/* stop other VAPs */"
  },
  {
    "position": 67435,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 67444,
    "token_type": "comment",
    "token_value": "/*\n  * Stop the device, grabbing the top-level lock to protect\n  * against concurrent entry through ath_init (which can happen\n  * if another thread does a system call and the thread doing the\n  * stop is preempted).\n  */"
  },
  {
    "position": 67695,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 67724,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 67888,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 67894,
    "token_type": "comment",
    "token_value": "if (error == 0 && !sc->sc_invalid) {"
  },
  {
    "position": 67933,
    "token_type": "comment",
    "token_value": "/*"
  },
  {
    "position": 67939,
    "token_type": "comment",
    "token_value": "* Set the chip in full sleep mode.  Note that we are"
  },
  {
    "position": 67996,
    "token_type": "comment",
    "token_value": "* careful to do this only when bringing the interface"
  },
  {
    "position": 68054,
    "token_type": "comment",
    "token_value": "* completely to a stop.  When the chip is in this state"
  },
  {
    "position": 68114,
    "token_type": "comment",
    "token_value": "* it must be carefully woken up or references to"
  },
  {
    "position": 68167,
    "token_type": "comment",
    "token_value": "* registers in the PCI clock domain may freeze the bus"
  },
  {
    "position": 68226,
    "token_type": "comment",
    "token_value": "* (and system).  This varies by chip and is mostly an"
  },
  {
    "position": 68284,
    "token_type": "comment",
    "token_value": "* issue with newer parts that go to sleep more quickly."
  },
  {
    "position": 68344,
    "token_type": "comment",
    "token_value": "*/"
  },
  {
    "position": 68351,
    "token_type": "comment",
    "token_value": "ath_hal_setpower(sc->sc_ah, HAL_PM_FULL_SLEEP);"
  },
  {
    "position": 68402,
    "token_type": "comment",
    "token_value": "}"
  },
  {
    "position": 68406,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 68519,
    "token_type": "symbol",
    "token_value": "AR5210_DEFAULT"
  },
  {
    "position": 68542,
    "token_type": "symbol",
    "token_value": "AR5210_PROD"
  },
  {
    "position": 68562,
    "token_type": "symbol",
    "token_value": "AR5210_AP"
  },
  {
    "position": 68583,
    "token_type": "string",
    "token_value": "5210"
  },
  {
    "position": 68596,
    "token_type": "symbol",
    "token_value": "AR5211_DEFAULT"
  },
  {
    "position": 68619,
    "token_type": "symbol",
    "token_value": "AR5311_DEVID"
  },
  {
    "position": 68640,
    "token_type": "symbol",
    "token_value": "AR5211_LEGACY"
  },
  {
    "position": 68662,
    "token_type": "symbol",
    "token_value": "AR5211_FPGA11B"
  },
  {
    "position": 68688,
    "token_type": "string",
    "token_value": "5211"
  },
  {
    "position": 68701,
    "token_type": "symbol",
    "token_value": "AR5212_DEFAULT"
  },
  {
    "position": 68724,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID"
  },
  {
    "position": 68745,
    "token_type": "symbol",
    "token_value": "AR5212_FPGA"
  },
  {
    "position": 68765,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_IBM"
  },
  {
    "position": 68790,
    "token_type": "symbol",
    "token_value": "AR5212_AR5312_REV2"
  },
  {
    "position": 68817,
    "token_type": "symbol",
    "token_value": "AR5212_AR5312_REV7"
  },
  {
    "position": 68844,
    "token_type": "symbol",
    "token_value": "AR5212_AR2313_REV8"
  },
  {
    "position": 68871,
    "token_type": "symbol",
    "token_value": "AR5212_AR2315_REV6"
  },
  {
    "position": 68898,
    "token_type": "symbol",
    "token_value": "AR5212_AR2315_REV7"
  },
  {
    "position": 68925,
    "token_type": "symbol",
    "token_value": "AR5212_AR2317_REV1"
  },
  {
    "position": 68952,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0014"
  },
  {
    "position": 68978,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0015"
  },
  {
    "position": 69004,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0016"
  },
  {
    "position": 69030,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0017"
  },
  {
    "position": 69056,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0018"
  },
  {
    "position": 69082,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_0019"
  },
  {
    "position": 69108,
    "token_type": "symbol",
    "token_value": "AR5212_AR2413"
  },
  {
    "position": 69130,
    "token_type": "symbol",
    "token_value": "AR5212_AR5413"
  },
  {
    "position": 69152,
    "token_type": "symbol",
    "token_value": "AR5212_AR5424"
  },
  {
    "position": 69174,
    "token_type": "symbol",
    "token_value": "AR5212_DEVID_FF19"
  },
  {
    "position": 69203,
    "token_type": "string",
    "token_value": "5212"
  },
  {
    "position": 69216,
    "token_type": "symbol",
    "token_value": "AR5213_SREV_1_0"
  },
  {
    "position": 69240,
    "token_type": "symbol",
    "token_value": "AR5213_SREV_REG"
  },
  {
    "position": 69264,
    "token_type": "symbol",
    "token_value": "AR_SUBVENDOR_ID_NOG"
  },
  {
    "position": 69292,
    "token_type": "symbol",
    "token_value": "AR_SUBVENDOR_ID_NEW_A"
  },
  {
    "position": 69325,
    "token_type": "string",
    "token_value": "5213"
  },
  {
    "position": 69353,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 69356,
    "token_type": "comment",
    "token_value": "/* unknown */"
  },
  {
    "position": 69422,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 69460,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 69515,
    "token_type": "string",
    "token_value": "5212"
  },
  {
    "position": 69547,
    "token_type": "string",
    "token_value": "5213"
  },
  {
    "position": 69558,
    "token_type": "comment",
    "token_value": "/* set ack to be sent at low bit-rate */"
  },
  {
    "position": 69602,
    "token_type": "comment",
    "token_value": "/* registers taken from the OpenBSD 5212 HAL */"
  },
  {
    "position": 69651,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 69652,
    "token_type": "comment",
    "token_value": "define AR5K_AR5212_STA_ID1                     0x8004"
  },
  {
    "position": 69707,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 69708,
    "token_type": "comment",
    "token_value": "define AR5K_AR5212_STA_ID1_ACKCTS_6MB          0x01000000"
  },
  {
    "position": 69767,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 69768,
    "token_type": "comment",
    "token_value": "define AR5K_AR5212_STA_ID1_BASE_RATE_11B       0x02000000"
  },
  {
    "position": 70124,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 70140,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 70149,
    "token_type": "comment",
    "token_value": "/*\n  * Reset the hardware w/o losing operational state.  This is\n  * basically a more efficient way of doing ath_stop, ath_init,\n  * followed by state transitions to the current 802.11\n  * operational state.  Used to recover from errors rx overrun\n  * and to reset the hardware when rf gain settings must be reset.\n  */"
  },
  {
    "position": 70499,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 70528,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 70564,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 70604,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 70638,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 70685,
    "token_type": "comment",
    "token_value": "/*\n \t * Convert to a HAL channel description with the flags\n \t * constrained to reflect the current operating mode.\n \t */"
  },
  {
    "position": 70943,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 70948,
    "token_type": "comment",
    "token_value": "/* disable interrupts */"
  },
  {
    "position": 70994,
    "token_type": "comment",
    "token_value": "/* stop xmit side */"
  },
  {
    "position": 71036,
    "token_type": "comment",
    "token_value": "/* stop recv side */"
  },
  {
    "position": 71059,
    "token_type": "comment",
    "token_value": "/* NB: indicate channel change so we do a full reset */"
  },
  {
    "position": 71201,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71202,
    "token_type": "string",
    "token_value": "%s: %s: unable to reset hardware: '%s' (HAL status %u)"
  },
  {
    "position": 71256,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 71258,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71332,
    "token_type": "comment",
    "token_value": "/* Turn off Interference Mitigation in non-STA modes */"
  },
  {
    "position": 71503,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71504,
    "token_type": "string",
    "token_value": "%s: disabling interference mitigation (ANI)"
  },
  {
    "position": 71547,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 71549,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71588,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 71623,
    "token_type": "comment",
    "token_value": "/* update tx power state */"
  },
  {
    "position": 71678,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 71681,
    "token_type": "comment",
    "token_value": "/* restart recv */"
  },
  {
    "position": 71710,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71711,
    "token_type": "string",
    "token_value": "%s: %s: unable to start recv logic"
  },
  {
    "position": 71745,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 71747,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 71847,
    "token_type": "comment",
    "token_value": "/*\n \t * We may be doing a reset in response to an ioctl\n \t * that changes the channel so update any state that\n \t * might change as a result.\n \t */"
  },
  {
    "position": 72075,
    "token_type": "comment",
    "token_value": "/* restart beacons */"
  },
  {
    "position": 72203,
    "token_type": "comment",
    "token_value": "/* restart xmit */"
  },
  {
    "position": 72223,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 72224,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 72246,
    "token_type": "comment",
    "token_value": "/*\n \t * restart the group polls.\n \t */"
  },
  {
    "position": 72321,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 72524,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 72525,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 72540,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 72551,
    "token_type": "comment",
    "token_value": "/* Swap transmit descriptor.\n  * if AH_NEED_DESC_SWAP flag is not defined this becomes a \"null\"\n  * function.\n  */"
  },
  {
    "position": 72710,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 72728,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 72729,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 72933,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 72960,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 72977,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 73004,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 73010,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 73011,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 73023,
    "token_type": "comment",
    "token_value": "/*\n  * Insert a buffer on a txq \n  * \n  */"
  },
  {
    "position": 73113,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 73135,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 73165,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 73186,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 73209,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 73253,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 73282,
    "token_type": "comment",
    "token_value": "/*\n \t * Insert the frame on the outbound list and\n \t * pass it on to the hardware.\n \t */"
  },
  {
    "position": 73463,
    "token_type": "comment",
    "token_value": "/*\n \t\t * The CAB queue is started from the SWBA handler since\n \t\t * frames only go out on DTIM and to avoid possible races.\n \t\t */"
  },
  {
    "position": 73724,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 73725,
    "token_type": "string",
    "token_value": "%s: txq depth = %d"
  },
  {
    "position": 73743,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 73745,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 73808,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 73809,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 73882,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 73883,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 73924,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 73925,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 73963,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 73964,
    "token_type": "string",
    "token_value": "%s: link[%u](%p)=%llx (%p)"
  },
  {
    "position": 73990,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 73992,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74252,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74253,
    "token_type": "string",
    "token_value": "%s: txq depth = %d"
  },
  {
    "position": 74271,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 74273,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74422,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74423,
    "token_type": "string",
    "token_value": "%s: TXDP[%u] = %llx (%p)"
  },
  {
    "position": 74447,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 74449,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74535,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 74536,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 74609,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 74610,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 74651,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 74652,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 74690,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 74691,
    "token_type": "string",
    "token_value": "%s: link[%u] (%p)=%llx (%p)"
  },
  {
    "position": 74718,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 74720,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 75077,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 75204,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 75361,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 75385,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 75405,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 75432,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 75468,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 75502,
    "token_type": "symbol",
    "token_value": "ieee80211_phy_params"
  },
  {
    "position": 75537,
    "token_type": "symbol",
    "token_value": "ieee80211_phy_params"
  },
  {
    "position": 75586,
    "token_type": "symbol",
    "token_value": "ieee80211_cb"
  },
  {
    "position": 75770,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 75798,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 75826,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 75866,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 76010,
    "token_type": "string",
    "token_value": "60"
  },
  {
    "position": 76015,
    "token_type": "string",
    "token_value": "60"
  },
  {
    "position": 76194,
    "token_type": "comment",
    "token_value": "/* XXX needed for crypto errs */"
  },
  {
    "position": 76351,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 76352,
    "token_type": "string",
    "token_value": "%s: skb %p [data %p len %u] skbaddr %llx"
  },
  {
    "position": 76392,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 76394,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 76512,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 76513,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 76552,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 76556,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 76557,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 76568,
    "token_type": "comment",
    "token_value": "/* setup descriptors */"
  },
  {
    "position": 76659,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 76660,
    "token_type": "string",
    "token_value": "no rate table, mode %u"
  },
  {
    "position": 76682,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 76784,
    "token_type": "comment",
    "token_value": "/* no ack on broad/multicast */"
  },
  {
    "position": 76858,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 76897,
    "token_type": "comment",
    "token_value": "/* default */"
  },
  {
    "position": 76947,
    "token_type": "string",
    "token_value": "0x3"
  },
  {
    "position": 77024,
    "token_type": "comment",
    "token_value": "/* XXX check return value? */"
  },
  {
    "position": 77100,
    "token_type": "comment",
    "token_value": "/* packet length */"
  },
  {
    "position": 77137,
    "token_type": "comment",
    "token_value": "/* header length */"
  },
  {
    "position": 77173,
    "token_type": "comment",
    "token_value": "/* Atheros packet type */"
  },
  {
    "position": 77215,
    "token_type": "comment",
    "token_value": "/* txpower */"
  },
  {
    "position": 77252,
    "token_type": "comment",
    "token_value": "/* series 0 rate/tries */"
  },
  {
    "position": 77294,
    "token_type": "comment",
    "token_value": "/* key cache index */"
  },
  {
    "position": 77334,
    "token_type": "comment",
    "token_value": "/* antenna mode */"
  },
  {
    "position": 77369,
    "token_type": "comment",
    "token_value": "/* flags */"
  },
  {
    "position": 77391,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 77394,
    "token_type": "comment",
    "token_value": "/* rts/cts rate */"
  },
  {
    "position": 77423,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 77426,
    "token_type": "comment",
    "token_value": "/* rts/cts duration */"
  },
  {
    "position": 77459,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 77462,
    "token_type": "comment",
    "token_value": "/* comp icv len */"
  },
  {
    "position": 77491,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 77494,
    "token_type": "comment",
    "token_value": "/* comp iv len */"
  },
  {
    "position": 77551,
    "token_type": "comment",
    "token_value": "/* comp scheme */"
  },
  {
    "position": 77690,
    "token_type": "comment",
    "token_value": "/* series 1 */"
  },
  {
    "position": 77758,
    "token_type": "comment",
    "token_value": "/* series 2 */"
  },
  {
    "position": 77826,
    "token_type": "comment",
    "token_value": "/* series 3 */"
  },
  {
    "position": 77879,
    "token_type": "comment",
    "token_value": "/* record for post-processing */"
  },
  {
    "position": 77930,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78014,
    "token_type": "comment",
    "token_value": "/* segment length */"
  },
  {
    "position": 78052,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 78089,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 78121,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 78159,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t * if descriptor swapping is not enabled\n \t */"
  },
  {
    "position": 78307,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 78308,
    "token_type": "string",
    "token_value": "%s: Q%d: %08x %08x %08x %08x %08x %08x"
  },
  {
    "position": 78346,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 78348,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 78391,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78475,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78489,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 78558,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78567,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 78568,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 78589,
    "token_type": "comment",
    "token_value": "/*\n  * Flush FF staging queue.\n  */"
  },
  {
    "position": 78671,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 78692,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 78717,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78769,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 78790,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 78888,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 78902,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 78911,
    "token_type": "comment",
    "token_value": "/* Caller must not hold ATH_TXQ_LOCK and ATH_TXBUF_LOCK\n  *\n  * Context: softIRQ\n  */"
  },
  {
    "position": 79037,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 79059,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 79110,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 79131,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 79157,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 79189,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 79533,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 79534,
    "token_type": "string",
    "token_value": "no bf_ff on staging queue %p"
  },
  {
    "position": 79562,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 79723,
    "token_type": "comment",
    "token_value": "/* encap and xmit */"
  },
  {
    "position": 79894,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 79895,
    "token_type": "string",
    "token_value": "%s: discard, encapsulation failure"
  },
  {
    "position": 79929,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 79931,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 80029,
    "token_type": "comment",
    "token_value": "/* NB: don't reference skb below */"
  },
  {
    "position": 80123,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 80129,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 80424,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 80425,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 80434,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 80435,
    "token_type": "comment",
    "token_value": "define ATH_HARDSTART_GET_TX_BUF_WITH_LOCK\t\t\t\t\\"
  },
  {
    "position": 80482,
    "token_type": "comment",
    "token_value": "ATH_TXBUF_LOCK_IRQ(sc);\t\t\t\t\t\t\\"
  },
  {
    "position": 80515,
    "token_type": "comment",
    "token_value": "bf = STAILQ_FIRST(&sc->sc_txbuf);\t\t\t\t\\"
  },
  {
    "position": 80556,
    "token_type": "comment",
    "token_value": "if (bf != NULL) {\t\t\t\t\t\t\\"
  },
  {
    "position": 80583,
    "token_type": "comment",
    "token_value": "STAILQ_REMOVE_HEAD(&sc->sc_txbuf, bf_list);\t\t\\"
  },
  {
    "position": 80633,
    "token_type": "comment",
    "token_value": "STAILQ_INSERT_TAIL(&bf_head, bf, bf_list);              \\"
  },
  {
    "position": 80694,
    "token_type": "comment",
    "token_value": "}                                                               \\"
  },
  {
    "position": 80764,
    "token_type": "comment",
    "token_value": "/* XXX use a counter and leave at least one for mgmt frames */"
  },
  {
    "position": 80826,
    "token_type": "comment",
    "token_value": "\\"
  },
  {
    "position": 80829,
    "token_type": "comment",
    "token_value": "if (STAILQ_EMPTY(&sc->sc_txbuf)) {\t\t\t\t\\"
  },
  {
    "position": 80871,
    "token_type": "comment",
    "token_value": "DPRINTF(sc, ATH_DEBUG_XMIT,\t\t\t\t\\"
  },
  {
    "position": 80907,
    "token_type": "comment",
    "token_value": "\"%s: stop queue\\n\", __func__);\t\t\t\\"
  },
  {
    "position": 80946,
    "token_type": "comment",
    "token_value": "sc->sc_stats.ast_tx_qstop++;\t\t\t\t\\"
  },
  {
    "position": 80983,
    "token_type": "comment",
    "token_value": "netif_stop_queue(dev); \t\t\t\t\t\\"
  },
  {
    "position": 81016,
    "token_type": "comment",
    "token_value": "sc->sc_devstopped = 1;\t\t\t\t\t\\"
  },
  {
    "position": 81048,
    "token_type": "comment",
    "token_value": "ATH_SCHEDULE_TQUEUE(&sc->sc_txtq, NULL); \t\t\\"
  },
  {
    "position": 81096,
    "token_type": "comment",
    "token_value": "}\t\t\t\t\t\t\t\t\\"
  },
  {
    "position": 81109,
    "token_type": "comment",
    "token_value": "ATH_TXBUF_UNLOCK_IRQ(sc);\t\t\t\t\t\\"
  },
  {
    "position": 81143,
    "token_type": "comment",
    "token_value": "if (bf == NULL) {"
  },
  {
    "position": 81164,
    "token_type": "comment",
    "token_value": "/* NB: should not happen */"
  },
  {
    "position": 81191,
    "token_type": "comment",
    "token_value": "\\"
  },
  {
    "position": 81194,
    "token_type": "comment",
    "token_value": "DPRINTF(sc,ATH_DEBUG_XMIT,\t\t\t\t\\"
  },
  {
    "position": 81229,
    "token_type": "comment",
    "token_value": "\"%s: discard, no xmit buf\\n\", __func__);\t\\"
  },
  {
    "position": 81276,
    "token_type": "comment",
    "token_value": "sc->sc_stats.ast_tx_nobuf++;\t\t\t\t\\"
  },
  {
    "position": 81313,
    "token_type": "comment",
    "token_value": "}"
  },
  {
    "position": 81320,
    "token_type": "comment",
    "token_value": "/*\n  * Transmit a data packet.  On failure caller is\n  * assumed to reclaim the resources.\n  *\n  * Context: process context with BH's disabled\n  */"
  },
  {
    "position": 81502,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 81523,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 81552,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 81588,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 81624,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 81653,
    "token_type": "symbol",
    "token_value": "ieee80211_cb"
  },
  {
    "position": 81680,
    "token_type": "symbol",
    "token_value": "ieee80211_cb"
  },
  {
    "position": 81714,
    "token_type": "symbol",
    "token_value": "ether_header"
  },
  {
    "position": 81786,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 81818,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 81842,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 81893,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 81897,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 81898,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 81941,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 81981,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 82004,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 82042,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 82043,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 82087,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 82145,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 82146,
    "token_type": "string",
    "token_value": "%s: discard, invalid %d flags %x"
  },
  {
    "position": 82178,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 82180,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 82502,
    "token_type": "symbol",
    "token_value": "ether_header"
  },
  {
    "position": 82544,
    "token_type": "comment",
    "token_value": "/* NB: always passed down by 802.11 layer */"
  },
  {
    "position": 82612,
    "token_type": "comment",
    "token_value": "/* NB: this happens if someone marks the underlying device up */"
  },
  {
    "position": 82712,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 82713,
    "token_type": "string",
    "token_value": "%s: discard, no node in cb"
  },
  {
    "position": 82739,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 82741,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 82808,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 82809,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 82866,
    "token_type": "comment",
    "token_value": "/* bypass FF handling */"
  },
  {
    "position": 83001,
    "token_type": "comment",
    "token_value": "/*\n \t * Fast frames check.\n \t */"
  },
  {
    "position": 83199,
    "token_type": "comment",
    "token_value": "/* queue is full, let the kernel backlog the skb */"
  },
  {
    "position": 83264,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 83299,
    "token_type": "comment",
    "token_value": "/* NB: use this lock to protect an->an_ff_txbuf in athff_can_aggregate()\n \t *     call too.\n \t */"
  },
  {
    "position": 83541,
    "token_type": "comment",
    "token_value": "/* i.e., frame on the staging queue */"
  },
  {
    "position": 83627,
    "token_type": "comment",
    "token_value": "/* get (and remove) the frame from staging queue */"
  },
  {
    "position": 83809,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * chain skbs and add FF magic\n \t\t\t *\n \t\t\t * NB: the arriving skb should not be on a list (skb->list),\n \t\t\t *     so \"re-using\" the skb next field should be OK.\n \t\t\t */"
  },
  {
    "position": 84090,
    "token_type": "comment",
    "token_value": "/* decrement extra node reference made when an_tx_ffbuf[] was set */"
  },
  {
    "position": 84163,
    "token_type": "comment",
    "token_value": "//ieee80211_free_node(ni); /* XXX where was it set ? */"
  },
  {
    "position": 84273,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 84274,
    "token_type": "string",
    "token_value": "%s: aggregating fast-frame"
  },
  {
    "position": 84300,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 84302,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 84332,
    "token_type": "comment",
    "token_value": "/* NB: careful grabbing the TX_BUF lock since still holding the txq lock.\n \t\t\t *     this could be avoided by always obtaining the txbuf earlier,\n \t\t\t *     but the \"if\" portion of this \"if/else\" clause would then need\n \t\t\t *     to give the buffer back.\n \t\t\t */"
  },
  {
    "position": 84767,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 84768,
    "token_type": "string",
    "token_value": "%s: adding to fast-frame stage Q"
  },
  {
    "position": 84800,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 84802,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 85108,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 85292,
    "token_type": "comment",
    "token_value": "/* encap and xmit */"
  },
  {
    "position": 85454,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 85455,
    "token_type": "string",
    "token_value": "%s: discard, ff flush encap failure"
  },
  {
    "position": 85490,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 85492,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 85608,
    "token_type": "comment",
    "token_value": "/* NB: don't reference skb below */"
  },
  {
    "position": 85648,
    "token_type": "comment",
    "token_value": "/* NB: ath_tx_start() will use ATH_TXBUF_LOCK_BH(). The _BH\n \t\t\t *     portion is not needed here since we're running at\n \t\t\t *     interrupt time, but should be harmless.\n \t\t\t */"
  },
  {
    "position": 85880,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 85998,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 85999,
    "token_type": "string",
    "token_value": "%s: ff stageq flush failure"
  },
  {
    "position": 86026,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 86028,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 86329,
    "token_type": "comment",
    "token_value": "/*\n \t\t * XXX: out-of-order condition only occurs for AP mode and multicast.\n \t\t *      But, there may be no valid way to get this condition.\n \t\t */"
  },
  {
    "position": 86575,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 86576,
    "token_type": "string",
    "token_value": "%s: Out-Of-Order fast-frame"
  },
  {
    "position": 86603,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 86605,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 86801,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 86802,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 86807,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 86870,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 86871,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 86877,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 86901,
    "token_type": "comment",
    "token_value": "/*\n \t * Encapsulate the packet for transmission.\n \t */"
  },
  {
    "position": 87057,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 87058,
    "token_type": "string",
    "token_value": "%s: discard, encapsulation failure"
  },
  {
    "position": 87092,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 87094,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 87187,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 87211,
    "token_type": "comment",
    "token_value": "/*\n \t\t**  Allocate 1 ath_buf for each frame given 1 was \n \t\t**  already alloc'd\n \t\t*/"
  },
  {
    "position": 87336,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 87656,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t**  Failed to alloc enough ath_bufs;\n \t\t\t\t**  return to sc_txbuf list\n \t\t\t\t*/"
  },
  {
    "position": 88067,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 88260,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 88438,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 88444,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 88533,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 88534,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 88556,
    "token_type": "comment",
    "token_value": "/*\n \t * flush out stale FF from staging Q for applicable operational modes.\n \t */"
  },
  {
    "position": 88640,
    "token_type": "comment",
    "token_value": "/* XXX: ADHOC mode too? */"
  },
  {
    "position": 88775,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 88776,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 89138,
    "token_type": "comment",
    "token_value": "/* let the kernel requeue the skb (don't free it!) */"
  },
  {
    "position": 89237,
    "token_type": "comment",
    "token_value": "/* free sk_buffs */"
  },
  {
    "position": 89384,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 89385,
    "token_type": "comment",
    "token_value": "undef ATH_HARDSTART_GET_TX_BUF_WITH_LOCK"
  },
  {
    "position": 89429,
    "token_type": "comment",
    "token_value": "/*\n  * Transmit a management frame.  On failure we reclaim the skbuff.\n  * Note that management frames come directly from the 802.11 layer\n  * and do not honor the send queue flow control.  Need to investigate\n  * using priority queuing so management frames can bypass data.\n  *\n  * Context: hwIRQ and softIRQ\n  */"
  },
  {
    "position": 89777,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 89802,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 89828,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 89867,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 89903,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 89939,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 89968,
    "token_type": "symbol",
    "token_value": "ieee80211_cb"
  },
  {
    "position": 90037,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 90095,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90096,
    "token_type": "string",
    "token_value": "%s: discard, invalid %d flags %x"
  },
  {
    "position": 90128,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 90130,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90251,
    "token_type": "comment",
    "token_value": "/*\n \t * Grab a TX buffer and associated resources.\n \t */"
  },
  {
    "position": 90503,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90504,
    "token_type": "string",
    "token_value": "%s: stop queue"
  },
  {
    "position": 90518,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 90520,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90613,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 90722,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90723,
    "token_type": "string",
    "token_value": "ath_mgtstart: discard, no xmit buf"
  },
  {
    "position": 90757,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 90759,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 90840,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: the referenced node pointer is in the\n \t * control block of the sk_buff.  This is\n \t * placed there by ieee80211_mgmt_output because\n \t * we need to hold the reference with the frame.\n \t */"
  },
  {
    "position": 91057,
    "token_type": "symbol",
    "token_value": "ieee80211_cb"
  },
  {
    "position": 91137,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 91156,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 91202,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 91211,
    "token_type": "comment",
    "token_value": "/* fall thru... */"
  },
  {
    "position": 91522,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 91523,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 91572,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 91719,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91720,
    "token_type": "string",
    "token_value": "WEP"
  },
  {
    "position": 91723,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91729,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91730,
    "token_type": "string",
    "token_value": "AES-OCB"
  },
  {
    "position": 91737,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91743,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91744,
    "token_type": "string",
    "token_value": "AES-CCM"
  },
  {
    "position": 91751,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91757,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91758,
    "token_type": "string",
    "token_value": "CKIP"
  },
  {
    "position": 91762,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91768,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91769,
    "token_type": "string",
    "token_value": "TKIP"
  },
  {
    "position": 91773,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91779,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91780,
    "token_type": "string",
    "token_value": "CLR"
  },
  {
    "position": 91783,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91814,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91815,
    "token_type": "string",
    "token_value": "%s: [%02u] %-7s"
  },
  {
    "position": 91831,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91877,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 91918,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91919,
    "token_type": "string",
    "token_value": "%02x"
  },
  {
    "position": 91923,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91951,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 91952,
    "token_type": "string",
    "token_value": "mac %s"
  },
  {
    "position": 91959,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92033,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92034,
    "token_type": "string",
    "token_value": "%s"
  },
  {
    "position": 92038,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92059,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92060,
    "token_type": "string",
    "token_value": "mic"
  },
  {
    "position": 92063,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92067,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92068,
    "token_type": "string",
    "token_value": "rxmic"
  },
  {
    "position": 92073,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92089,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 92132,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92133,
    "token_type": "string",
    "token_value": "%02x"
  },
  {
    "position": 92137,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92157,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 92158,
    "token_type": "comment",
    "token_value": "if HAL_ABI_VERSION > 0x06052200"
  },
  {
    "position": 92228,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92229,
    "token_type": "string",
    "token_value": "txmic"
  },
  {
    "position": 92236,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92253,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 92299,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92300,
    "token_type": "string",
    "token_value": "%02x"
  },
  {
    "position": 92304,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92331,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 92332,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 92351,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92352,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 92354,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92362,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 92363,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 92372,
    "token_type": "comment",
    "token_value": "/*\n  * Set a TKIP key into the hardware.  This handles the\n  * potential distribution of key state to multiple key\n  * cache slots for TKIP.\n  */"
  },
  {
    "position": 92554,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 92582,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 92662,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 92663,
    "token_type": "comment",
    "token_value": "define\tIEEE80211_KEY_XR\t(IEEE80211_KEY_XMIT | IEEE80211_KEY_RECV)"
  },
  {
    "position": 92793,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 92884,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 92885,
    "token_type": "string",
    "token_value": "got a non-TKIP key, cipher %u"
  },
  {
    "position": 92914,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 93036,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * TX key goes at first index, RX key at the rx index.\n \t\t\t * The HAL handles the MIC keys at index+64.\n \t\t\t */"
  },
  {
    "position": 93328,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 93420,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 93438,
    "token_type": "comment",
    "token_value": "/* XXX delete tx key on failure? */"
  },
  {
    "position": 93516,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 93546,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Room for both TX+RX MIC keys in one key cache\n \t\t\t * slot, just set key at the first index; the HAL\n \t\t\t * will handle the reset.\n \t\t\t */"
  },
  {
    "position": 93752,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 93753,
    "token_type": "comment",
    "token_value": "if HAL_ABI_VERSION > 0x06052200"
  },
  {
    "position": 93847,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 93848,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 94003,
    "token_type": "comment",
    "token_value": "/*\n \t\t * TX/RX key goes at first index.\n \t\t * The HAL handles the MIC keys are index+64.\n \t\t */"
  },
  {
    "position": 94313,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 94317,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 94318,
    "token_type": "comment",
    "token_value": "undef IEEE80211_KEY_XR"
  },
  {
    "position": 94347,
    "token_type": "comment",
    "token_value": "/*\n  * Set a net80211 key into the hardware.  This handles the\n  * potential distribution of key state to multiple key\n  * cache slots for TKIP with hardware MIC support.\n  */"
  },
  {
    "position": 94554,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 94582,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 94652,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 94677,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 94678,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 94706,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 94707,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 94782,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_WEP */"
  },
  {
    "position": 94829,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_TKIP */"
  },
  {
    "position": 94880,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_AES_OCB */"
  },
  {
    "position": 94934,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_AES_CCM */"
  },
  {
    "position": 94979,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 94984,
    "token_type": "comment",
    "token_value": "/* 4 is not allocated */"
  },
  {
    "position": 95029,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_CKIP */"
  },
  {
    "position": 95077,
    "token_type": "comment",
    "token_value": "/* IEEE80211_CIPHER_NONE */"
  },
  {
    "position": 95119,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 95159,
    "token_type": "symbol",
    "token_value": "ieee80211_cipher"
  },
  {
    "position": 95290,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 95308,
    "token_type": "comment",
    "token_value": "/*\n \t * Software crypto uses a \"clear key\" so non-crypto\n \t * state kept in the key cache are maintained and\n \t * so that rx frames have an entry to match.\n \t */"
  },
  {
    "position": 95517,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 95569,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 95570,
    "token_type": "string",
    "token_value": "invalid cipher type %u"
  },
  {
    "position": 95592,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 95842,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Group keys on hardware that supports multicast frame\n \t\t * key search use a mac that is the sender's address with\n \t\t * the high bit set instead of the app-specified address.\n \t\t */"
  },
  {
    "position": 96088,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 96094,
    "token_type": "string",
    "token_value": "0x80"
  },
  {
    "position": 96225,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 96384,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 96385,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 96399,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate tx/rx key slots for TKIP.  We allocate two slots for\n  * each key, one for decrypt/encrypt and the other for the MIC.\n  */"
  },
  {
    "position": 96580,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 96599,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 96600,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 96628,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 96629,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 96692,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 96693,
    "token_type": "string",
    "token_value": "key cache !split"
  },
  {
    "position": 96709,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 96716,
    "token_type": "comment",
    "token_value": "/* XXX could optimize */"
  },
  {
    "position": 96752,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 96778,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 96834,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 96846,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * One or more slots in this byte are free.\n \t\t\t */"
  },
  {
    "position": 96942,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 96982,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 96995,
    "token_type": "comment",
    "token_value": "/* XXX IEEE80211_KEY_XMIT | IEEE80211_KEY_RECV */"
  },
  {
    "position": 97082,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97126,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97170,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97175,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97187,
    "token_type": "comment",
    "token_value": "/* full pair unavailable */"
  },
  {
    "position": 97220,
    "token_type": "comment",
    "token_value": "/* XXX statistic */"
  },
  {
    "position": 97263,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 97282,
    "token_type": "comment",
    "token_value": "/* no slots were appropriate, advance */"
  },
  {
    "position": 97437,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97476,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97515,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97520,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97566,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 97567,
    "token_type": "string",
    "token_value": "%s: key pair %u,%u %u,%u"
  },
  {
    "position": 97591,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 97593,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 97626,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97643,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97655,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 97660,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 97726,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 97727,
    "token_type": "string",
    "token_value": "%s: out of pair space"
  },
  {
    "position": 97748,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 97750,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 97796,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 97797,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 97811,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate tx/rx key slots for TKIP.  We allocate two slots for\n  * each key, one for decrypt/encrypt and the other for the MIC.\n  */"
  },
  {
    "position": 97991,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 98010,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 98011,
    "token_type": "comment",
    "token_value": "define\tN(a)\t(sizeof(a)"
  },
  {
    "position": 98033,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 98034,
    "token_type": "comment",
    "token_value": "sizeof(a[0]))"
  },
  {
    "position": 98097,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98098,
    "token_type": "string",
    "token_value": "key cache split"
  },
  {
    "position": 98113,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98120,
    "token_type": "comment",
    "token_value": "/* XXX could optimize */"
  },
  {
    "position": 98156,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 98180,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 98236,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 98248,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * One or more slots in this byte are free.\n \t\t\t */"
  },
  {
    "position": 98342,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 98382,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 98426,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 98438,
    "token_type": "comment",
    "token_value": "/* full pair unavailable */"
  },
  {
    "position": 98471,
    "token_type": "comment",
    "token_value": "/* XXX statistic */"
  },
  {
    "position": 98512,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 98529,
    "token_type": "comment",
    "token_value": "/* no slots were appropriate, advance */"
  },
  {
    "position": 98682,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 98728,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98729,
    "token_type": "string",
    "token_value": "%s: key pair %u,%u"
  },
  {
    "position": 98747,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 98749,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98780,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 98846,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98847,
    "token_type": "string",
    "token_value": "%s: out of pair space"
  },
  {
    "position": 98868,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 98870,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 98916,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 98917,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 98931,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate a single key cache slot.\n  */"
  },
  {
    "position": 99020,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 99039,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 99040,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 99068,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 99069,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 99106,
    "token_type": "comment",
    "token_value": "/* XXX try i,i+32,i+64,i+32+64 to minimize key pair conflicts */"
  },
  {
    "position": 99182,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 99260,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 99272,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * One or more slots are free.\n \t\t\t */"
  },
  {
    "position": 99355,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 99378,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 99451,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 99452,
    "token_type": "string",
    "token_value": "%s: key %u"
  },
  {
    "position": 99462,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 99464,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 99551,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 99552,
    "token_type": "string",
    "token_value": "%s: out of space"
  },
  {
    "position": 99568,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 99570,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 99616,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 99617,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 99631,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate one or more key cache slots for a unicast key.  The\n  * key itself is needed only to identify the cipher.  For hardware\n  * TKIP with split cipher+MIC keys we allocate two key cache slot\n  * pairs so that we can setup separate TX and RX MIC keys.  Note\n  * that the MIC key for a TKIP key at slot i is assumed by the\n  * hardware to be at slot i+64.  This limits TKIP keys to the first\n  * 64 entries.\n  */"
  },
  {
    "position": 100088,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 100120,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 100150,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 100197,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 100228,
    "token_type": "comment",
    "token_value": "/*\n \t * Group key allocation must be handled specially for\n \t * parts that do not support multicast key cache search\n \t * functionality.  For those parts the key id must match\n \t * the h/w key index so lookups find the right key.  On\n \t * parts w/ the key search facility we install the sender's\n \t * mac address (with the high bit set) and let the hardware\n \t * find the key w/o using the key id.  This is preferred as\n \t * it permits us to support multiple users for adhoc and/or\n \t * multi-station operation.\n \t */"
  },
  {
    "position": 100874,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 101027,
    "token_type": "comment",
    "token_value": "/* should not happen */"
  },
  {
    "position": 101092,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 101093,
    "token_type": "string",
    "token_value": "%s: bogus group key"
  },
  {
    "position": 101112,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 101114,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 101171,
    "token_type": "comment",
    "token_value": "/*\n \t\t * XXX we pre-allocate the global keys so\n \t\t * have no way to check if they've already been allocated.\n \t\t */"
  },
  {
    "position": 101311,
    "token_type": "comment",
    "token_value": "/*\n \t * We allocate two pair for TKIP when using the h/w to do\n \t * the MIC.  For everything else, including software crypto,\n \t * we allocate a single entry.  Note that s/w crypto requires\n \t * a pass-through slot on the 5211 and 5212.  The 5210 does\n \t * not support pass-through cache entries and we map all\n \t * those requests to slot 0.\n \t *\n \t * Allocate 1 pair of keys for WEP case. Make sure the key\n \t * is not a shared-key.\n \t */"
  },
  {
    "position": 101931,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 102078,
    "token_type": "comment",
    "token_value": "/*\n  * Delete an entry in the key cache allocated by ath_key_alloc.\n  */"
  },
  {
    "position": 102186,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 102218,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 102248,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 102283,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 102330,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 102366,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 102406,
    "token_type": "symbol",
    "token_value": "ieee80211_cipher"
  },
  {
    "position": 102453,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 102519,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 102558,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 102559,
    "token_type": "string",
    "token_value": "%s: delete key %u"
  },
  {
    "position": 102576,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 102578,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 102634,
    "token_type": "comment",
    "token_value": "/*\n \t * Check the key->node map and flush any ref.\n \t */"
  },
  {
    "position": 102810,
    "token_type": "comment",
    "token_value": "/*\n \t * Handle split tx/rx keying required for TKIP with h/w MIC.\n \t */"
  },
  {
    "position": 102976,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 103032,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 103037,
    "token_type": "comment",
    "token_value": "/* RX key */"
  },
  {
    "position": 103082,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 103110,
    "token_type": "comment",
    "token_value": "/* as above... */"
  },
  {
    "position": 103185,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 103210,
    "token_type": "comment",
    "token_value": "/* Remove receive key entry if one exists for static WEP case */"
  },
  {
    "position": 103351,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 103381,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 103494,
    "token_type": "comment",
    "token_value": "/* as above... */"
  },
  {
    "position": 103646,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Don't touch keymap entries for global keys so\n \t\t * they are never considered for dynamic allocation.\n \t\t */"
  },
  {
    "position": 103893,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 103932,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 103937,
    "token_type": "comment",
    "token_value": "/* TX key MIC */"
  },
  {
    "position": 103986,
    "token_type": "comment",
    "token_value": "/* +32 for RX key, +32+64 for RX key MIC */"
  },
  {
    "position": 104063,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 104101,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 104104,
    "token_type": "string",
    "token_value": "64"
  },
  {
    "position": 104141,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 104188,
    "token_type": "comment",
    "token_value": "/*RX Key */"
  },
  {
    "position": 104213,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 104222,
    "token_type": "comment",
    "token_value": "/*\n  * Set the key cache contents for the specified key.  Key cache\n  * slot(s) must already have been allocated by ath_key_alloc.\n  */"
  },
  {
    "position": 104390,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 104422,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 104494,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 104541,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 104622,
    "token_type": "comment",
    "token_value": "/*\n  * Block/unblock tx+rx processing while a key change is done.\n  * We assume the caller serializes key management operations\n  * so we only need to worry about synchronization with other\n  * uses that originate in the driver.\n  */"
  },
  {
    "position": 104898,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 104929,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 104976,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 105039,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 105040,
    "token_type": "string",
    "token_value": "%s:"
  },
  {
    "position": 105043,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 105045,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 105061,
    "token_type": "comment",
    "token_value": "/*\n \t * When called from the rx tasklet we cannot use\n \t * tasklet_disable because it will block waiting\n \t * for us to complete execution.\n \t *\n \t * XXX Using in_softirq is not right since we might\n \t * be called from other soft irq contexts than\n \t * ath_rx_tasklet.\n \t */"
  },
  {
    "position": 105461,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 105492,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 105539,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 105602,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 105603,
    "token_type": "string",
    "token_value": "%s:"
  },
  {
    "position": 105606,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 105608,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 105670,
    "token_type": "comment",
    "token_value": "/* NB: see above */"
  },
  {
    "position": 105729,
    "token_type": "comment",
    "token_value": "/*\n  * Calculate the receive filter according to the\n  * operating mode and state:\n  *\n  * o always accept unicast, broadcast, and multicast traffic\n  * o maintain current state of phy error reception (the HAL\n  *   may enable phy error frames for noise immunity work)\n  * o probe request frames are accepted only when operating in\n  *   hostap, adhoc, or monitor modes\n  * o enable promiscuous mode according to the interface state\n  * o accept beacons:\n  *   - when operating in adhoc mode so the 802.11 layer creates\n  *     node table entries for peers,\n  *   - when operating in station mode for collecting rssi data when\n  *     the station is otherwise quiet, or\n  *   - when operating as a repeater so we see repeater-sta beacons\n  *   - when scanning\n  */"
  },
  {
    "position": 106537,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 106556,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 106557,
    "token_type": "comment",
    "token_value": "define\tRX_FILTER_PRESERVE\t(HAL_RX_FILTER_PHYERR | HAL_RX_FILTER_PHYRADAR)"
  },
  {
    "position": 106640,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 106680,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 106719,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 107157,
    "token_type": "comment",
    "token_value": "/* NB: AHDEMO too */"
  },
  {
    "position": 107284,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 107418,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 107419,
    "token_type": "comment",
    "token_value": "undef RX_FILTER_PRESERVE"
  },
  {
    "position": 107450,
    "token_type": "comment",
    "token_value": "/*\n  * Merge multicast addresses from all VAPs to form the\n  * hardware filter.  Ideally we should only inspect our\n  * own list and the 802.11 layer would merge for us but\n  * that's a bit difficult so for now we put the onus on\n  * the driver.\n  */"
  },
  {
    "position": 107738,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 107769,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 107785,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 107825,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 107853,
    "token_type": "symbol",
    "token_value": "dev_mc_list"
  },
  {
    "position": 107913,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 107924,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 107929,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 107934,
    "token_type": "comment",
    "token_value": "/* XXX locking */"
  },
  {
    "position": 108008,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 108091,
    "token_type": "comment",
    "token_value": "/* calculate XOR of eight 6-bit values */"
  },
  {
    "position": 108168,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 108190,
    "token_type": "string",
    "token_value": "18"
  },
  {
    "position": 108204,
    "token_type": "string",
    "token_value": "12"
  },
  {
    "position": 108218,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 108263,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 108286,
    "token_type": "string",
    "token_value": "18"
  },
  {
    "position": 108300,
    "token_type": "string",
    "token_value": "12"
  },
  {
    "position": 108314,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 108335,
    "token_type": "string",
    "token_value": "0x3f"
  },
  {
    "position": 108357,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 108365,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 108377,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 108432,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 108461,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 108497,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 108547,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 108555,
    "token_type": "comment",
    "token_value": "/* configure rx filter */"
  },
  {
    "position": 108651,
    "token_type": "comment",
    "token_value": "/* configure bssid mask */"
  },
  {
    "position": 108752,
    "token_type": "comment",
    "token_value": "/* configure operational mode */"
  },
  {
    "position": 108814,
    "token_type": "comment",
    "token_value": "/* calculate and install multicast filter */"
  },
  {
    "position": 108896,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 108946,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 108957,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 108963,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 109001,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 109011,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 109054,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 109055,
    "token_type": "string",
    "token_value": "%s: RX filter 0x%x, MC filter %08x:%08x"
  },
  {
    "position": 109094,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 109096,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 109129,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 109139,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 109150,
    "token_type": "comment",
    "token_value": "/*\n  * Set the slot time based on the current setting.\n  */"
  },
  {
    "position": 109247,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 109274,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 109314,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 109369,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 109372,
    "token_type": "comment",
    "token_value": "/* manual override */"
  },
  {
    "position": 109619,
    "token_type": "comment",
    "token_value": "/*\n  * Callback from the 802.11 layer to update the\n  * slot time based on the current setting.\n  */"
  },
  {
    "position": 109756,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 109785,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 109821,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 109856,
    "token_type": "comment",
    "token_value": "/*\n \t * When not coordinating the BSS, change the hardware\n \t * immediately.  For other operation we defer the change\n \t * until beacon updates have propagated to the stations.\n \t */"
  },
  {
    "position": 110180,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 110181,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 110208,
    "token_type": "comment",
    "token_value": "/*\n  * Dynamic turbo support.\n  * XXX much of this could be moved up to the net80211 layer.\n  */"
  },
  {
    "position": 110308,
    "token_type": "comment",
    "token_value": "/*\n  * Configure dynamic turbo state on beacon setup.\n  */"
  },
  {
    "position": 110413,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 110454,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 110455,
    "token_type": "comment",
    "token_value": "define\tIS_CAPABLE(vap) \\"
  },
  {
    "position": 110480,
    "token_type": "comment",
    "token_value": "(vap->iv_bss && (vap->iv_bss->ni_ath_flags & (IEEE80211_ATHC_TURBOP )) == \\"
  },
  {
    "position": 110558,
    "token_type": "comment",
    "token_value": "(IEEE80211_ATHC_TURBOP))"
  },
  {
    "position": 110595,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 110635,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 110740,
    "token_type": "comment",
    "token_value": "/* Dynamic Turbo is supported on this channel. */"
  },
  {
    "position": 110809,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 110838,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 110867,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 110892,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 110900,
    "token_type": "comment",
    "token_value": "/* Set the initial ATHC_BOOST capability. */"
  },
  {
    "position": 111097,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Calculate time & bandwidth thresholds\n \t\t *\n \t\t * sc_dturbo_base_tmin  :  ~70 seconds\n \t\t * sc_dturbo_turbo_tmax : ~120 seconds\n \t\t *\n \t\t * NB: scale calculated values to account for staggered\n \t\t *     beacon handling\n \t\t */"
  },
  {
    "position": 111362,
    "token_type": "string",
    "token_value": "70"
  },
  {
    "position": 111368,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111421,
    "token_type": "string",
    "token_value": "120"
  },
  {
    "position": 111427,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111480,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 111484,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111510,
    "token_type": "comment",
    "token_value": "/* convert the thresholds from BW/sec to BW/beacon period */"
  },
  {
    "position": 111622,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111697,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111723,
    "token_type": "comment",
    "token_value": "/* time in hold state in number of beacon */"
  },
  {
    "position": 111823,
    "token_type": "string",
    "token_value": "1024"
  },
  {
    "position": 111875,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 111927,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 111928,
    "token_type": "comment",
    "token_value": "undef IS_CAPABLE"
  },
  {
    "position": 111951,
    "token_type": "comment",
    "token_value": "/*\n  * Update dynamic turbo state at SWBA.  We assume we care\n  * called only if dynamic turbo has been enabled (sc_turbo).\n  */"
  },
  {
    "position": 112126,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 112186,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 112226,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 112289,
    "token_type": "comment",
    "token_value": "/* TBD: Age out CHANNEL_INTERFERENCE */"
  },
  {
    "position": 112358,
    "token_type": "comment",
    "token_value": "/* \n \t\t * Ignore AR for this beacon; a dynamic turbo\n \t\t * switch just happened and the information\n \t\t * is invalid.  Notify AR support of the channel\n \t\t * change.\n \t\t */"
  },
  {
    "position": 112553,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 112621,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate BSS traffic over the previous interval.\n \t */"
  },
  {
    "position": 112921,
    "token_type": "comment",
    "token_value": "/* \n   \t\t* before switching to base mode,\n   \t\t* make sure that the conditions( low rssi, low bw) to switch mode \n   \t\t* hold for some time and time in turbo exceeds minimum turbo time.\n   \t\t*/"
  },
  {
    "position": 113205,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 113309,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 113433,
    "token_type": "comment",
    "token_value": "/* out of hold state */"
  },
  {
    "position": 113483,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 113643,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Current Mode: Turbo (i.e. BOOST)\n \t\t *\n \t\t * Transition to base occurs when one of the following\n \t\t * is true:\n \t\t *    1. its a DTIM beacon. \n \t\t *    2. Maximum time in BOOST has elapsed (120 secs).\n \t\t *    3. Channel is marked with interference\n \t\t *    4. Average BSS traffic falls below 4Mbps \n \t\t *    5. RSSI cannot support at least 18 Mbps rate \n \t\t * XXX do bw checks at true beacon interval?\n \t\t */"
  },
  {
    "position": 114371,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 114372,
    "token_type": "string",
    "token_value": "%s: Leaving turbo"
  },
  {
    "position": 114389,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 114391,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 114547,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 114577,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 114599,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Current Mode: BASE\n \t\t *\n \t\t * Transition to Turbo (i.e. BOOST) when all of the\n \t\t * following are true:\n \t\t *\n \t\t * 1. its a DTIM beacon. \n \t\t * 2. Dwell time at base has exceeded minimum (70 secs)\n \t\t * 3. Only DT-capable stations are associated\n \t\t * 4. Channel is marked interference-free.\n \t\t * 5. BSS data traffic averages at least 6Mbps \n \t\t * 6. RSSI is good enough to support 36Mbps \n \t\t * XXX do bw+rssi checks at true beacon interval?\n \t\t */"
  },
  {
    "position": 115163,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 115275,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 115340,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 115458,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 115459,
    "token_type": "string",
    "token_value": "%s: Entering turbo"
  },
  {
    "position": 115477,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 115479,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 115633,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 115663,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 115691,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 115808,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 115835,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 115868,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 115891,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 115913,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 115936,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 115959,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 116000,
    "token_type": "comment",
    "token_value": "/*\n \t * check if the last beacon went out with the mode change flag set.\n \t */"
  },
  {
    "position": 116093,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 116228,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 116383,
    "token_type": "comment",
    "token_value": "/*\n  * Effect a turbo mode switch when operating in dynamic\n  * turbo mode. wait for beacon to go out before switching.\n  */"
  },
  {
    "position": 116576,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 116602,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 116630,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 116666,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 116766,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116767,
    "token_type": "string",
    "token_value": "unexpected operating mode %d"
  },
  {
    "position": 116795,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116848,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116849,
    "token_type": "string",
    "token_value": "%s: dynamic turbo switch to %s mode"
  },
  {
    "position": 116884,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 116886,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116946,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116947,
    "token_type": "string",
    "token_value": "turbo"
  },
  {
    "position": 116952,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116956,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 116957,
    "token_type": "string",
    "token_value": "base"
  },
  {
    "position": 116961,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 117006,
    "token_type": "comment",
    "token_value": "/* \n \t\t * beacon did not go out. reschedule tasklet.\n \t\t */"
  },
  {
    "position": 117134,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 117158,
    "token_type": "comment",
    "token_value": "/* TBD: DTIM adjustments, delay CAB queue tx until after transmit */"
  },
  {
    "position": 117366,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Ignore AR next beacon. the AR detection\n \t\t\t * code detects the traffic in normal channel\n \t\t\t * from stations during transition delays\n \t\t\t * between AP and station.\n \t\t\t */"
  },
  {
    "position": 117574,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 117744,
    "token_type": "comment",
    "token_value": "/* XXX ieee80211_reset_erp? */"
  },
  {
    "position": 117779,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 117780,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 117786,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_DYNTURBO */"
  },
  {
    "position": 117815,
    "token_type": "comment",
    "token_value": "/*\n  * Setup a h/w transmit queue for beacons.\n  */"
  },
  {
    "position": 117905,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 117956,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 117988,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 118008,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 118028,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 118032,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 118033,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 118104,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 118105,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 118113,
    "token_type": "comment",
    "token_value": "/* NB: don't enable any interrupts */"
  },
  {
    "position": 118218,
    "token_type": "comment",
    "token_value": "/*\n  * Configure IFS parameter for the beacon queue.\n  */"
  },
  {
    "position": 118315,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 118334,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 118335,
    "token_type": "comment",
    "token_value": "define\tATH_EXPONENT_TO_VALUE(v)\t((1<<v)-1)"
  },
  {
    "position": 118387,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 118427,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 118571,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Always burst out beacon and CAB traffic.\n \t\t */"
  },
  {
    "position": 118645,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 118666,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 118687,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 118711,
    "token_type": "symbol",
    "token_value": "wmeParams"
  },
  {
    "position": 118789,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Adhoc mode; important thing is to use 2x cwmin.\n \t\t */"
  },
  {
    "position": 118906,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 119089,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 119090,
    "token_type": "string",
    "token_value": "%s: unable to update h/w beacon queue parameters"
  },
  {
    "position": 119138,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 119140,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 119176,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 119233,
    "token_type": "comment",
    "token_value": "/* push to h/w */"
  },
  {
    "position": 119261,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 119269,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 119270,
    "token_type": "comment",
    "token_value": "undef ATH_EXPONENT_TO_VALUE"
  },
  {
    "position": 119304,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate and setup an initial beacon frame.\n  *\n  * Context: softIRQ\n  */"
  },
  {
    "position": 119422,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 119444,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 119476,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 119521,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 119551,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 119573,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 119591,
    "token_type": "comment",
    "token_value": "/*\n \t * release the previous beacon's skb if it already exists.\n \t */"
  },
  {
    "position": 119956,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: the beacon data buffer must be 32-bit aligned;\n \t * we assume the mbuf routines will return us something\n \t * with this alignment (perhaps should assert).\n \t */"
  },
  {
    "position": 120234,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 120235,
    "token_type": "string",
    "token_value": "%s: cannot get sk_buff"
  },
  {
    "position": 120257,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 120259,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 120336,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate a TSF adjustment factor required for\n \t * staggered beacons.  Note that we assume the format\n \t * of the beacon frame leaves the tstamp field immediately\n \t * following the header.\n \t */"
  },
  {
    "position": 120585,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 120636,
    "token_type": "comment",
    "token_value": "/*\n \t\t * The beacon interval is in TU's; the TSF in usecs.\n \t\t * We figure out how many TU's to add to align the\n \t\t * timestamp then convert to TSF units and handle\n \t\t * byte swapping before writing it in the frame.\n \t\t * The hardware will then add this each time a beacon\n \t\t * frame is sent.  Note that we align VAPs 1..N\n \t\t * and leave VAP 0 untouched.  This means VAP 0\n \t\t * has a timestamp in one beacon interval while the\n \t\t * others get a timestamp aligned to the next interval.\n \t\t */"
  },
  {
    "position": 121250,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 121255,
    "token_type": "comment",
    "token_value": "/* TU->TSF */"
  },
  {
    "position": 121308,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121309,
    "token_type": "string",
    "token_value": "%s: %s beacons, bslot %d intval %u tsfadjust(Kus) %llu"
  },
  {
    "position": 121363,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 121365,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121403,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121404,
    "token_type": "string",
    "token_value": "stagger"
  },
  {
    "position": 121411,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121415,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121416,
    "token_type": "string",
    "token_value": "burst"
  },
  {
    "position": 121421,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 121499,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 121543,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 121746,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 121755,
    "token_type": "comment",
    "token_value": "/*\n  * Setup the beacon frame for transmit.\n  */"
  },
  {
    "position": 121842,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 121864,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 121881,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 121882,
    "token_type": "comment",
    "token_value": "define\tUSE_SHPREAMBLE(_ic) \\"
  },
  {
    "position": 121911,
    "token_type": "comment",
    "token_value": "(((_ic)->ic_flags & (IEEE80211_F_SHPREAMBLE | IEEE80211_F_USEBARKER))\\"
  },
  {
    "position": 121984,
    "token_type": "comment",
    "token_value": "== IEEE80211_F_SHPREAMBLE)"
  },
  {
    "position": 122023,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 122066,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 122105,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 122141,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 122175,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 122302,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 122325,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 122367,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 122368,
    "token_type": "string",
    "token_value": "%s: m %p len %u"
  },
  {
    "position": 122383,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 122385,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 122421,
    "token_type": "comment",
    "token_value": "/* setup descriptors */"
  },
  {
    "position": 122496,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 122497,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 122583,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 122584,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 122684,
    "token_type": "comment",
    "token_value": "/* self-linked */"
  },
  {
    "position": 122734,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Let hardware handle antenna switching if txantenna is not set\n \t\t */"
  },
  {
    "position": 122840,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 122846,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Switch antenna every beacon if txantenna is not set\n \t\t * Should only switch every beacon period, not for every\n \t\t * SWBA's\n \t\t * XXX assumes two antenna\n \t\t */"
  },
  {
    "position": 123035,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 123131,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 123135,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 123139,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 123195,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 123199,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 123203,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 123252,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate rate code.\n \t * XXX everything at min xmit rate\n \t */"
  },
  {
    "position": 123474,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 123475,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 123675,
    "token_type": "comment",
    "token_value": "/* for XR VAP use different RTSCTS rates and calculate duration */"
  },
  {
    "position": 124075,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 124076,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 124145,
    "token_type": "comment",
    "token_value": "/* frame length */"
  },
  {
    "position": 124183,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 124200,
    "token_type": "comment",
    "token_value": "/* header length */"
  },
  {
    "position": 124246,
    "token_type": "comment",
    "token_value": "/* Atheros packet type */"
  },
  {
    "position": 124293,
    "token_type": "comment",
    "token_value": "/* txpower XXX */"
  },
  {
    "position": 124322,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 124326,
    "token_type": "comment",
    "token_value": "/* series 0 rate/tries */"
  },
  {
    "position": 124378,
    "token_type": "comment",
    "token_value": "/* no encryption */"
  },
  {
    "position": 124413,
    "token_type": "comment",
    "token_value": "/* antenna mode */"
  },
  {
    "position": 124446,
    "token_type": "comment",
    "token_value": "/* no ack, veol for beacons */"
  },
  {
    "position": 124492,
    "token_type": "comment",
    "token_value": "/* rts/cts rate */"
  },
  {
    "position": 124530,
    "token_type": "comment",
    "token_value": "/* rts/cts duration */"
  },
  {
    "position": 124558,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 124563,
    "token_type": "comment",
    "token_value": "/* comp icv len */"
  },
  {
    "position": 124587,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 124592,
    "token_type": "comment",
    "token_value": "/* comp iv len */"
  },
  {
    "position": 124644,
    "token_type": "comment",
    "token_value": "/* comp scheme */"
  },
  {
    "position": 124671,
    "token_type": "comment",
    "token_value": "/* NB: beacon's BufLen must be a multiple of 4 bytes */"
  },
  {
    "position": 124778,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 124781,
    "token_type": "comment",
    "token_value": "/* buffer length */"
  },
  {
    "position": 124815,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 124849,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 124878,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 124910,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t * if descriptor swapping is not enabled\n \t */"
  },
  {
    "position": 125026,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 125027,
    "token_type": "comment",
    "token_value": "undef USE_SHPREAMBLE"
  },
  {
    "position": 125054,
    "token_type": "comment",
    "token_value": "/*\n  * Generate beacon frame and queue cab data for a VAP.\n  */"
  },
  {
    "position": 125133,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 125171,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 125193,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 125239,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 125273,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 125295,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 125324,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 125347,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 125479,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 125480,
    "token_type": "string",
    "token_value": "%s: skip VAP in %s state"
  },
  {
    "position": 125504,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 125506,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 125582,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 125583,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 125670,
    "token_type": "comment",
    "token_value": "/* wait for XR_BEACON_FACTOR times before sending the beacon */"
  },
  {
    "position": 125829,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 125837,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 125838,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 125927,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 125928,
    "token_type": "string",
    "token_value": "%s: avp=%p av_bcbuf=%p"
  },
  {
    "position": 125950,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 125952,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 126056,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 126057,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 126085,
    "token_type": "comment",
    "token_value": "/* \n \t * If we are using dynamic turbo, update the\n \t * capability info and arrange for a mode change\n \t * if needed.\n \t */"
  },
  {
    "position": 126282,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 126288,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 126319,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 126325,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 126385,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 126386,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 126394,
    "token_type": "comment",
    "token_value": "/*\n \t * Update dynamic beacon contents.  If this returns\n \t * non-zero then we need to remap the memory because\n \t * the beacon frame changed size (probably because\n \t * of the TIM bitmap).\n \t */"
  },
  {
    "position": 126911,
    "token_type": "comment",
    "token_value": "/*\n \t * if the CABQ traffic from previous DTIM is pending and the current\n \t * beacon is also a DTIM. \n \t *  1) if there is only one VAP let the cab traffic continue. \n \t *  2) if there are more than one VAP and we are using staggered\n \t *     beacons, then drain the cabq by dropping all the frames in\n \t *     the cabq so that the current VAP's cab traffic can be scheduled.\n \t * XXX: Need to handle the last MORE_DATA bit here.\n \t */"
  },
  {
    "position": 127384,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 127389,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 127443,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 127547,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 127548,
    "token_type": "string",
    "token_value": "%s: flush previous cabq traffic"
  },
  {
    "position": 127579,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 127581,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 127608,
    "token_type": "comment",
    "token_value": "/*\n \t * Construct tx descriptor.\n \t */"
  },
  {
    "position": 127771,
    "token_type": "comment",
    "token_value": "/*\n \t * Enable the CAB queue before the beacon queue to\n \t * ensure cab frames are triggered by this beacon.\n \t */"
  },
  {
    "position": 127912,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 127917,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 127922,
    "token_type": "comment",
    "token_value": "/* NB: only at DTIM */"
  },
  {
    "position": 127955,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 127994,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 128015,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Move everything from the VAP's mcast queue \n \t\t * to the hardware cab queue.\n \t\t */"
  },
  {
    "position": 128218,
    "token_type": "comment",
    "token_value": "/* link the descriptors */"
  },
  {
    "position": 128348,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 128349,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 128428,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 128429,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 128476,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 128477,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 128493,
    "token_type": "comment",
    "token_value": "/* Set the MORE_DATA bit for each packet except the last one */"
  },
  {
    "position": 128705,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 128752,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 128793,
    "token_type": "comment",
    "token_value": "/* append the private VAP mcast list to the cabq */"
  },
  {
    "position": 128895,
    "token_type": "comment",
    "token_value": "/* NB: gated by beacon so safe to start here */"
  },
  {
    "position": 129069,
    "token_type": "comment",
    "token_value": "/*\n  * Transmit one or more beacon frames at SWBA.  Dynamic\n  * updates to the frame contents are done as needed and\n  * the slot time is also adjusted based on current state.\n  */"
  },
  {
    "position": 129287,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 129321,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 129322,
    "token_type": "comment",
    "token_value": "define\tTSF_TO_TU(_h,_l) \\"
  },
  {
    "position": 129348,
    "token_type": "comment",
    "token_value": "((((u_int32_t)(_h)) << 22) | (((u_int32_t)(_l)) >> 10))"
  },
  {
    "position": 129415,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 129449,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 129477,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 129526,
    "token_type": "comment",
    "token_value": "/*\n \t * Check if the previous beacon has gone out.  If\n \t * not don't try to post another, skip this period\n \t * and wait for the next.  Missed beacons indicate\n \t * a problem and should not occur.  If we miss too\n \t * many consecutive beacons reset the device.\n \t */"
  },
  {
    "position": 129842,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 129874,
    "token_type": "comment",
    "token_value": "/* XXX: 802.11h needs the chanchange IE countdown decremented.\n \t\t *      We should consider adding a net80211 call to indicate\n \t\t *      a beacon miss so appropriate action could be taken\n \t\t *      (in that layer).\n \t\t */"
  },
  {
    "position": 130141,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 130142,
    "token_type": "string",
    "token_value": "%s: missed %u consecutive beacons"
  },
  {
    "position": 130175,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 130177,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 130351,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 130398,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 130399,
    "token_type": "string",
    "token_value": "%s: resume beacon xmit after %u misses"
  },
  {
    "position": 130437,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 130439,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 130499,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 130510,
    "token_type": "comment",
    "token_value": "/*\n \t * Generate beacon frames.  If we are sending frames\n \t * staggered then calculate the slot for this frame based\n \t * on the tsf to safeguard against missing an swba.\n \t * Otherwise we are bursting all frames together and need\n \t * to generate a frame for each VAP that is up and running.\n \t */"
  },
  {
    "position": 130839,
    "token_type": "comment",
    "token_value": "/* staggered beacons */"
  },
  {
    "position": 130873,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 131003,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 131112,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 131173,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 131174,
    "token_type": "string",
    "token_value": "%s: slot %d [tsf %llu tsftu %u intval %u] vap %p"
  },
  {
    "position": 131222,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 131224,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 131305,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 131446,
    "token_type": "comment",
    "token_value": "/* burst'd beacons */"
  },
  {
    "position": 131516,
    "token_type": "comment",
    "token_value": "/* XXX rotate/randomize order? */"
  },
  {
    "position": 131565,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 131725,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 131726,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 131866,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 131867,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 131903,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 131904,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 131979,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 131984,
    "token_type": "comment",
    "token_value": "/* link of last frame */"
  },
  {
    "position": 132017,
    "token_type": "comment",
    "token_value": "/*\n \t * Handle slot time change when a non-ERP station joins/leaves\n \t * an 11g network.  The 802.11 layer notifies us via callback,\n \t * we mark updateslot, then wait one beacon before effecting\n \t * the change.  This gives associated stations at least one\n \t * beacon interval to note the state change.\n \t *\n \t * NB: The slot time change state machine is clocked according\n \t *     to whether we are bursting or staggering beacons.  We\n \t *     recognize the request to update and record the current\n \t *     slot then don't transition until that slot is reached\n \t *     again.  If we miss a beacon for that slot then we'll be\n \t *     slow to transition but we'll be sure at least one beacon\n \t *     interval has passed.  When bursting slot is always left\n \t *     set to ath_maxvaps so this check is a no-op.\n \t */"
  },
  {
    "position": 132840,
    "token_type": "comment",
    "token_value": "/* XXX locking */"
  },
  {
    "position": 132926,
    "token_type": "comment",
    "token_value": "/* commit next beacon */"
  },
  {
    "position": 133076,
    "token_type": "comment",
    "token_value": "/* commit change to hardware */"
  },
  {
    "position": 133148,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 133197,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Check recent per-antenna transmit statistics and flip\n \t\t * the default rx antenna if noticeably more frames went out\n \t\t * on the non-default antenna.  Only do this if rx diversity\n \t\t * is off.\n \t\t * XXX assumes 2 antennae\n \t\t */"
  },
  {
    "position": 133468,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 133472,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 133476,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 133602,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 133603,
    "token_type": "string",
    "token_value": "%s: flip defant to %u, %u > %u"
  },
  {
    "position": 133633,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 133635,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 133783,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 133802,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 133807,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 133832,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 133840,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Stop any current DMA and put the new frame(s) on the queue.\n \t\t * This should never fail since we check above that no frames\n \t\t * are still pending on the queue.\n \t\t */"
  },
  {
    "position": 134102,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 134103,
    "token_type": "string",
    "token_value": "%s: beacon queue %u did not stop?"
  },
  {
    "position": 134136,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 134138,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 134175,
    "token_type": "comment",
    "token_value": "/* NB: the HAL still stops DMA, so proceed */"
  },
  {
    "position": 134229,
    "token_type": "comment",
    "token_value": "/* NB: cabq traffic should already be queued and primed */"
  },
  {
    "position": 134407,
    "token_type": "comment",
    "token_value": "/* XXX per-VAP? */"
  },
  {
    "position": 134431,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 134432,
    "token_type": "comment",
    "token_value": "undef TSF_TO_TU"
  },
  {
    "position": 134454,
    "token_type": "comment",
    "token_value": "/*\n  * Reset the hardware after detecting beacons have stopped.\n  */"
  },
  {
    "position": 134585,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 134611,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 134639,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 134668,
    "token_type": "comment",
    "token_value": "/*\n \t * XXX:if the bmisscount is cleared while the \n \t *     tasklet execution is pending, the following\n \t *     check will be true, in which case return \n \t *     without resetting the driver.\n \t */"
  },
  {
    "position": 134932,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 134933,
    "token_type": "string",
    "token_value": "%s: stuck beacon; resetting (bmiss count %u)"
  },
  {
    "position": 134977,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 134979,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 135040,
    "token_type": "comment",
    "token_value": "/*\n  * Startup beacon transmission for adhoc mode when\n  * they are sent entirely by the hardware using the\n  * self-linked descriptor + veol trick.\n  */"
  },
  {
    "position": 135238,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 135260,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 135291,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 135325,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 135347,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 135376,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 135399,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 135498,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 135499,
    "token_type": "string",
    "token_value": "%s: avp=%p av_bcbuf=%p"
  },
  {
    "position": 135521,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 135523,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 135644,
    "token_type": "comment",
    "token_value": "/*\n \t * Update dynamic beacon contents.  If this returns\n \t * non-zero then we need to remap the memory because\n \t * the beacon frame changed size (probably because\n \t * of the TIM bitmap).\n \t */"
  },
  {
    "position": 135914,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 136109,
    "token_type": "comment",
    "token_value": "/*\n \t * Construct tx descriptor.\n \t */"
  },
  {
    "position": 136272,
    "token_type": "comment",
    "token_value": "/* NB: caller is known to have already stopped tx DMA */"
  },
  {
    "position": 136455,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 136456,
    "token_type": "string",
    "token_value": "%s: TXDP%u = %llx (%p)"
  },
  {
    "position": 136478,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 136480,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 136551,
    "token_type": "comment",
    "token_value": "/*\n  * Reclaim beacon resources and return buffer to the pool.\n  */"
  },
  {
    "position": 136658,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 136680,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 137020,
    "token_type": "comment",
    "token_value": "/*\n  * Reclaim all beacon resources.\n  */"
  },
  {
    "position": 137099,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 137126,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 137473,
    "token_type": "comment",
    "token_value": "/*\n  * Configure the beacon and sleep timers.\n  *\n  * When operating as an AP this resets the TSF and sets\n  * up the hardware to notify us when we need to issue beacons.\n  *\n  * When operating in station mode this sets up the beacon\n  * timers according to the timestamp of the last received\n  * beacon and the current TSF, configures PCF and DTIM\n  * handling, programs the sleep registers so the hardware\n  * will wake up in time to receive beacons, and configures\n  * the beacon miss handling so we'll receive a BMISS\n  * interrupt when we stop seeing beacons from the AP\n  * we've associated with.\n  */"
  },
  {
    "position": 138120,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 138142,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 138165,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 138166,
    "token_type": "comment",
    "token_value": "define\tTSF_TO_TU(_h,_l) \\"
  },
  {
    "position": 138192,
    "token_type": "comment",
    "token_value": "((((u_int32_t)(_h)) << 22) | (((u_int32_t)(_l)) >> 10))"
  },
  {
    "position": 138259,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 138299,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 138333,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 138442,
    "token_type": "comment",
    "token_value": "/* XXX */"
  },
  {
    "position": 138478,
    "token_type": "comment",
    "token_value": "/* extract tstamp from last beacon and convert to TU */"
  },
  {
    "position": 138588,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 138635,
    "token_type": "comment",
    "token_value": "/* XXX conditionalize multi-bss support? */"
  },
  {
    "position": 138727,
    "token_type": "comment",
    "token_value": "/*\n \t\t * For multi-bss ap support beacons are either staggered\n \t\t * evenly over N slots or burst together.  For the former\n \t\t * arrange for the SWBA to be delivered for each slot.\n \t\t * Slots that are not occupied will generate nothing. \n \t\t */"
  },
  {
    "position": 138977,
    "token_type": "comment",
    "token_value": "/* NB: the beacon interval is kept internally in TU's */"
  },
  {
    "position": 139136,
    "token_type": "comment",
    "token_value": "/* for staggered beacons */"
  },
  {
    "position": 139258,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 139335,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 139339,
    "token_type": "comment",
    "token_value": "/* e.g. for ap mode */"
  },
  {
    "position": 139404,
    "token_type": "comment",
    "token_value": "/* NB: can be 0 for monitor mode */"
  },
  {
    "position": 139513,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 139514,
    "token_type": "string",
    "token_value": "%s: nexttbtt %u intval %u (%u)"
  },
  {
    "position": 139544,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 139546,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 139789,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Setup dtim and cfp parameters according to\n \t\t * last beacon we received (which may be none).\n \t\t */"
  },
  {
    "position": 139957,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 139961,
    "token_type": "comment",
    "token_value": "/* NB: 0 if not known */"
  },
  {
    "position": 140003,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 140073,
    "token_type": "comment",
    "token_value": "/* NB: sanity check */"
  },
  {
    "position": 140112,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140116,
    "token_type": "comment",
    "token_value": "/* XXX? */"
  },
  {
    "position": 140142,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 140147,
    "token_type": "comment",
    "token_value": "/* NB: no PCF support yet */"
  },
  {
    "position": 140190,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140194,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 140195,
    "token_type": "comment",
    "token_value": "define\tFUDGE\t2"
  },
  {
    "position": 140213,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Pull nexttbtt forward to reflect the current\n \t\t * TSF and calculate dtim+cfp state for the result.\n \t\t */"
  },
  {
    "position": 140386,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 140458,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140493,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 140518,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140550,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 140591,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 140592,
    "token_type": "comment",
    "token_value": "undef FUDGE"
  },
  {
    "position": 140619,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140933,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 140937,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 140943,
    "token_type": "comment",
    "token_value": "/*"
  },
  {
    "position": 140949,
    "token_type": "comment",
    "token_value": "* The 802.11 layer records the offset to the DTIM"
  },
  {
    "position": 141003,
    "token_type": "comment",
    "token_value": "* bitmap while receiving beacons; use it here to"
  },
  {
    "position": 141056,
    "token_type": "comment",
    "token_value": "* enable h/w detection of our AID being marked in"
  },
  {
    "position": 141110,
    "token_type": "comment",
    "token_value": "* the bitmap vector (to indicate frames for us are"
  },
  {
    "position": 141165,
    "token_type": "comment",
    "token_value": "* pending at the AP)."
  },
  {
    "position": 141191,
    "token_type": "comment",
    "token_value": "* XXX do DTIM handling in s/w to WAR old h/w bugs"
  },
  {
    "position": 141245,
    "token_type": "comment",
    "token_value": "* XXX enable based on h/w rev for newer chips"
  },
  {
    "position": 141295,
    "token_type": "comment",
    "token_value": "*/"
  },
  {
    "position": 141302,
    "token_type": "comment",
    "token_value": "bs.bs_timoffset = ni->ni_timoff;"
  },
  {
    "position": 141338,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 141349,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Calculate the number of consecutive beacons to miss\n \t\t * before taking a BMISS interrupt.  The configuration\n \t\t * is specified in TU so we only need calculate based\n \t\t * on the beacon interval.  Note that we clamp the\n \t\t * result to at most 10 beacons.\n \t\t */"
  },
  {
    "position": 141716,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 141747,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 141786,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 141816,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 141824,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Calculate sleep duration.  The configuration is\n \t\t * given in ms.  We ensure a multiple of the beacon\n \t\t * period is used.  Also, if the sleep duration is\n \t\t * greater than the DTIM period then it makes senses\n \t\t * to make it a multiple of that.\n \t\t *\n \t\t * XXX fixed at 100ms\n \t\t */"
  },
  {
    "position": 142177,
    "token_type": "string",
    "token_value": "100"
  },
  {
    "position": 142359,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 142360,
    "token_type": "string",
    "token_value": "%s: tsf %llu tsf:tu %u intval %u nexttbtt %u dtim %u nextdtim %u bmiss %u sleep %u cfp:period %u maxdur %u next %u timoffset %u"
  },
  {
    "position": 142487,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 142489,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 142896,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 143040,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 143155,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * In IBSS mode enable the beacon timers but only\n \t\t\t * enable SWBA interrupts if we need to manually\n \t\t\t * prepare beacon frames.  Otherwise we use a\n \t\t\t * self-linked tx descriptor and let the hardware\n \t\t\t * deal with things.\n \t\t\t */"
  },
  {
    "position": 143577,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * In AP mode we enable the beacon timers and\n \t\t\t * SWBA interrupts to prepare beacon frames.\n \t\t\t */"
  },
  {
    "position": 143751,
    "token_type": "comment",
    "token_value": "/* beacon prepare */"
  },
  {
    "position": 143806,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 143807,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_DYNTURBO"
  },
  {
    "position": 143925,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 143926,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 144000,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 144044,
    "token_type": "comment",
    "token_value": "/*\n \t\t * When using a self-linked beacon descriptor in\n \t\t * ibss mode load it once here.\n \t\t */"
  },
  {
    "position": 144264,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 144268,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 144269,
    "token_type": "comment",
    "token_value": "undef TSF_TO_TU"
  },
  {
    "position": 144328,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 144352,
    "token_type": "symbol",
    "token_value": "ath_descdma"
  },
  {
    "position": 144433,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 144434,
    "token_type": "comment",
    "token_value": "define\tDS2PHYS(_dd, _ds) \\"
  },
  {
    "position": 144461,
    "token_type": "comment",
    "token_value": "((_dd)->dd_desc_paddr + ((caddr_t)(_ds) - (caddr_t)(_dd)->dd_desc))"
  },
  {
    "position": 144540,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 144563,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 144632,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 144633,
    "token_type": "string",
    "token_value": "%s: %s DMA: %u buffers %u desc/buf"
  },
  {
    "position": 144667,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 144669,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 144763,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 144793,
    "token_type": "comment",
    "token_value": "/* allocate descriptors */"
  },
  {
    "position": 145029,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 145030,
    "token_type": "string",
    "token_value": "%s: %s DMA map: %p (%lu) -> %llx (%lu)"
  },
  {
    "position": 145068,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 145070,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 145158,
    "token_type": "comment",
    "token_value": "/*XXX*/"
  },
  {
    "position": 145197,
    "token_type": "comment",
    "token_value": "/* allocate buffers */"
  },
  {
    "position": 145244,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 145337,
    "token_type": "comment",
    "token_value": "/* XXX different code */"
  },
  {
    "position": 145394,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 145461,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 145611,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 145730,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 145764,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 145765,
    "token_type": "comment",
    "token_value": "undef DS2PHYS"
  },
  {
    "position": 145825,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 145849,
    "token_type": "symbol",
    "token_value": "ath_descdma"
  },
  {
    "position": 145906,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 145928,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 146021,
    "token_type": "comment",
    "token_value": "/* XXX skb->len is not good enough for rxbuf */"
  },
  {
    "position": 146396,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Reclaim node reference.\n \t\t\t */"
  },
  {
    "position": 146480,
    "token_type": "comment",
    "token_value": "/* Free memory associated with descriptors */"
  },
  {
    "position": 146674,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 146731,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 146830,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 146831,
    "token_type": "string",
    "token_value": "rx"
  },
  {
    "position": 146833,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 146847,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 146866,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 146954,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 146955,
    "token_type": "string",
    "token_value": "tx"
  },
  {
    "position": 146957,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 146999,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147111,
    "token_type": "comment",
    "token_value": "/* XXX allocate beacon state together with VAP */"
  },
  {
    "position": 147225,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 147226,
    "token_type": "string",
    "token_value": "beacon"
  },
  {
    "position": 147232,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 147248,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 147267,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147464,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147507,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 147558,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147673,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147790,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 147895,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 147935,
    "token_type": "symbol",
    "token_value": "ieee80211_node_table"
  },
  {
    "position": 147967,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 147998,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 148076,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 148119,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 148217,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 148483,
    "token_type": "comment",
    "token_value": "/*\n \t * ath_rate_node_init needs a VAP pointer in node\n \t * to decide which mgt rate to use\n \t */"
  },
  {
    "position": 148650,
    "token_type": "comment",
    "token_value": "/* U-APSD init */"
  },
  {
    "position": 148724,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 148799,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 148866,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 148867,
    "token_type": "string",
    "token_value": "%s: an %p"
  },
  {
    "position": 148876,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 148878,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 148962,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 148994,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 149033,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 149083,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 149121,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 149139,
    "token_type": "comment",
    "token_value": "/*\n \t * U-APSD cleanup\n \t */"
  },
  {
    "position": 149554,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 149977,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 150369,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 150401,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 150519,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 150520,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 150574,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 150575,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 150634,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 150658,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 150659,
    "token_type": "comment",
    "token_value": "define\tHAL_EP_RND(x, mul) \\"
  },
  {
    "position": 150687,
    "token_type": "comment",
    "token_value": "((((x)%(mul)) >= ((mul)"
  },
  {
    "position": 150712,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 150713,
    "token_type": "comment",
    "token_value": "2)) ? ((x) + ((mul) - 1))"
  },
  {
    "position": 150739,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 150740,
    "token_type": "comment",
    "token_value": "(mul) : (x)"
  },
  {
    "position": 150752,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 150753,
    "token_type": "comment",
    "token_value": "(mul))"
  },
  {
    "position": 150834,
    "token_type": "comment",
    "token_value": "/*\n \t * When only one frame is received there will be no state in\n \t * avgrssi so fallback on the value recorded by the 802.11 layer.\n \t */"
  },
  {
    "position": 151101,
    "token_type": "comment",
    "token_value": "/* NB: theoretically we shouldn't need this, but be paranoid */"
  },
  {
    "position": 151181,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 151185,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 151196,
    "token_type": "string",
    "token_value": "127"
  },
  {
    "position": 151202,
    "token_type": "string",
    "token_value": "127"
  },
  {
    "position": 151215,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 151216,
    "token_type": "comment",
    "token_value": "undef HAL_EP_RND"
  },
  {
    "position": 151241,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 151242,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 151263,
    "token_type": "comment",
    "token_value": "/*\n  * Stops the txqs and moves data between XR and Normal queues.\n  * Also adjusts the rate info in the descriptors.\n  */"
  },
  {
    "position": 151438,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 151462,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 151463,
    "token_type": "comment",
    "token_value": "ifdef NOT_YET"
  },
  {
    "position": 151486,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 151517,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 151556,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 151599,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 151647,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 151681,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 151711,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 151818,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 151852,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 151904,
    "token_type": "comment",
    "token_value": "/*\n \t\t * move data from Normal txqs to XR queue.\n \t\t */"
  },
  {
    "position": 151970,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 151971,
    "token_type": "string",
    "token_value": "move data from NORMAL to XR"
  },
  {
    "position": 151998,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 152000,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 152007,
    "token_type": "comment",
    "token_value": "/*\n \t\t * collect all the data towards the node\n \t\t * in to the tmp_q.\n \t\t */"
  },
  {
    "position": 152311,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * skip all the buffers that are done\n \t\t\t * until the first one that is in progress\n \t\t\t */"
  },
  {
    "position": 152429,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 152430,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 152490,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 152495,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 152496,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 152525,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 152552,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 152553,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 152712,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * save the pointer to the last buf that's\n \t\t\t * done\n \t\t\t */"
  },
  {
    "position": 153275,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t\t\t * after deleting the node\n \t\t\t\t\t\t * link the descriptors\n \t\t\t\t\t\t */"
  },
  {
    "position": 153355,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153356,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 153422,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 153427,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153428,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 153460,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 153487,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153488,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 153495,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153496,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 153569,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153570,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 153611,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153612,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 153711,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * if the last buf was deleted.\n \t\t\t * set the pointer to the last descriptor.\n \t\t\t */"
  },
  {
    "position": 153928,
    "token_type": "comment",
    "token_value": "/* prev is the last one on the list */"
  },
  {
    "position": 153968,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 153969,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 154035,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 154040,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 154041,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 154073,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 154100,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 154101,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 154356,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * restart the DMA from the first \n \t\t\t * buffer that was not DMA'd.\n \t\t\t */"
  },
  {
    "position": 154668,
    "token_type": "comment",
    "token_value": "/* \n \t\t * queue them on to the XR txqueue. \n \t\t * can not directly put them on to the XR txq. since the\n \t\t * skb data size may be greater than the XR fragmentation\n \t\t * threshold size.\n \t\t */"
  },
  {
    "position": 154910,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 155242,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 155243,
    "token_type": "string",
    "token_value": "moved %d buffers from NORMAL to XR"
  },
  {
    "position": 155277,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 155279,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 155311,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 155340,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 155355,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 155396,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 155427,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 155463,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 155471,
    "token_type": "comment",
    "token_value": "/*\n \t\t * move data from XR txq to Normal txqs.\n \t\t */"
  },
  {
    "position": 155535,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 155536,
    "token_type": "string",
    "token_value": "move buffers from XR to NORMAL"
  },
  {
    "position": 155566,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 155568,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 155595,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 155635,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 155842,
    "token_type": "comment",
    "token_value": "/*\n \t\t * skip all the buffers that are done\n \t\t * until the first one that is in progress\n \t\t */"
  },
  {
    "position": 155956,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 155957,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 156016,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 156021,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 156022,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 156050,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 156077,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 156078,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 156228,
    "token_type": "comment",
    "token_value": "/* \n \t\t * save the pointer to the last buf that's\n \t\t * done\n \t\t */"
  },
  {
    "position": 156368,
    "token_type": "comment",
    "token_value": "/*\n \t\t * collect all the data in to four temp SW queues.\n \t\t */"
  },
  {
    "position": 156809,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 156857,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 156897,
    "token_type": "comment",
    "token_value": "/* XXX validate skb->priority, remove mask */"
  },
  {
    "position": 156984,
    "token_type": "string",
    "token_value": "0x3"
  },
  {
    "position": 157127,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t\t * link the descriptors\n \t\t\t\t */"
  },
  {
    "position": 157205,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 157206,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 157286,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 157287,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 157335,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 157336,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 157376,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 157377,
    "token_type": "string",
    "token_value": "%s: link[%u](%p)=%p (%p)"
  },
  {
    "position": 157401,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 157403,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 157565,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t\t * update the rate information  \n \t\t\t\t */"
  },
  {
    "position": 157695,
    "token_type": "comment",
    "token_value": "/*\n \t\t * reset the axq_link pointer to the last descriptor.\n \t\t */"
  },
  {
    "position": 157880,
    "token_type": "comment",
    "token_value": "/* prev is the last one on the list */"
  },
  {
    "position": 157920,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 157921,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 157986,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 157991,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 157992,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 158023,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 158050,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 158051,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 158246,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * if the list is empty reset the pointer.\n \t\t\t */"
  },
  {
    "position": 158362,
    "token_type": "comment",
    "token_value": "/*\n \t\t * restart the DMA from the first \n \t\t * buffer that was not DMA'd.\n \t\t */"
  },
  {
    "position": 158661,
    "token_type": "comment",
    "token_value": "/* \n \t\t * move (concant) the lists from the temp sw queues in to\n \t\t * WME queues.\n \t\t */"
  },
  {
    "position": 159119,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159120,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 159197,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159198,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 159243,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159244,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 159315,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t\t * find the first buffer to be DMA'd.\n \t\t\t\t */"
  },
  {
    "position": 159427,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159428,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 159489,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 159494,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159495,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 159524,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 159551,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159552,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 159877,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 159878,
    "token_type": "string",
    "token_value": "moved %d buffers from XR to NORMAL"
  },
  {
    "position": 159912,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 159914,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 159930,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159931,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 159946,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 159953,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 159954,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 159977,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 160039,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 160105,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 160190,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 160286,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 160308,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 160333,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 160367,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 160390,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 160473,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 160530,
    "token_type": "symbol",
    "token_value": "ath_rx_radiotap_header"
  },
  {
    "position": 160637,
    "token_type": "comment",
    "token_value": "/*\n  \t\t\t * Allocate buffer for monitor mode with space for the\n \t\t\t * wlan-ng style physical layer header at the start.\n  \t\t\t */"
  },
  {
    "position": 160836,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 160903,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 160904,
    "token_type": "string",
    "token_value": "%s: skbuff alloc of size %u failed"
  },
  {
    "position": 160938,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 160940,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 161010,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 161083,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Reserve space for the Prism header.\n  \t\t\t */"
  },
  {
    "position": 161196,
    "token_type": "comment",
    "token_value": "/*\n  \t\t\t * Align to cache line.\n \t\t\t */"
  },
  {
    "position": 161310,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 161376,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Cache-line-align.  This is important (for the\n \t\t\t * 5210 at least) as not doing so causes bogus data\n \t\t\t * in rx'd frames.\n \t\t\t */"
  },
  {
    "position": 161640,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 161641,
    "token_type": "string",
    "token_value": "%s: skbuff alloc of size %u failed"
  },
  {
    "position": 161675,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 161677,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 161938,
    "token_type": "comment",
    "token_value": "/*\n \t * Setup descriptors.  For receive we always terminate\n \t * the descriptor list with a self-linked entry so we'll\n \t * not get overrun under high load (as can happen with a\n \t * 5212 when ANI processing enables PHY error frames).\n \t *\n \t * To ensure the last descriptor is self-linked we create\n \t * each descriptor as self-linked and add it to the end.  As\n \t * each additional descriptor is added the previous self-linked\n \t * entry is ``fixed'' naturally.  This should be safe even\n \t * if DMA is happening.  When processing RX interrupts we\n \t * never remove/process the last, self-linked, entry on the\n \t * descriptor list.  This ensures the hardware always has\n \t * someplace to write a new frame.\n \t */"
  },
  {
    "position": 162704,
    "token_type": "comment",
    "token_value": "/* link to self */"
  },
  {
    "position": 162792,
    "token_type": "comment",
    "token_value": "/* virt addr of buffer */"
  },
  {
    "position": 162871,
    "token_type": "comment",
    "token_value": "/* buffer size */"
  },
  {
    "position": 162894,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 163005,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 163014,
    "token_type": "comment",
    "token_value": "/*\n  * Extend 15-bit time stamp from rx descriptor to\n  * a full 64-bit TSF using the current h/w TSF.\n  */"
  },
  {
    "position": 163172,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 163268,
    "token_type": "string",
    "token_value": "0x7fff"
  },
  {
    "position": 163296,
    "token_type": "string",
    "token_value": "0x8000"
  },
  {
    "position": 163322,
    "token_type": "string",
    "token_value": "0x7fff"
  },
  {
    "position": 163347,
    "token_type": "comment",
    "token_value": "/*\n  * Add a prism2 header to a received frame and\n  * dispatch it to capture tools like kismet.\n  */"
  },
  {
    "position": 163485,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 163509,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 163530,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 163556,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 163592,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 163632,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 163662,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 163783,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 163821,
    "token_type": "comment",
    "token_value": "/* Pass up tsf clock in mactime\n \t * Rx descriptor has the low 15 bits of the tsf at\n \t * the time the frame was received.  Use the current\n \t * tsf to extend this to 64 bits.\n \t */"
  },
  {
    "position": 164115,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 164116,
    "token_type": "string",
    "token_value": "data padding not enabled?"
  },
  {
    "position": 164141,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 164165,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 164173,
    "token_type": "comment",
    "token_value": "/* Remove hw pad bytes */"
  },
  {
    "position": 164209,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 164381,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 164469,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 164529,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 164553,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 164574,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 164600,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 164636,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 164676,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 164731,
    "token_type": "symbol",
    "token_value": "ath_tx_radiotap_header"
  },
  {
    "position": 164908,
    "token_type": "comment",
    "token_value": "/* Pass up tsf clock in mactime\n \t * TX descriptor contains the transmit time in TU's,\n \t * (bits 25-10 of the TSF).\n \t */"
  },
  {
    "position": 165106,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 165126,
    "token_type": "string",
    "token_value": "0x3ffffff"
  },
  {
    "position": 165157,
    "token_type": "string",
    "token_value": "0x4000000"
  },
  {
    "position": 165185,
    "token_type": "string",
    "token_value": "0x3ffffff"
  },
  {
    "position": 165211,
    "token_type": "comment",
    "token_value": "/*                                                                      \n \t * release the owner of this skb since we're basically                  \n \t * recycling it                                                         \n \t */"
  },
  {
    "position": 165474,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 165489,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 165579,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 165580,
    "token_type": "string",
    "token_value": "%s:%d %s"
  },
  {
    "position": 165588,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 165590,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 165736,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 165840,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 165874,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 165882,
    "token_type": "comment",
    "token_value": "/* Unlike in rx_capture, we're freeing the skb at the end\n \t\t * anyway, so we don't need to worry about using a copy */"
  },
  {
    "position": 166164,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 166192,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 166193,
    "token_type": "string",
    "token_value": "%s:%d %s"
  },
  {
    "position": 166201,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 166203,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 166294,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 166343,
    "token_type": "comment",
    "token_value": "/*\n  * Intercept management frames to collect beacon rssi data\n  * and to do ibss merges.\n  */"
  },
  {
    "position": 166473,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 166500,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 166569,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 166619,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 166655,
    "token_type": "comment",
    "token_value": "/*\n \t * Call up first so subsequent work can use information\n \t * potentially stored in the node (e.g. for ibss merge).\n \t */"
  },
  {
    "position": 166861,
    "token_type": "symbol",
    "token_value": "IEEE80211_FC0_SUBTYPE_BEACON"
  },
  {
    "position": 166894,
    "token_type": "comment",
    "token_value": "/* update rssi statistics for use by the HAL */"
  },
  {
    "position": 167155,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Resync beacon timers using the tsf of the\n \t\t\t * beacon frame we just received.\n \t\t\t */"
  },
  {
    "position": 167348,
    "token_type": "comment",
    "token_value": "/* fall thru... */"
  },
  {
    "position": 167374,
    "token_type": "symbol",
    "token_value": "IEEE80211_FC0_SUBTYPE_PROBE_RESP"
  },
  {
    "position": 167555,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Handle ibss merge as needed; check the tsf on the\n \t\t\t * frame before attempting the merge.  The 802.11 spec\n \t\t\t * says the station should change it's bssid to match\n \t\t\t * the oldest station with the same ssid, where oldest\n \t\t\t * is determined by the tsf.  Note that hardware\n \t\t\t * reconfiguration happens through callback to\n \t\t\t * ath_newstate as the state machine will go from\n \t\t\t * RUN -> RUN when this happens.\n \t\t\t */"
  },
  {
    "position": 167998,
    "token_type": "comment",
    "token_value": "/* jal: added: don't merge if we have a desired\n \t\t\t   BSSID */"
  },
  {
    "position": 168199,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 168200,
    "token_type": "string",
    "token_value": "ibss merge, rstamp %u tsf %llu"
  },
  {
    "position": 168231,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 168239,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 168240,
    "token_type": "string",
    "token_value": "tstamp %llu"
  },
  {
    "position": 168251,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 168253,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 168439,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 168481,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 168510,
    "token_type": "comment",
    "token_value": "/* XXX block beacon interrupts */"
  },
  {
    "position": 168700,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 168758,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 168759,
    "token_type": "comment",
    "token_value": "define\tPA2DESC(_sc, _pa) \\"
  },
  {
    "position": 168786,
    "token_type": "comment",
    "token_value": "((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc + \\"
  },
  {
    "position": 168846,
    "token_type": "comment",
    "token_value": "((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))"
  },
  {
    "position": 168900,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 168926,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 168954,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 168976,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 169012,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 169052,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 169086,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 169109,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 169132,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 169189,
    "token_type": "comment",
    "token_value": "/* Let the 802.11 layer know about the new noise floor */"
  },
  {
    "position": 169322,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 169323,
    "token_type": "string",
    "token_value": "%s"
  },
  {
    "position": 169325,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 169327,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 169407,
    "token_type": "comment",
    "token_value": "/* XXX ??? can this happen */"
  },
  {
    "position": 169448,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 169449,
    "token_type": "string",
    "token_value": "%s: no buffer (%s)"
  },
  {
    "position": 169467,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 169469,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 169515,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Descriptors are now processed at in the first-level\n \t\t * interrupt handler to support U-APSD trigger search.\n \t\t * This must also be done even when U-APSD is not active to support\n \t\t * other error handling that requires immediate attention.\n \t\t * We check bf_status to find out if the bf's descriptors have \n \t\t * been processed by the HAL.\n \t\t */"
  },
  {
    "position": 169998,
    "token_type": "comment",
    "token_value": "/* NB: never process the self-linked entry at the end */"
  },
  {
    "position": 170115,
    "token_type": "comment",
    "token_value": "/* XXX ??? can this happen */"
  },
  {
    "position": 170156,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 170157,
    "token_type": "string",
    "token_value": "%s: no skbuff (%s)"
  },
  {
    "position": 170175,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 170177,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 170224,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 170225,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 170306,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 170311,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 170312,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 170356,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Frame spans multiple descriptors; this\n \t\t\t * cannot happen yet as we don't support\n \t\t\t * jumbograms.  If not in monitor mode,\n \t\t\t * discard the frame.\n \t\t\t */"
  },
  {
    "position": 170529,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 170530,
    "token_type": "comment",
    "token_value": "ifndef ERROR_FRAMES"
  },
  {
    "position": 170554,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Enable this if you want to see\n \t\t\t * error frames in Monitor mode.\n \t\t\t */"
  },
  {
    "position": 170749,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 170750,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 170760,
    "token_type": "comment",
    "token_value": "/* fall thru for monitor mode handling... */"
  },
  {
    "position": 170846,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 171147,
    "token_type": "string",
    "token_value": "0x1f"
  },
  {
    "position": 171259,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * Decrypt error.  If the error occurred\n \t\t\t\t * because there was no hardware key, then\n \t\t\t\t * let the frame through so the upper layers\n \t\t\t\t * can process it.  This is necessary for 5210\n \t\t\t\t * parts which have no way to setup a ``clear''\n \t\t\t\t * key cache entry.\n \t\t\t\t *\n \t\t\t\t * XXX do key cache faulting\n \t\t\t\t */"
  },
  {
    "position": 171799,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * Do minimal work required to hand off\n \t\t\t\t * the 802.11 header for notification.\n \t\t\t\t */"
  },
  {
    "position": 171905,
    "token_type": "comment",
    "token_value": "/* XXX frag's and QoS frames */"
  },
  {
    "position": 172005,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 172127,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 172133,
    "token_type": "comment",
    "token_value": "/* XXX revalidate MIC, lookup ni to find VAP */"
  },
  {
    "position": 172182,
    "token_type": "comment",
    "token_value": "ieee80211_notify_michael_failure(ic,"
  },
  {
    "position": 172225,
    "token_type": "comment",
    "token_value": "(struct ieee80211_frame *) skb->data,"
  },
  {
    "position": 172273,
    "token_type": "comment",
    "token_value": "sc->sc_splitmic ?"
  },
  {
    "position": 172301,
    "token_type": "comment",
    "token_value": "ds->ds_rxstat.rs_keyix - 32 :"
  },
  {
    "position": 172345,
    "token_type": "comment",
    "token_value": "ds->ds_rxstat.rs_keyix"
  },
  {
    "position": 172382,
    "token_type": "comment",
    "token_value": ");"
  },
  {
    "position": 172391,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 172416,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Reject error frames if we have no vaps that \n \t\t\t * are operating in monitor mode.\n \t\t\t */"
  },
  {
    "position": 172543,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 172580,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Sync and unmap the frame.  At this point we're\n \t\t * committed to passing the sk_buff somewhere so\n \t\t * clear buf_skb; this means a new sk_buff must be\n \t\t * allocated when the rx descriptor is setup again\n \t\t * to receive another frame.\n \t\t */"
  },
  {
    "position": 173296,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 173305,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * Some vap is in monitor mode, so send to\n \t\t\t * ath_rx_capture for monitor encapsulation\n \t\t\t */"
  },
  {
    "position": 173413,
    "token_type": "comment",
    "token_value": "#if 0"
  },
  {
    "position": 173419,
    "token_type": "comment",
    "token_value": "if (len < IEEE80211_ACK_LEN) {"
  },
  {
    "position": 173454,
    "token_type": "comment",
    "token_value": "DPRINTF(sc, ATH_DEBUG_RECV,"
  },
  {
    "position": 173487,
    "token_type": "comment",
    "token_value": "\"%s: runt packet %d\\n\", __func__, len);"
  },
  {
    "position": 173533,
    "token_type": "comment",
    "token_value": "sc->sc_stats.ast_rx_tooshort++;"
  },
  {
    "position": 173570,
    "token_type": "comment",
    "token_value": "dev_kfree_skb(skb);"
  },
  {
    "position": 173595,
    "token_type": "comment",
    "token_value": "skb = NULL;"
  },
  {
    "position": 173612,
    "token_type": "comment",
    "token_value": "goto rx_next;"
  },
  {
    "position": 173631,
    "token_type": "comment",
    "token_value": "}"
  },
  {
    "position": 173637,
    "token_type": "comment",
    "token_value": "#endif"
  },
  {
    "position": 173738,
    "token_type": "comment",
    "token_value": "/* no other VAPs need the packet */"
  },
  {
    "position": 173851,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Finished monitor mode handling, now reject\n \t\t * error frames before passing to other vaps\n \t\t */"
  },
  {
    "position": 173992,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 174067,
    "token_type": "comment",
    "token_value": "/* remove the CRC */"
  },
  {
    "position": 174141,
    "token_type": "comment",
    "token_value": "/*\n \t\t * From this point on we assume the frame is at least\n \t\t * as large as ieee80211_frame_min; verify that.\n \t\t */"
  },
  {
    "position": 174326,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 174327,
    "token_type": "string",
    "token_value": "%s: short packet %d"
  },
  {
    "position": 174346,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 174348,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 174476,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Normal receive.\n \t\t */"
  },
  {
    "position": 174697,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Locate the node for sender, track state, and then\n \t\t * pass the (referenced) node up to the 802.11 layer\n \t\t * for its use.  If the sender is unknown spam the\n \t\t * frame; it'll be dropped where it's not wanted.\n \t\t */"
  },
  {
    "position": 175058,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 175076,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Fast path: node is present in the key map;\n \t\t\t * grab a reference for processing the frame.\n \t\t\t */"
  },
  {
    "position": 175422,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * No key index or no entry, do a lookup and\n \t\t\t * add the node to the mapping table if possible.\n \t\t\t */"
  },
  {
    "position": 175591,
    "token_type": "symbol",
    "token_value": "ieee80211_frame_min"
  },
  {
    "position": 175660,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 175880,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * If the station has a key cache slot assigned\n \t\t\t\t * update the key->node mapping table.\n \t\t\t\t */"
  },
  {
    "position": 176348,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * When using hardware fast diversity, change the default rx\n \t\t\t * antenna if rx diversity chooses the other antenna 3\n \t\t\t * times in a row.\n \t\t\t */"
  },
  {
    "position": 176591,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 176685,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 176722,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Blink for any data frame.  Otherwise do a\n \t\t\t * heartbeat-style blink when idle.  The latter\n \t\t\t * is mainly for station mode where we depend on\n \t\t\t * periodic beacon frames to trigger the poll event.\n \t\t\t */"
  },
  {
    "position": 177412,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 177421,
    "token_type": "comment",
    "token_value": "/* rx signal state monitoring */"
  },
  {
    "position": 177570,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 177615,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 177616,
    "token_type": "comment",
    "token_value": "undef PA2DESC"
  },
  {
    "position": 177636,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 177637,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 177707,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 177734,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 177886,
    "token_type": "comment",
    "token_value": "/*\n \t * if no stations are in XR mode.\n \t * use default poll interval.\n \t */"
  },
  {
    "position": 177978,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 178198,
    "token_type": "comment",
    "token_value": "/*\n \t * if all the stations are in XR mode.\n \t * use minimum poll interval.\n \t */"
  },
  {
    "position": 178507,
    "token_type": "comment",
    "token_value": "/*\n \t * if stations are in both XR and normal mode. \n \t * use some fudge factor.\n \t */"
  },
  {
    "position": 178941,
    "token_type": "comment",
    "token_value": "/*\n \t * XXX: what if stations go to sleep?\n \t * ideally the interval should be adjusted dynamically based on\n \t * xr and normal upstream traffic.\n \t */"
  },
  {
    "position": 179099,
    "token_type": "comment",
    "token_value": "/*\n  * update grppoll period.\n  */"
  },
  {
    "position": 179179,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 179218,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 179271,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 179336,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 179368,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 179403,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 179516,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 179569,
    "token_type": "string",
    "token_value": "1000"
  },
  {
    "position": 179575,
    "token_type": "comment",
    "token_value": "/* usec */"
  },
  {
    "position": 179614,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 179710,
    "token_type": "comment",
    "token_value": "/* push to h/w */"
  },
  {
    "position": 179734,
    "token_type": "comment",
    "token_value": "/*\n  * Setup grppoll  h/w transmit queue.\n  */"
  },
  {
    "position": 179825,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 179867,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 179868,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 179896,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 179897,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 179921,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 179997,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180048,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180060,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 180107,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180142,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180255,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180308,
    "token_type": "string",
    "token_value": "1000"
  },
  {
    "position": 180314,
    "token_type": "comment",
    "token_value": "/* usec */"
  },
  {
    "position": 180353,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 180390,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 180459,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 180519,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 180520,
    "token_type": "string",
    "token_value": "%s: HAL qnum %u out of range, max %u!"
  },
  {
    "position": 180557,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 180559,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 180793,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180821,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 180845,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181019,
    "token_type": "comment",
    "token_value": "/* push to h/w */"
  },
  {
    "position": 181038,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 181039,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 181055,
    "token_type": "comment",
    "token_value": "/*\n  * Setup group poll frames on the group poll queue.\n  */"
  },
  {
    "position": 181154,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 181228,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 181258,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 181294,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 181334,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 181377,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 181435,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181458,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181515,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181541,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 181581,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 181617,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181628,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 181702,
    "token_type": "string",
    "token_value": "16"
  },
  {
    "position": 181718,
    "token_type": "string",
    "token_value": "16"
  },
  {
    "position": 181740,
    "token_type": "symbol",
    "token_value": "rate_to_str_map"
  },
  {
    "position": 181774,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 181870,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181871,
    "token_type": "string",
    "token_value": "0.25"
  },
  {
    "position": 181875,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181881,
    "token_type": "string",
    "token_value": "250"
  },
  {
    "position": 181892,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181893,
    "token_type": "string",
    "token_value": ".25"
  },
  {
    "position": 181896,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181902,
    "token_type": "string",
    "token_value": "250"
  },
  {
    "position": 181912,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181913,
    "token_type": "string",
    "token_value": "0.5"
  },
  {
    "position": 181916,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181923,
    "token_type": "string",
    "token_value": "500"
  },
  {
    "position": 181934,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181935,
    "token_type": "string",
    "token_value": ".5"
  },
  {
    "position": 181937,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181944,
    "token_type": "string",
    "token_value": "500"
  },
  {
    "position": 181956,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181957,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 181958,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181964,
    "token_type": "string",
    "token_value": "1000"
  },
  {
    "position": 181977,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181978,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 181979,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181985,
    "token_type": "string",
    "token_value": "3000"
  },
  {
    "position": 181998,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 181999,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 182000,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182006,
    "token_type": "string",
    "token_value": "6000"
  },
  {
    "position": 182019,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182020,
    "token_type": "string",
    "token_value": "?"
  },
  {
    "position": 182021,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182030,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182042,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 182043,
    "token_type": "comment",
    "token_value": "define MAX_GRPPOLL_RATE 5"
  },
  {
    "position": 182070,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 182071,
    "token_type": "comment",
    "token_value": "define\tUSE_SHPREAMBLE(_ic) \\"
  },
  {
    "position": 182100,
    "token_type": "comment",
    "token_value": "(((_ic)->ic_flags & (IEEE80211_F_SHPREAMBLE | IEEE80211_F_USEBARKER)) \\"
  },
  {
    "position": 182174,
    "token_type": "comment",
    "token_value": "== IEEE80211_F_SHPREAMBLE)"
  },
  {
    "position": 182261,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182288,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182335,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182336,
    "token_type": "string",
    "token_value": "%s %s"
  },
  {
    "position": 182341,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182368,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 182386,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182427,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182480,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 182533,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182534,
    "token_type": "string",
    "token_value": "%d"
  },
  {
    "position": 182536,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182604,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 182659,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182660,
    "token_type": "string",
    "token_value": "grppoll_start: grppoll Buf allocation failed"
  },
  {
    "position": 182704,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 182706,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 182927,
    "token_type": "comment",
    "token_value": "/*\n \t * queue the group polls for each antenna mode. set the right keycache index for the\n \t * broadcast packets. this will ensure that if the first poll\n \t * does not elicit a single chirp from any XR station, hardware will\n \t * not send the subsequent polls\n \t */"
  },
  {
    "position": 183210,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 183303,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 183323,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 183409,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * except for the last one every thing else is a CF poll.\n \t\t\t * last one is  the CF End frame.\n \t\t\t */"
  },
  {
    "position": 183870,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * the very first group poll ctsduration  should be enough to allow\n \t\t\t\t * an auth frame from station. This is to pass the wifi testing (as \n \t\t\t\t * some stations in testing do not honor CF_END and rely on CTS duration)\n \t\t\t\t */"
  },
  {
    "position": 184122,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 184252,
    "token_type": "comment",
    "token_value": "/*cf-poll time */"
  },
  {
    "position": 184373,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 184392,
    "token_type": "symbol",
    "token_value": "ieee80211_frame_min"
  },
  {
    "position": 184415,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 184478,
    "token_type": "comment",
    "token_value": "/*auth packet time */"
  },
  {
    "position": 184626,
    "token_type": "comment",
    "token_value": "/*ack frame time */"
  },
  {
    "position": 184754,
    "token_type": "comment",
    "token_value": "/*cf-poll time */"
  },
  {
    "position": 184961,
    "token_type": "comment",
    "token_value": "/*data packet time */"
  },
  {
    "position": 185108,
    "token_type": "comment",
    "token_value": "/*ack frame time */"
  },
  {
    "position": 185195,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 185213,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 185531,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 185532,
    "token_type": "string",
    "token_value": "%s: No more TxBufs"
  },
  {
    "position": 185550,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 185552,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 185626,
    "token_type": "comment",
    "token_value": "/* XXX use a counter and leave at least one for mgmt frames */"
  },
  {
    "position": 185770,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 185771,
    "token_type": "string",
    "token_value": "%s: No more TxBufs left"
  },
  {
    "position": 185794,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 185796,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 186173,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 186368,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 186532,
    "token_type": "comment",
    "token_value": "/* frame length */"
  },
  {
    "position": 186572,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 186589,
    "token_type": "comment",
    "token_value": "/* header length */"
  },
  {
    "position": 186623,
    "token_type": "comment",
    "token_value": "/* Atheros packet type */"
  },
  {
    "position": 186674,
    "token_type": "comment",
    "token_value": "/* max txpower */"
  },
  {
    "position": 186705,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 186708,
    "token_type": "comment",
    "token_value": "/* series 0 rate/tries */"
  },
  {
    "position": 186747,
    "token_type": "comment",
    "token_value": "/* HAL_TXKEYIX_INVALID */"
  },
  {
    "position": 186774,
    "token_type": "comment",
    "token_value": "/* use key index */"
  },
  {
    "position": 186809,
    "token_type": "comment",
    "token_value": "/* antenna mode */"
  },
  {
    "position": 186861,
    "token_type": "comment",
    "token_value": "/* rts/cts rate */"
  },
  {
    "position": 186900,
    "token_type": "comment",
    "token_value": "/* rts/cts duration */"
  },
  {
    "position": 186930,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 186934,
    "token_type": "comment",
    "token_value": "/* comp icv len */"
  },
  {
    "position": 186960,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 186964,
    "token_type": "comment",
    "token_value": "/* comp iv len */"
  },
  {
    "position": 187018,
    "token_type": "comment",
    "token_value": "/* comp scheme */"
  },
  {
    "position": 187099,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 187102,
    "token_type": "comment",
    "token_value": "/* buffer length */"
  },
  {
    "position": 187138,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 187174,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 187205,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 187240,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t \t\t* if descriptor swapping is not enabled\n \t \t\t*/"
  },
  {
    "position": 187387,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187388,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 187462,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187463,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 187505,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187506,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 187639,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 187682,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 187702,
    "token_type": "comment",
    "token_value": "/* make it circular */"
  },
  {
    "position": 187726,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187727,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 187797,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187798,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 187836,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187837,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 187845,
    "token_type": "comment",
    "token_value": "/* start the queue */"
  },
  {
    "position": 187981,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 187985,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 187986,
    "token_type": "comment",
    "token_value": "undef USE_SHPREAMBLE"
  },
  {
    "position": 188049,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 188080,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 188120,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 188163,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 188197,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 188237,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 188337,
    "token_type": "comment",
    "token_value": "/* move the grppool bufs back to the grppollbuf */"
  },
  {
    "position": 188955,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 188983,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189007,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189063,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189070,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 189071,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 189080,
    "token_type": "comment",
    "token_value": "/*\n  * Setup a h/w transmit queue.\n  */"
  },
  {
    "position": 189135,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 189167,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 189210,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 189211,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 189239,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 189240,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 189264,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 189340,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189391,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189410,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189583,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 189587,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 189588,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 189743,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 189744,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 189753,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 189754,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 189778,
    "token_type": "comment",
    "token_value": "/* allocate compression scratch buffer for data queues */"
  },
  {
    "position": 190267,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 190268,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 190276,
    "token_type": "comment",
    "token_value": "/*\n \t * Enable interrupts only for EOL and DESC conditions.\n \t * We mark tx descriptors to receive a DESC interrupt\n \t * when a tx queue gets deep; otherwise waiting for the\n \t * EOL to reap descriptors.  Note that this is done to\n \t * reduce interrupt load and this only defers reaping\n \t * descriptors, never transmitting frames.  Aside from\n \t * reducing interrupts this also permits more concurrency.\n \t * The only potential downside is if the tx queue backs\n \t * up in which case the top half of the kernel may backup\n \t * due to a lack of tx descriptors.\n \t *\n \t * The UAPSD queue is an exception, since we take a desc-\n \t * based intr on the EOSP frames.\n \t */"
  },
  {
    "position": 191163,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 191172,
    "token_type": "comment",
    "token_value": "/*\n \t\t * NB: don't print a message, this happens\n \t\t * normally on parts with too few tx queues\n \t\t */"
  },
  {
    "position": 191276,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 191277,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 191396,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 191397,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 191464,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 191465,
    "token_type": "string",
    "token_value": "%s: HAL qnum %u out of range, max %u!"
  },
  {
    "position": 191502,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 191504,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 191552,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 191553,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 191672,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 191673,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 191780,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 191942,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 191971,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 191996,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 192153,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 192197,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 192198,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 192212,
    "token_type": "comment",
    "token_value": "/*\n  * Setup a hardware data transmit queue for the specified\n  * access control.  The HAL may not support all requested\n  * queues in which case it will return a reference to a\n  * previously setup queue.  We record the mapping from ac's\n  * to h/w queues for use by ath_tx_start and also track\n  * the set of h/w queues being used to optimize work in the\n  * transmit interrupt handler and related routines.\n  */"
  },
  {
    "position": 192660,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 192700,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 192701,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 192729,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 192730,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 192754,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 192810,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 192811,
    "token_type": "string",
    "token_value": "%s: AC %u out of range, max %u!"
  },
  {
    "position": 192842,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 192844,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 192916,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 193035,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 193057,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 193061,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 193062,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 193076,
    "token_type": "comment",
    "token_value": "/*\n  * Update WME parameters for a transmit queue.\n  */"
  },
  {
    "position": 193167,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 193189,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 193215,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 193216,
    "token_type": "comment",
    "token_value": "define\tATH_EXPONENT_TO_VALUE(v)\t((1<<v)-1)"
  },
  {
    "position": 193260,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 193261,
    "token_type": "comment",
    "token_value": "define\tATH_TXOP_TO_US(v)\t\t(v<<5)"
  },
  {
    "position": 193303,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 193343,
    "token_type": "symbol",
    "token_value": "wmeParams"
  },
  {
    "position": 193416,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 193798,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 193799,
    "token_type": "string",
    "token_value": "%s: unable to update hardware queue"
  },
  {
    "position": 193835,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 193841,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 193842,
    "token_type": "string",
    "token_value": "parameters for %s traffic!"
  },
  {
    "position": 193868,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 193870,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 193933,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 193991,
    "token_type": "comment",
    "token_value": "/* push to h/w */"
  },
  {
    "position": 194019,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 194027,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 194028,
    "token_type": "comment",
    "token_value": "undef ATH_TXOP_TO_US"
  },
  {
    "position": 194050,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 194051,
    "token_type": "comment",
    "token_value": "undef ATH_EXPONENT_TO_VALUE"
  },
  {
    "position": 194085,
    "token_type": "comment",
    "token_value": "/*\n  * Callback from the 802.11 layer to update WME parameters.\n  */"
  },
  {
    "position": 194189,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 194219,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 194591,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 194600,
    "token_type": "comment",
    "token_value": "/*\n  * Callback from 802.11 layer to flush a node's U-APSD queues\n  */"
  },
  {
    "position": 194709,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 194741,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 194779,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 194801,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 194851,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 194900,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: could optimize for successive runs from the same AC\n \t *     if we can assume that is the most frequent case.\n \t */"
  },
  {
    "position": 195174,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 195221,
    "token_type": "string",
    "token_value": "0x3"
  },
  {
    "position": 195497,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 195544,
    "token_type": "string",
    "token_value": "0x3"
  },
  {
    "position": 195725,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 195768,
    "token_type": "comment",
    "token_value": "/*\n  * Reclaim resources for a setup queue.\n  */"
  },
  {
    "position": 195854,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 195876,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 195896,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 195897,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 195921,
    "token_type": "comment",
    "token_value": "/* Release compression buffer */"
  },
  {
    "position": 196111,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 196112,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 196222,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 196249,
    "token_type": "comment",
    "token_value": "/*\n  * Reclaim all tx queue resources.\n  */"
  },
  {
    "position": 196329,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 196399,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 196506,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 196507,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 196570,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 196606,
    "token_type": "symbol",
    "token_value": "ieee80211_cipher"
  },
  {
    "position": 196851,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 196887,
    "token_type": "symbol",
    "token_value": "ieee80211_cipher"
  },
  {
    "position": 197130,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 197131,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 197140,
    "token_type": "comment",
    "token_value": "/*\n  * Get transmit rate index using rate in Kbps\n  */"
  },
  {
    "position": 197294,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 197310,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 197433,
    "token_type": "comment",
    "token_value": "/*\n  * Needs external locking!\n  */"
  },
  {
    "position": 197508,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 197530,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 197551,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 197576,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 197598,
    "token_type": "comment",
    "token_value": "/* case the delivery queue just sent and can move overflow q over */"
  },
  {
    "position": 197696,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 197732,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 197773,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 197774,
    "token_type": "string",
    "token_value": "%s: delivery Q empty, replacing with overflow Q"
  },
  {
    "position": 197821,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 197823,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 197988,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 197999,
    "token_type": "comment",
    "token_value": "/* most common case - room on delivery q */"
  },
  {
    "position": 198104,
    "token_type": "comment",
    "token_value": "/* add to delivery q */"
  },
  {
    "position": 198198,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 198199,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 198283,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 198284,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 198336,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 198337,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 198464,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 198465,
    "token_type": "string",
    "token_value": "%s: added AC %d frame to delivery Q, new depth = %d"
  },
  {
    "position": 198516,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 198518,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 198601,
    "token_type": "comment",
    "token_value": "/* check if need to make room on overflow queue */"
  },
  {
    "position": 198722,
    "token_type": "comment",
    "token_value": "/* \n \t\t *  pop oldest from delivery queue and cleanup\n \t\t */"
  },
  {
    "position": 199128,
    "token_type": "comment",
    "token_value": "/*\n \t\t *  move oldest from overflow to delivery\n \t\t */"
  },
  {
    "position": 199420,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 199421,
    "token_type": "string",
    "token_value": "%s: delivery and overflow Qs full, dropped oldest"
  },
  {
    "position": 199470,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 199472,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 199498,
    "token_type": "comment",
    "token_value": "/* add to overflow q */"
  },
  {
    "position": 199599,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 199600,
    "token_type": "comment",
    "token_value": "ifdef AH_NEED_DESC_SWAP"
  },
  {
    "position": 199683,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 199684,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 199735,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 199736,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 199870,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 199871,
    "token_type": "string",
    "token_value": "%s: added AC %d to overflow Q, new depth = %d"
  },
  {
    "position": 199916,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 199918,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 200036,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 200060,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 200087,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 200107,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 200142,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 200143,
    "token_type": "comment",
    "token_value": "define\tMIN(a,b)\t((a) < (b) ? (a) : (b))"
  },
  {
    "position": 200192,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 200228,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 200267,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 200308,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 200438,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 200450,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 200513,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 200520,
    "token_type": "comment",
    "token_value": "/* NB: silence compiler */"
  },
  {
    "position": 200556,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 200586,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 200616,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 200759,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 200782,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 200864,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 200914,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 201048,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 201119,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 201185,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 201213,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 201214,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 201248,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 201338,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 201339,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 201347,
    "token_type": "comment",
    "token_value": "/*\n \t * Packet length must not include any\n \t * pad bytes; deduct them here.\n \t */"
  },
  {
    "position": 201452,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 201490,
    "token_type": "symbol",
    "token_value": "ieee80211_cipher"
  },
  {
    "position": 201523,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 201546,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Construct the 802.11 header+trailer for an encrypted\n \t\t * frame. The only reason this can fail is because of an\n \t\t * unknown or unsupported cipher/key type.\n \t\t */"
  },
  {
    "position": 201726,
    "token_type": "comment",
    "token_value": "/* FFXXX: change to handle linked skbs */"
  },
  {
    "position": 201832,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * This can happen when the key is yanked after the\n \t\t\t * frame was queued.  Just discard the frame; the\n \t\t\t * 802.11 layer counts failures and provides\n \t\t\t * debugging/diagnostics.\n \t\t\t */"
  },
  {
    "position": 202057,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Adjust the packet + header lengths for the crypto\n \t\t * additions and calculate the h/w key index.  When\n \t\t * a s/w mic is done the frame will have had any mic\n \t\t * added to it prior to entry so skb->len above will\n \t\t * account for it. Otherwise we need to add it to the\n \t\t * packet length.\n \t\t */"
  },
  {
    "position": 202513,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 202691,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 202692,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 202746,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 202779,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 202783,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 202784,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 202793,
    "token_type": "comment",
    "token_value": "/* packet header may have moved, reset our local pointer */"
  },
  {
    "position": 202869,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 202970,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Use station key cache slot, if assigned.\n \t\t */"
  },
  {
    "position": 203213,
    "token_type": "comment",
    "token_value": "/*\n \t * Load the DMA map so any coalescing is done.  This\n \t * also calculates the number of descriptors we need.\n \t */"
  },
  {
    "position": 203334,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 203335,
    "token_type": "comment",
    "token_value": "ifndef ATH_SUPERG_FF"
  },
  {
    "position": 203474,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 203475,
    "token_type": "string",
    "token_value": "%s: skb %p [data %p len %u] skbaddr %llx"
  },
  {
    "position": 203515,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 203517,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 203584,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 203585,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 203590,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF case */"
  },
  {
    "position": 203617,
    "token_type": "comment",
    "token_value": "/* NB: ensure skb->len had been updated for each skb so we don't need pktlen */"
  },
  {
    "position": 203711,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 203745,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 203874,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 203875,
    "token_type": "string",
    "token_value": "%s: skb%d %p [data %p len %u] skbaddr %llx"
  },
  {
    "position": 203917,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 203919,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 204165,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 204166,
    "token_type": "string",
    "token_value": "%s: skb%d %p [data %p len %u] skbaddr %llx"
  },
  {
    "position": 204208,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 204210,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 204295,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 204331,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 204339,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 204340,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 204346,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 204410,
    "token_type": "comment",
    "token_value": "/* setup descriptors */"
  },
  {
    "position": 204455,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 204456,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 204573,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 204574,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 204604,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 204605,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 204634,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 204635,
    "token_type": "string",
    "token_value": "no rate table, mode %u"
  },
  {
    "position": 204657,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 204682,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: the 802.11 layer marks whether or not we should\n \t * use short preamble based on the current mode and\n \t * negotiated parameters.\n \t */"
  },
  {
    "position": 205096,
    "token_type": "comment",
    "token_value": "/* XXX needed for crypto errs */"
  },
  {
    "position": 205131,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate Atheros packet type from IEEE80211 packet header,\n \t * setup for rate calculations, and select h/w transmit queue.\n \t */"
  },
  {
    "position": 205289,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 205328,
    "token_type": "symbol",
    "token_value": "IEEE80211_FC0_TYPE_MGT"
  },
  {
    "position": 205374,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 205705,
    "token_type": "comment",
    "token_value": "/* XXX */"
  },
  {
    "position": 205917,
    "token_type": "comment",
    "token_value": "/* NB: force all management frames to highest queue */"
  },
  {
    "position": 206067,
    "token_type": "symbol",
    "token_value": "IEEE80211_FC0_TYPE_CTL"
  },
  {
    "position": 206123,
    "token_type": "comment",
    "token_value": "/* stop setting of duration */"
  },
  {
    "position": 206356,
    "token_type": "comment",
    "token_value": "/* NB: force all ctl frames to highest queue */"
  },
  {
    "position": 206499,
    "token_type": "symbol",
    "token_value": "IEEE80211_FC0_TYPE_DATA"
  },
  {
    "position": 206557,
    "token_type": "comment",
    "token_value": "/* default */"
  },
  {
    "position": 206753,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * ATH_TXMAXTRY disables Multi-rate retries, which\n \t\t\t * isn't applicable to mcast packets and overrides\n \t\t\t * the desired transmission rate for mcast traffic.\n \t\t\t */"
  },
  {
    "position": 206972,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Data frames; consult the rate control module.\n \t\t\t */"
  },
  {
    "position": 207132,
    "token_type": "comment",
    "token_value": "/* Ratecontrol sometimes returns invalid rate index */"
  },
  {
    "position": 207202,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 207325,
    "token_type": "comment",
    "token_value": "/* U-APSD frame, handle txq later */"
  },
  {
    "position": 207383,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Default all non-QoS traffic to the best-effort queue.\n \t\t */"
  },
  {
    "position": 207469,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 207507,
    "token_type": "comment",
    "token_value": "/* XXX validate skb->priority, remove mask */"
  },
  {
    "position": 207591,
    "token_type": "string",
    "token_value": "0x3"
  },
  {
    "position": 207830,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 207831,
    "token_type": "string",
    "token_value": "%s: bogus frame type 0x%x (%s)"
  },
  {
    "position": 207861,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 207863,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 207890,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 207934,
    "token_type": "comment",
    "token_value": "/* XXX statistic */"
  },
  {
    "position": 207977,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 207978,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 208193,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 208194,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 208202,
    "token_type": "comment",
    "token_value": "/*\n \t * When servicing one or more stations in power-save mode (or)\n \t * if there is some mcast data waiting on mcast queue\n \t * (to prevent out of order delivery of mcast,bcast packets)\n \t * multicast frames must be buffered until after the beacon.\n \t * We use the private mcast queue for that.\n \t */"
  },
  {
    "position": 208598,
    "token_type": "comment",
    "token_value": "/* XXX? more bit in 802.11 frame header */"
  },
  {
    "position": 208649,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate miscellaneous flags.\n \t */"
  },
  {
    "position": 208741,
    "token_type": "comment",
    "token_value": "/* no ack on broad/multicast */"
  },
  {
    "position": 208832,
    "token_type": "comment",
    "token_value": "/* turn off multi-rate retry for multicast traffic */"
  },
  {
    "position": 208935,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 208936,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 208959,
    "token_type": "comment",
    "token_value": "/* we could refine to only check that the frame of interest\n \t\t * is a FF, but this seems inconsistent.\n \t\t */"
  },
  {
    "position": 209139,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 209140,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 209178,
    "token_type": "comment",
    "token_value": "/* RTS based on frame length */"
  },
  {
    "position": 209279,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 209280,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 209306,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 209307,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 209321,
    "token_type": "comment",
    "token_value": "/*\n \t * If 802.11g protection is enabled, determine whether\n \t * to use RTS/CTS or just CTS.  Note that this is only\n \t * done for OFDM unicast frames.\n \t */"
  },
  {
    "position": 209608,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 209616,
    "token_type": "comment",
    "token_value": "/* XXX fragments must use CCK rates w/ protection */"
  },
  {
    "position": 209860,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t**  if Tx fragment, it would be desirable to \n \t\t\t**  use highest CCK rate for RTS/CTS.\n \t\t\t**  However, stations farther away may detect it\n \t\t\t**  at a lower CCK rate. Therefore, use the \n \t\t\t**  configured protect rate, which is 2 Mbps\n \t\t\t**  for 11G.\n \t\t\t*/"
  },
  {
    "position": 210276,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate duration.  This logically belongs in the 802.11\n \t * layer but it lacks sufficient information to calculate it.\n \t */"
  },
  {
    "position": 210448,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 210469,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 210549,
    "token_type": "comment",
    "token_value": "/*\n \t\t * XXX not right with fragmentation.\n \t\t */"
  },
  {
    "position": 210725,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 210774,
    "token_type": "comment",
    "token_value": "/* Add additional 'SIFS + ACK' */"
  },
  {
    "position": 210814,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t** Compute size of next fragment in order to compute\n \t\t\t** durations needed to update NAV.\n \t\t\t** The last fragment uses the ACK duration only.\n \t\t\t** Add time for next fragment.\n \t\t\t*/"
  },
  {
    "position": 211119,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t**  Force hardware to use computed duration for next\n \t\t\t**  fragment by disabling multi-rate retry, which\n \t\t\t**  updates duration based on the multi-rate\n \t\t\t**  duration table.\n \t\t\t*/"
  },
  {
    "position": 211386,
    "token_type": "comment",
    "token_value": "/*\n \t * Calculate RTS/CTS rate and duration if needed.\n \t */"
  },
  {
    "position": 211463,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 211524,
    "token_type": "comment",
    "token_value": "/*\n \t\t * CTS transmit rate is derived from the transmit rate\n \t\t * by looking in the h/w rate table.  We must also factor\n \t\t * in whether or not a short preamble is to be used.\n \t\t */"
  },
  {
    "position": 211712,
    "token_type": "comment",
    "token_value": "/* NB: cix is set above where RTS/CTS is enabled */"
  },
  {
    "position": 211782,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 211789,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 211790,
    "token_type": "string",
    "token_value": "cix not setup"
  },
  {
    "position": 211803,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 211848,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Compute the transmit duration based on the frame\n \t\t * size and the size of an ACK frame.  We call into the\n \t\t * HAL to do the computation since it depends on the\n \t\t * characteristics of the actual PHY being used.\n \t\t *\n \t\t * NB: CTS is assumed the same size as an ACK so we can\n \t\t *     use the precalculated ACK durations.\n \t\t */"
  },
  {
    "position": 212296,
    "token_type": "comment",
    "token_value": "/* SIFS + CTS */"
  },
  {
    "position": 212477,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 212480,
    "token_type": "comment",
    "token_value": "/* SIFS + ACK */"
  },
  {
    "position": 212594,
    "token_type": "comment",
    "token_value": "/* SIFS + CTS */"
  },
  {
    "position": 212776,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 212779,
    "token_type": "comment",
    "token_value": "/* SIFS + ACK */"
  },
  {
    "position": 212853,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Must disable multi-rate retry when using RTS/CTS.\n \t\t */"
  },
  {
    "position": 212966,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 213014,
    "token_type": "comment",
    "token_value": "/* FFXXX: need multi-skb version to dump entire FF */"
  },
  {
    "position": 213150,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 213159,
    "token_type": "comment",
    "token_value": "/*\n \t * Determine if a tx interrupt should be generated for\n \t * this descriptor.  We take a tx interrupt to reap\n \t * descriptors when the h/w hits an EOL condition or\n \t * when the descriptor is specifically marked to generate\n \t * an interrupt.  We periodically mark descriptors in this\n \t * way to ensure timely replenishing of the supply needed\n \t * for sending frames.  Deferring interrupts reduces system\n \t * load and potentially allows more concurrent work to be\n \t * done, but if done too aggressively, it can cause senders\n \t * to backup.\n \t *\n \t * NB: use >= to deal with sc_txintrperiod changing\n \t *     dynamically through sysctl.\n \t */"
  },
  {
    "position": 213947,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 213957,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 213958,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 214079,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 214157,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 214357,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 214358,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 214368,
    "token_type": "comment",
    "token_value": "/*\n \t * sc_txantenna == 0 means transmit diversity mode.\n \t * sc_txantenna == 1 or sc_txantenna == 2 means the user has selected\n \t * the first or second antenna port.\n \t * If the user has set the txantenna, use it for multicast frames too.\n \t */"
  },
  {
    "position": 214688,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 214739,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 214744,
    "token_type": "string",
    "token_value": "0x1"
  },
  {
    "position": 214807,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 214815,
    "token_type": "comment",
    "token_value": "/* Drop frame, if the rate is 0.\n \t\t * Otherwise this may lead to the continuous transmission of\n \t\t * noise. */"
  },
  {
    "position": 214938,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 214939,
    "token_type": "string",
    "token_value": "%s: invalid TX rate %u (%s: %u)"
  },
  {
    "position": 214970,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 214972,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215071,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215072,
    "token_type": "string",
    "token_value": "%s: set up txdesc: pktlen %d hdrlen %d"
  },
  {
    "position": 215111,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215116,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215117,
    "token_type": "string",
    "token_value": "atype %d txpower %d txrate %d try0 %d keyix %d ant %d flags %x"
  },
  {
    "position": 215180,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215185,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215186,
    "token_type": "string",
    "token_value": "ctsrate %d ctsdur %d icvlen %d ivlen %d comp %d"
  },
  {
    "position": 215233,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 215235,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 215294,
    "token_type": "string",
    "token_value": "60"
  },
  {
    "position": 215390,
    "token_type": "comment",
    "token_value": "/*\n \t * Formulate first tx descriptor with tx controls.\n \t */"
  },
  {
    "position": 215454,
    "token_type": "comment",
    "token_value": "/* XXX check return value? */"
  },
  {
    "position": 215531,
    "token_type": "comment",
    "token_value": "/* packet length */"
  },
  {
    "position": 215569,
    "token_type": "comment",
    "token_value": "/* header length */"
  },
  {
    "position": 215606,
    "token_type": "comment",
    "token_value": "/* Atheros packet type */"
  },
  {
    "position": 215662,
    "token_type": "string",
    "token_value": "60"
  },
  {
    "position": 215665,
    "token_type": "comment",
    "token_value": "/* txpower */"
  },
  {
    "position": 215702,
    "token_type": "comment",
    "token_value": "/* series 0 rate/tries */"
  },
  {
    "position": 215745,
    "token_type": "comment",
    "token_value": "/* key cache index */"
  },
  {
    "position": 215786,
    "token_type": "comment",
    "token_value": "/* antenna mode */"
  },
  {
    "position": 215822,
    "token_type": "comment",
    "token_value": "/* flags */"
  },
  {
    "position": 215853,
    "token_type": "comment",
    "token_value": "/* rts/cts rate */"
  },
  {
    "position": 215894,
    "token_type": "comment",
    "token_value": "/* rts/cts duration */"
  },
  {
    "position": 215935,
    "token_type": "comment",
    "token_value": "/* comp icv len */"
  },
  {
    "position": 215971,
    "token_type": "comment",
    "token_value": "/* comp iv len */"
  },
  {
    "position": 216005,
    "token_type": "comment",
    "token_value": "/* comp scheme */"
  },
  {
    "position": 216055,
    "token_type": "comment",
    "token_value": "/* record for post-processing */"
  },
  {
    "position": 216092,
    "token_type": "comment",
    "token_value": "/*\n \t * Setup the multi-rate retry state only when we're\n \t * going to use it.  This assumes ath_hal_setuptxdesc\n \t * initializes the descriptors (so we don't have to)\n \t * when the hardware supports multi-rate retry and\n \t * we don't use it.\n \t */"
  },
  {
    "position": 216458,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 216459,
    "token_type": "comment",
    "token_value": "ifndef ATH_SUPERG_FF"
  },
  {
    "position": 216496,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 216579,
    "token_type": "comment",
    "token_value": "/* segment length */"
  },
  {
    "position": 216617,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 216654,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 216686,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 216719,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t * if descriptor swapping is not enabled\n \t */"
  },
  {
    "position": 216866,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 216867,
    "token_type": "string",
    "token_value": "%s: Q%d: %08x %08x %08x %08x %08x %08x"
  },
  {
    "position": 216905,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 216907,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 216953,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217040,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217054,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 217060,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 217061,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 217066,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 217100,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 217133,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 217237,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217319,
    "token_type": "comment",
    "token_value": "/* segment length */"
  },
  {
    "position": 217355,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 217402,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 217432,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 217466,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t\t * if descriptor swapping is not enabled\n \t\t */"
  },
  {
    "position": 217617,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 217618,
    "token_type": "string",
    "token_value": "%s: Q%d: (ds)%p (lk)%08x (d)%08x (c0)%08x (c1)%08x %08x %08x"
  },
  {
    "position": 217678,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 217680,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 217724,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217817,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217831,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 217847,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 217894,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 217978,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 218016,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 218109,
    "token_type": "comment",
    "token_value": "/* segment length */"
  },
  {
    "position": 218147,
    "token_type": "comment",
    "token_value": "/* first segment */"
  },
  {
    "position": 218195,
    "token_type": "comment",
    "token_value": "/* last segment */"
  },
  {
    "position": 218227,
    "token_type": "comment",
    "token_value": "/* first descriptor */"
  },
  {
    "position": 218263,
    "token_type": "comment",
    "token_value": "/* NB: The desc swap function becomes void, \n \t\t \t * if descriptor swapping is not enabled\n \t\t \t */"
  },
  {
    "position": 218420,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 218421,
    "token_type": "string",
    "token_value": "%s: Q%d: %08x %08x %08x %08x %08x %08x"
  },
  {
    "position": 218459,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 218461,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 218506,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 218597,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 218611,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 218626,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 218627,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 218672,
    "token_type": "comment",
    "token_value": "/* must lock against interrupt-time processing (i.e., not just tasklet) */"
  },
  {
    "position": 218811,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 218812,
    "token_type": "string",
    "token_value": "%s: Qing U-APSD data frame for node %s"
  },
  {
    "position": 218851,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 218853,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 219011,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 219039,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 219089,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 219147,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 219148,
    "token_type": "string",
    "token_value": "%s: %p<%s> refcnt %d"
  },
  {
    "position": 219168,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 219170,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 219341,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 219345,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 219346,
    "token_type": "comment",
    "token_value": "undef MIN"
  },
  {
    "position": 219362,
    "token_type": "comment",
    "token_value": "/*\n  * Process completed xmit descriptors from the specified queue.\n  * Should only be called from tasklet context\n  */"
  },
  {
    "position": 219519,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 219541,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 219567,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 219601,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 219630,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 219660,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 219696,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 219767,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 219805,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 219843,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 219844,
    "token_type": "string",
    "token_value": "%s: tx queue %d (0x%x), link %p"
  },
  {
    "position": 219875,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 219877,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 220035,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 220036,
    "token_type": "string",
    "token_value": "%s: reaping U-APSD txq"
  },
  {
    "position": 220058,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 220060,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 220086,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 220210,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 220213,
    "token_type": "comment",
    "token_value": "/* reset periodic desc intr count */"
  },
  {
    "position": 220439,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 220440,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 220498,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 220536,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 220537,
    "token_type": "string",
    "token_value": "%s: frame's last desc: %p"
  },
  {
    "position": 220562,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 220564,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 220587,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 220588,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 220615,
    "token_type": "comment",
    "token_value": "/* NB: last descriptor */"
  },
  {
    "position": 220642,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 220643,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 220690,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 220691,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 220792,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 220793,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 221165,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 221287,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 221288,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 221334,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 221382,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 221383,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 221808,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 221809,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 221855,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 221904,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 221905,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 222140,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 222141,
    "token_type": "string",
    "token_value": "%s: frame in SP retried out, possible EOSP stranded!!!"
  },
  {
    "position": 222195,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 222197,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 222579,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Hand the descriptor to the rate control algorithm\n \t\t\t * if the frame wasn't dropped for filtering or sent\n \t\t\t * w/o waiting for an ack.  In those cases the rssi\n \t\t\t * and retry counts will be meaningless.\n \t\t\t */"
  },
  {
    "position": 222859,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 222909,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 222962,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Reclaim reference to node.\n \t\t\t *\n \t\t\t * NB: the node may be reclaimed here if, for example\n \t\t\t *     this is a DEAUTH message that was sent and the\n \t\t\t *     node was timed out due to inactivity.\n \t\t\t */"
  },
  {
    "position": 223364,
    "token_type": "comment",
    "token_value": "/* detect EOSP for this node */"
  },
  {
    "position": 223407,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 223441,
    "token_type": "symbol",
    "token_value": "ieee80211_qosframe"
  },
  {
    "position": 223528,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 223529,
    "token_type": "string",
    "token_value": "Processing U-APSD txq for ath_buf with no node!"
  },
  {
    "position": 223576,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 223578,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 223602,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 223663,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 223664,
    "token_type": "string",
    "token_value": "%s: EOSP detected for node (%s) on desc %p"
  },
  {
    "position": 223706,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 223708,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 223877,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 223913,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 224074,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 224149,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 224179,
    "token_type": "symbol",
    "token_value": "ieee80211_frame"
  },
  {
    "position": 224341,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 224342,
    "token_type": "string",
    "token_value": "%s: h/w assigned sequence number is not sane (%d), ignoring it"
  },
  {
    "position": 224404,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 224406,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 224507,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 224508,
    "token_type": "string",
    "token_value": "%s: updating frame's sequence number from %d to %d"
  },
  {
    "position": 224558,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 224560,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 224618,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 224744,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 224854,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 224901,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 224902,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 224938,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 225063,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225064,
    "token_type": "string",
    "token_value": "%s: free skb %p"
  },
  {
    "position": 225079,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 225081,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225167,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 225250,
    "token_type": "string",
    "token_value": "-1"
  },
  {
    "position": 225375,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225376,
    "token_type": "string",
    "token_value": "%s: free skb %p"
  },
  {
    "position": 225391,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 225393,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225499,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 225503,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 225504,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 225543,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225544,
    "token_type": "string",
    "token_value": "%s: free skb %p"
  },
  {
    "position": 225559,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 225561,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225635,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 225636,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 225979,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 225980,
    "token_type": "string",
    "token_value": "%s: tx tasklet restart the queue"
  },
  {
    "position": 226012,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 226014,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 226058,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 226086,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 226185,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 226186,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 226208,
    "token_type": "comment",
    "token_value": "/* flush ff staging queue if buffer low */"
  },
  {
    "position": 226293,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 226301,
    "token_type": "comment",
    "token_value": "/* NB: consider only flushing a preset number based on age. */"
  },
  {
    "position": 226428,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 226429,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 226435,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 226499,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 226544,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 226609,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 226628,
    "token_type": "comment",
    "token_value": "/*\n  * Deferred processing of transmit interrupt; special-cased\n  * for a single hardware transmit queue (e.g. 5210 and 5211).\n  */"
  },
  {
    "position": 226821,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 226847,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 226875,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 226931,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 226970,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 227154,
    "token_type": "comment",
    "token_value": "/*\n  * Deferred processing of transmit interrupt; special-cased\n  * for four hardware queues, 0-3 (e.g. 5212 w/ WME support).\n  */"
  },
  {
    "position": 227349,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 227375,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 227403,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 227434,
    "token_type": "comment",
    "token_value": "/*\n \t * Process each active queue.\n \t */"
  },
  {
    "position": 227502,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 227541,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 227573,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 227612,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 227644,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 227683,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 227715,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 227754,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 227848,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 227849,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 227976,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 227977,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 228183,
    "token_type": "comment",
    "token_value": "/*\n  * Deferred processing of transmit interrupt.\n  */"
  },
  {
    "position": 228296,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 228322,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 228350,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 228390,
    "token_type": "comment",
    "token_value": "/*\n \t * Process each active queue.\n \t */"
  },
  {
    "position": 228442,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 228571,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 228572,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 228699,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 228700,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 228832,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 228861,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 228924,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 228925,
    "token_type": "string",
    "token_value": "%s: %sRUNNING %svalid"
  },
  {
    "position": 228946,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 228948,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 228993,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 228994,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 228998,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 228999,
    "token_type": "string",
    "token_value": "!"
  },
  {
    "position": 229000,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 229023,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 229024,
    "token_type": "string",
    "token_value": "in"
  },
  {
    "position": 229026,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 229030,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 229031,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 229143,
    "token_type": "comment",
    "token_value": "/* Avoid taking a semaphore in ath_init */"
  },
  {
    "position": 229196,
    "token_type": "comment",
    "token_value": "/* \n  * Context: softIRQ and hwIRQ\n  */"
  },
  {
    "position": 229273,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 229295,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 229321,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 229355,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 229377,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 229392,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 229393,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 229422,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 229438,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 229439,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 229458,
    "token_type": "comment",
    "token_value": "/*\n \t * NB: this assumes output has been stopped and\n \t *     we do not need to block ath_tx_tasklet\n \t */"
  },
  {
    "position": 229786,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 229787,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 229913,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 229914,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 229920,
    "token_type": "comment",
    "token_value": "/* AR_DEBUG */"
  },
  {
    "position": 230092,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 230096,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 230097,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 230298,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 230299,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 230305,
    "token_type": "comment",
    "token_value": "/* ATH_SUPERG_FF */"
  },
  {
    "position": 230576,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 230598,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 230624,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 230729,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 230730,
    "token_type": "string",
    "token_value": "%s: tx queue [%u] 0x%x, link %p"
  },
  {
    "position": 230761,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 230763,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 230856,
    "token_type": "comment",
    "token_value": "/*\n  * Drain the transmit queues and reclaim resources.\n  */"
  },
  {
    "position": 230951,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 230978,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 231016,
    "token_type": "comment",
    "token_value": "/* XXX return value */"
  },
  {
    "position": 231143,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 231144,
    "token_type": "string",
    "token_value": "%s: beacon queue 0x%x"
  },
  {
    "position": 231165,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 231167,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 231233,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 231410,
    "token_type": "comment",
    "token_value": "/* XXX move to callers */"
  },
  {
    "position": 231447,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 231554,
    "token_type": "comment",
    "token_value": "/*\n  * Disable the receive h/w in preparation for a reset.\n  */"
  },
  {
    "position": 231652,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 231671,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 231672,
    "token_type": "comment",
    "token_value": "define\tPA2DESC(_sc, _pa) \\"
  },
  {
    "position": 231699,
    "token_type": "comment",
    "token_value": "((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc + \\"
  },
  {
    "position": 231759,
    "token_type": "comment",
    "token_value": "((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))"
  },
  {
    "position": 231813,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 231884,
    "token_type": "comment",
    "token_value": "/* disable PCU */"
  },
  {
    "position": 231928,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 231932,
    "token_type": "comment",
    "token_value": "/* clear recv filter */"
  },
  {
    "position": 231983,
    "token_type": "comment",
    "token_value": "/* disable DMA engine */"
  },
  {
    "position": 232017,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 232023,
    "token_type": "comment",
    "token_value": "/* 3 ms is long enough for 1 frame */"
  },
  {
    "position": 232092,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 232093,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 232178,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 232203,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 232204,
    "token_type": "string",
    "token_value": "ath_stoprecv: rx queue 0x%x, link %p"
  },
  {
    "position": 232240,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 232242,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 232346,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 232591,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 232592,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 232623,
    "token_type": "comment",
    "token_value": "/* just in case */"
  },
  {
    "position": 232643,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 232644,
    "token_type": "comment",
    "token_value": "undef PA2DESC"
  },
  {
    "position": 232664,
    "token_type": "comment",
    "token_value": "/*\n  * Enable the receive h/w following a reset.\n  */"
  },
  {
    "position": 232752,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 232779,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 232813,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 232852,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 232869,
    "token_type": "comment",
    "token_value": "/*\n \t * Cisco's VPN software requires that drivers be able to\n \t * receive encapsulated frames that are larger than the MTU.\n \t * Since we can't be sure how large a frame we'll get, setup\n \t * to handle the larges on possible.\n \t */"
  },
  {
    "position": 233103,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 233104,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 233188,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 233189,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 233261,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 233262,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 233298,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 233299,
    "token_type": "string",
    "token_value": "%s: mtu %u cachelsz %u rxbufsize %u"
  },
  {
    "position": 233334,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 233336,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 233549,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 233700,
    "token_type": "comment",
    "token_value": "/* enable recv descriptors */"
  },
  {
    "position": 233753,
    "token_type": "comment",
    "token_value": "/* set filters, etc. */"
  },
  {
    "position": 233805,
    "token_type": "comment",
    "token_value": "/* re-enable PCU/DMA engine */"
  },
  {
    "position": 233845,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 233854,
    "token_type": "comment",
    "token_value": "/*\n  * Flush skb's allocate for receive.\n  */"
  },
  {
    "position": 233935,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 233962,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 234215,
    "token_type": "comment",
    "token_value": "/*\n  * Update internal state after a channel change.\n  */"
  },
  {
    "position": 234310,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 234332,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 234369,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 234409,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 234570,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 234571,
    "token_type": "comment",
    "token_value": "ifdef notyet"
  },
  {
    "position": 234586,
    "token_type": "comment",
    "token_value": "/*\n \t * Update BPF state.\n \t */"
  },
  {
    "position": 234792,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 234793,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 234829,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 234886,
    "token_type": "comment",
    "token_value": "/*\n  * Set/change channels.  If the channel is really being changed,\n  * it's done by resetting the chip.  To accomplish this we must\n  * first cleanup any pending DMA, then restart stuff after a la\n  * ath_init.\n  */"
  },
  {
    "position": 235137,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 235159,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 235196,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 235230,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 235270,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 235342,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 235349,
    "token_type": "comment",
    "token_value": "/*\n \t * Convert to a HAL channel description with\n \t * the flags constrained to reflect the current\n \t * operating mode.\n \t */"
  },
  {
    "position": 235581,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 235588,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 235589,
    "token_type": "string",
    "token_value": "bogus channel %u/0x%x"
  },
  {
    "position": 235610,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 235683,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 235684,
    "token_type": "string",
    "token_value": "%s: %u (%u MHz) -> %u (%u MHz)"
  },
  {
    "position": 235714,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 235716,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 235915,
    "token_type": "comment",
    "token_value": "/* check if it is turbo mode switch */"
  },
  {
    "position": 236123,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 236261,
    "token_type": "comment",
    "token_value": "/*\n \t\t * To switch channels clear any pending DMA operations;\n \t\t * wait long enough for the RX fifo to drain, reset the\n \t\t * hardware at the new frequency, and then re-enable\n \t\t * the relevant bits of the h/w.\n \t\t */"
  },
  {
    "position": 236504,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 236508,
    "token_type": "comment",
    "token_value": "/* disable interrupts */"
  },
  {
    "position": 236554,
    "token_type": "comment",
    "token_value": "/* clear pending tx frames */"
  },
  {
    "position": 236605,
    "token_type": "comment",
    "token_value": "/* turn off frame recv */"
  },
  {
    "position": 236638,
    "token_type": "comment",
    "token_value": "/* Set coverage class */"
  },
  {
    "position": 236757,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 236760,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 236834,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 236921,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 236922,
    "token_type": "string",
    "token_value": "%s: %s: unable to reset channel %u (%u MHz)"
  },
  {
    "position": 236966,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 236973,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 236974,
    "token_type": "string",
    "token_value": "flags 0x%x '%s' (HAL status %u)"
  },
  {
    "position": 237005,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 237007,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 237266,
    "token_type": "comment",
    "token_value": "/* Turn off Interference Mitigation in non-STA modes */"
  },
  {
    "position": 237440,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 237441,
    "token_type": "string",
    "token_value": "%s: disabling interference mitigation (ANI)"
  },
  {
    "position": 237484,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 237486,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 237526,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 237588,
    "token_type": "comment",
    "token_value": "/* update tx power state */"
  },
  {
    "position": 237621,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Re-enable rx framework.\n \t\t */"
  },
  {
    "position": 237689,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 237705,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 237706,
    "token_type": "string",
    "token_value": "%s: %s: unable to restart recv logic"
  },
  {
    "position": 237742,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 237744,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 237801,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Change channels and update the h/w rate map\n \t\t * if we're switching; e.g. 11a to 11b/g.\n \t\t */"
  },
  {
    "position": 238121,
    "token_type": "string",
    "token_value": "120"
  },
  {
    "position": 238131,
    "token_type": "comment",
    "token_value": "/* set the timeout to normal */"
  },
  {
    "position": 238301,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 238302,
    "token_type": "string",
    "token_value": "%s: %s: start dfs wait period"
  },
  {
    "position": 238331,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 238333,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 238388,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 238672,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 238723,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 238735,
    "token_type": "comment",
    "token_value": "/*\n \t\t * re configure beacons when it is a turbo mode switch.\n \t\t * HW seems to turn off beacons during turbo mode switch.\n \t\t */"
  },
  {
    "position": 238939,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Re-enable interrupts.\n \t\t */"
  },
  {
    "position": 239028,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 239037,
    "token_type": "comment",
    "token_value": "/*\n  * Periodically recalibrate the PHY to account\n  * for temperature/environment changes.\n  */"
  },
  {
    "position": 239193,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 239219,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 239247,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 239283,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 239317,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 239491,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 239492,
    "token_type": "string",
    "token_value": "%s: channel %u/%x"
  },
  {
    "position": 239509,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 239511,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 239643,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Rfgain is out of bounds, reset the chip\n \t\t * to load new gain values.\n \t\t */"
  },
  {
    "position": 239881,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 239882,
    "token_type": "string",
    "token_value": "%s: calibration of channel %u failed"
  },
  {
    "position": 239918,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 239920,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 240155,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 240156,
    "token_type": "string",
    "token_value": "%s: unable to allocate channel table"
  },
  {
    "position": 240192,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 240194,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 240303,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 240339,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 240383,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 240419,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 241034,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 241064,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 241103,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 241139,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 241187,
    "token_type": "comment",
    "token_value": "/* XXX calibration timer? */"
  },
  {
    "position": 241238,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 241263,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 241373,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 241410,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 241411,
    "token_type": "string",
    "token_value": "%s: RX filter 0x%x bssid %s aid 0"
  },
  {
    "position": 241444,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 241446,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 241541,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 241571,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 241610,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 241646,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 241712,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 241872,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 241873,
    "token_type": "string",
    "token_value": "%s: RX filter 0x%x bssid %s aid 0x%x"
  },
  {
    "position": 241909,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 241911,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 242029,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 242059,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 242098,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 242172,
    "token_type": "comment",
    "token_value": "/*\n \t * If we are returning to our bss channel then mark state\n \t * so the next recv'd beacon's tsf will be used to sync the\n \t * beacon timers.  Note that since we only hear beacons in\n \t * sta/ibss mode this has no effect in other operating modes.\n \t */"
  },
  {
    "position": 242511,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 242562,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 242593,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 242689,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 242746,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 242801,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 242899,
    "token_type": "comment",
    "token_value": "/*\n  * Context: softIRQ and process context\n  */"
  },
  {
    "position": 242981,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 243050,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 243088,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 243128,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 243167,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 243203,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 243237,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 243311,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 243323,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 243402,
    "token_type": "comment",
    "token_value": "/* IEEE80211_S_INIT */"
  },
  {
    "position": 243442,
    "token_type": "comment",
    "token_value": "/* IEEE80211_S_SCAN */"
  },
  {
    "position": 243482,
    "token_type": "comment",
    "token_value": "/* IEEE80211_S_AUTH */"
  },
  {
    "position": 243524,
    "token_type": "comment",
    "token_value": "/* IEEE80211_S_ASSOC */"
  },
  {
    "position": 243565,
    "token_type": "comment",
    "token_value": "/* IEEE80211_S_RUN */"
  },
  {
    "position": 243625,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 243626,
    "token_type": "string",
    "token_value": "%s: %s: %s -> %s"
  },
  {
    "position": 243642,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 243644,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 243774,
    "token_type": "comment",
    "token_value": "/* periodic calibration timer */"
  },
  {
    "position": 243848,
    "token_type": "comment",
    "token_value": "/* set LED */"
  },
  {
    "position": 243889,
    "token_type": "comment",
    "token_value": "/* before we do anything else */"
  },
  {
    "position": 243963,
    "token_type": "comment",
    "token_value": "/*\n \t\t * if there is no VAP left in RUN state\n \t\t * disable beacon interrupts.\n \t\t */"
  },
  {
    "position": 244254,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Disable interrupts.\n \t\t\t */"
  },
  {
    "position": 244370,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 244381,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Notify the rate control algorithm.\n \t\t */"
  },
  {
    "position": 244849,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 244885,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 244886,
    "token_type": "string",
    "token_value": "%s: RX filter 0x%x bssid %s aid 0x%x"
  },
  {
    "position": 244922,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 244924,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 245214,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 245334,
    "token_type": "comment",
    "token_value": "/*\n \t * Notify the rate control algorithm so rates\n \t * are setup should ath_beacon_alloc be called.\n \t */"
  },
  {
    "position": 245534,
    "token_type": "comment",
    "token_value": "/* nothing to do */"
  },
  {
    "position": 245633,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 245634,
    "token_type": "string",
    "token_value": "%s(RUN): ic_flags=0x%08x iv=%d bssid=%s"
  },
  {
    "position": 245674,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 245680,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 245681,
    "token_type": "string",
    "token_value": "capinfo=0x%04x chan=%d"
  },
  {
    "position": 245703,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 245705,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 245907,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_HOSTAP"
  },
  {
    "position": 245935,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_IBSS"
  },
  {
    "position": 245957,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Allocate and setup the beacon frame.\n \t\t\t *\n \t\t\t * Stop any previous beacon DMA.  This may be\n \t\t\t * necessary, for example, when an ibss merge\n \t\t\t * causes reconfiguration; there will be a state\n \t\t\t * transition from RUN->RUN that means we may\n \t\t\t * be called with beacon transmission active.\n \t\t\t */"
  },
  {
    "position": 246326,
    "token_type": "comment",
    "token_value": "/* Set default key index for static wep case */"
  },
  {
    "position": 246473,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 246719,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 246741,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * if the turbo flags have changed, then beacon and turbo\n \t\t\t * need to be reconfigured.\n \t\t\t */"
  },
  {
    "position": 247012,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 247019,
    "token_type": "comment",
    "token_value": "/* \n \t\t\t * if it is the first AP VAP moving to RUN state then beacon \n \t\t\t * needs to be reconfigured.\n \t\t\t */"
  },
  {
    "position": 247352,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 247374,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_STA"
  },
  {
    "position": 247392,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 247393,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 247419,
    "token_type": "comment",
    "token_value": "/* have we negotiated compression? */"
  },
  {
    "position": 247574,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 247575,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 247585,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Allocate a key cache slot to the station.\n \t\t\t */"
  },
  {
    "position": 247685,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t * Record negotiated dynamic turbo state for\n \t\t\t * use by rate control modules.\n \t\t\t */"
  },
  {
    "position": 247852,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 247874,
    "token_type": "symbol",
    "token_value": "IEEE80211_M_WDS"
  },
  {
    "position": 247969,
    "token_type": "comment",
    "token_value": "/* XXX no rate negotiation; just dup */"
  },
  {
    "position": 248061,
    "token_type": "comment",
    "token_value": "/* Depending on the sequence of bringing up devices\n \t\t\t\t * it's possible the rates of the root bss isn't\n \t\t\t\t * filled yet. \n \t\t\t\t */"
  },
  {
    "position": 248281,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 248292,
    "token_type": "comment",
    "token_value": "/* Fill in the rates based on our own rates\n \t\t\t\t\t * we rely on the rate selection mechanism\n \t\t\t\t\t * to find out which rates actually work!\n \t\t\t\t\t */"
  },
  {
    "position": 248481,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 248544,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Configure the beacon and sleep timers.\n \t\t */"
  },
  {
    "position": 248713,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 248726,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Reset rssi stats; maybe not the best place...\n \t\t */"
  },
  {
    "position": 248959,
    "token_type": "comment",
    "token_value": "/* \n \t\t * if it is a DFS channel and has not been checked for radar \n \t\t * do not let the 80211 state machine to go to RUN state.\n \t\t *\n \t\t */"
  },
  {
    "position": 249172,
    "token_type": "comment",
    "token_value": "/* push the VAP to RUN state once DFS is cleared */"
  },
  {
    "position": 249257,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 249258,
    "token_type": "string",
    "token_value": "%s: %s: VAP  -> DFS_WAIT"
  },
  {
    "position": 249282,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 249284,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 249340,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 249355,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 249560,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 249596,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 249597,
    "token_type": "string",
    "token_value": "%s: %s: VAP  out of DFS_WAIT"
  },
  {
    "position": 249625,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 249627,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 249665,
    "token_type": "comment",
    "token_value": "/*\n \t\t *  XXXX\n \t\t * if it is SCAN state, disable beacons. \n \t\t */"
  },
  {
    "position": 249898,
    "token_type": "comment",
    "token_value": "/* need to reconfigure the beacons when it moves to RUN */"
  },
  {
    "position": 249978,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 250012,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 250015,
    "token_type": "comment",
    "token_value": "/* reset the dfs wait flag */"
  },
  {
    "position": 250059,
    "token_type": "comment",
    "token_value": "/*\n \t * Invoke the parent method to complete the work.\n \t */"
  },
  {
    "position": 250170,
    "token_type": "comment",
    "token_value": "/*\n \t * Finally, start any timers.\n \t */"
  },
  {
    "position": 250249,
    "token_type": "comment",
    "token_value": "/* start periodic recalibration timer */"
  },
  {
    "position": 250361,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 250362,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 250605,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 250606,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 250668,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 250677,
    "token_type": "comment",
    "token_value": "/* set the timeout to normal */"
  },
  {
    "position": 250731,
    "token_type": "comment",
    "token_value": "/*\n  * periodically checks for the HAL to set\n  * CHANNEL_DFS_CLEAR flag on current channel.\n  * if the flag is set and a VAP is waiting for it, push \n  * transition the VAP to RUN state.\n  *\n  * Context: Timer (softIRQ)\n  */"
  },
  {
    "position": 251026,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 251050,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 251078,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 251118,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 251157,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 251234,
    "token_type": "comment",
    "token_value": "/* if still need to wait */"
  },
  {
    "position": 251527,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 251588,
    "token_type": "symbol",
    "token_value": "ath_vap"
  },
  {
    "position": 251653,
    "token_type": "comment",
    "token_value": "/* re alloc beacons to update new channel info */"
  },
  {
    "position": 251783,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 251794,
    "token_type": "comment",
    "token_value": "/* XXX */"
  },
  {
    "position": 251859,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 251860,
    "token_type": "string",
    "token_value": "%s: %s: VAP DFS_WAIT -> RUN"
  },
  {
    "position": 251887,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 251889,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 251964,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 251973,
    "token_type": "comment",
    "token_value": "/* start calibration timer */"
  },
  {
    "position": 252070,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 252071,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 252159,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 252246,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 252247,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 252280,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 252297,
    "token_type": "comment",
    "token_value": "/* start the device */"
  },
  {
    "position": 252372,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 252380,
    "token_type": "comment",
    "token_value": "/* set the timeout to normal */"
  },
  {
    "position": 252426,
    "token_type": "comment",
    "token_value": "/* fire the timer again */"
  },
  {
    "position": 252626,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 252627,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 252650,
    "token_type": "comment",
    "token_value": "/* Enable/Disable de-compression mask for given node.\n  * The routine is invoked after addition or deletion of the\n  * key.\n  */"
  },
  {
    "position": 252813,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 252839,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 252912,
    "token_type": "comment",
    "token_value": "/* Set up decompression engine for this node. */"
  },
  {
    "position": 252997,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 253033,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 253034,
    "token_type": "comment",
    "token_value": "define\tIEEE80211_KEY_XR\t(IEEE80211_KEY_XMIT | IEEE80211_KEY_RECV)"
  },
  {
    "position": 253109,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 253150,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 253201,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 253273,
    "token_type": "comment",
    "token_value": "/* Have we negotiated compression? */"
  },
  {
    "position": 253378,
    "token_type": "comment",
    "token_value": "/* No valid key? */"
  },
  {
    "position": 253472,
    "token_type": "comment",
    "token_value": "/* Setup decompression mask.\n \t\t * For TKIP and split MIC case, recv. keyindex is at 32 offset\n \t\t * from tx key.\n \t\t */"
  },
  {
    "position": 253844,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 254016,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 254178,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 254252,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 254253,
    "token_type": "comment",
    "token_value": "undef IEEE80211_KEY_XR"
  },
  {
    "position": 254280,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 254281,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 254290,
    "token_type": "comment",
    "token_value": "/*\n  * Allocate a key cache slot to the station so we can\n  * setup a mapping from key index to node. The key cache\n  * slot is needed for managing antenna state and for\n  * compression when stations do not use crypto.  We do\n  * it unilaterally here; if crypto is employed this slot\n  * will be reassigned.\n  */"
  },
  {
    "position": 254645,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 254677,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 254718,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 254871,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Key cache is full; we'll fall back to doing\n \t\t * the more expensive lookup in software.  Note\n \t\t * this also means no h/w compression.\n \t\t */"
  },
  {
    "position": 255027,
    "token_type": "comment",
    "token_value": "/* XXX msg+statistic */"
  },
  {
    "position": 255113,
    "token_type": "comment",
    "token_value": "/* NB: this will create a pass-thru key entry */"
  },
  {
    "position": 255231,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 255232,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_COMP"
  },
  {
    "position": 255257,
    "token_type": "comment",
    "token_value": "/* Enable de-compression logic */"
  },
  {
    "position": 255313,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 255318,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 255319,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 255348,
    "token_type": "comment",
    "token_value": "/* Setup WEP key for the station if compression is negotiated.\n  * When station and AP are using same default key index, use single key\n  * cache entry for receive and transmit, else two key cache entries are\n  * created. One for receive with MAC address of station and one for transmit\n  * with NULL mac address. On receive key cache entry de-compression mask\n  * is enabled.\n  */"
  },
  {
    "position": 255775,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 255807,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 255848,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 255880,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 255911,
    "token_type": "symbol",
    "token_value": "ieee80211_key"
  },
  {
    "position": 256045,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256048,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256051,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256054,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256057,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256060,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 256125,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 256126,
    "token_type": "string",
    "token_value": "got invalid node key index 0x%x"
  },
  {
    "position": 256157,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 256240,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 256241,
    "token_type": "string",
    "token_value": "got invalid vap def key index 0x%x"
  },
  {
    "position": 256275,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 256303,
    "token_type": "comment",
    "token_value": "/* Allocate a key slot first */"
  },
  {
    "position": 256573,
    "token_type": "comment",
    "token_value": "/* Do we need separate rx key? */"
  },
  {
    "position": 257166,
    "token_type": "comment",
    "token_value": "/* Remember receive key offset */"
  },
  {
    "position": 257245,
    "token_type": "comment",
    "token_value": "/* Setup xmit key */"
  },
  {
    "position": 257489,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 257593,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 257622,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 257862,
    "token_type": "comment",
    "token_value": "/* Setup recv key */"
  },
  {
    "position": 258032,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 258137,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 258257,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 258497,
    "token_type": "comment",
    "token_value": "/* Create a keycache entry for given node in clearcase as well as static wep.\n  * Handle compression state if required.\n  * For non clearcase/static wep case, the key is plumbed by hostapd.\n  */"
  },
  {
    "position": 258736,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 258758,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 258790,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 258939,
    "token_type": "comment",
    "token_value": "/* Only for clearcase and WEP case */"
  },
  {
    "position": 259024,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 259136,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 259213,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 259214,
    "token_type": "string",
    "token_value": "new node with a ucast key already setup (keyix %u)"
  },
  {
    "position": 259264,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 259310,
    "token_type": "comment",
    "token_value": "/* NB: 5210 has no passthru/clr key support */"
  },
  {
    "position": 259479,
    "token_type": "comment",
    "token_value": "/*\n  * Setup driver-specific state for a newly associated node.\n  * Note that we're called also on a re-associate, the isnew\n  * param tells us if this is the first time or not.\n  */"
  },
  {
    "position": 259696,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 259739,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 259778,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 259819,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 259912,
    "token_type": "comment",
    "token_value": "/* are we supporting compression? */"
  },
  {
    "position": 260065,
    "token_type": "comment",
    "token_value": "/* disable compression for TKIP */"
  },
  {
    "position": 260320,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 260321,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 260347,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 260362,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 260532,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 260574,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 260575,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 260622,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 260701,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 260737,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 260777,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 260956,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 260957,
    "token_type": "string",
    "token_value": "%s: unable to allocate channel table"
  },
  {
    "position": 260993,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 260995,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 261283,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 261284,
    "token_type": "string",
    "token_value": "%s: unable to collect channel list from HAL;"
  },
  {
    "position": 261329,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 261335,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 261336,
    "token_type": "string",
    "token_value": "regdomain likely %u country code %u"
  },
  {
    "position": 261371,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 261373,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 261442,
    "token_type": "comment",
    "token_value": "/*\n \t * Convert HAL channels to ieee80211 ones.\n \t */"
  },
  {
    "position": 261507,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 261569,
    "token_type": "symbol",
    "token_value": "ieee80211_channel"
  },
  {
    "position": 261805,
    "token_type": "comment",
    "token_value": "/* dBm */"
  },
  {
    "position": 261859,
    "token_type": "comment",
    "token_value": "/* 1/4 dBm */"
  },
  {
    "position": 261917,
    "token_type": "comment",
    "token_value": "/* 1/4 dBm */"
  },
  {
    "position": 261985,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 262051,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 262075,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 262115,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 262124,
    "token_type": "comment",
    "token_value": "/*\n  * Turn the LED off: flip the pin and then set a timer so no\n  * update will happen for the specified duration.\n  */"
  },
  {
    "position": 262302,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 262326,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 262539,
    "token_type": "comment",
    "token_value": "/*\n  * Blink the LED according to the specified on/off times.\n  */"
  },
  {
    "position": 262641,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 262705,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 262706,
    "token_type": "string",
    "token_value": "%s: on %u off %u"
  },
  {
    "position": 262722,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 262724,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 262826,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 263007,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 263067,
    "token_type": "comment",
    "token_value": "/* time of last event */"
  },
  {
    "position": 263116,
    "token_type": "comment",
    "token_value": "/* don't interrupt active blink */"
  },
  {
    "position": 263188,
    "token_type": "symbol",
    "token_value": "ATH_LED_POLL"
  },
  {
    "position": 263236,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 263263,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 263292,
    "token_type": "symbol",
    "token_value": "ATH_LED_TX"
  },
  {
    "position": 263418,
    "token_type": "symbol",
    "token_value": "ATH_LED_RX"
  },
  {
    "position": 263595,
    "token_type": "symbol",
    "token_value": "ieee80211_node"
  },
  {
    "position": 263678,
    "token_type": "comment",
    "token_value": "/* XXX: this function needs some locking to avoid being called twice/interrupted */"
  },
  {
    "position": 263800,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 263827,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 263867,
    "token_type": "symbol",
    "token_value": "ieee80211vap"
  },
  {
    "position": 263902,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 263952,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 263983,
    "token_type": "string",
    "token_value": "9999"
  },
  {
    "position": 264017,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 264024,
    "token_type": "comment",
    "token_value": "/*\n \t * Find the maxtxpow of the card and regulatory constraints\n \t */"
  },
  {
    "position": 264319,
    "token_type": "comment",
    "token_value": "/*\n \t * Make sure the VAP's change is within limits, clamp it otherwise\n  \t */"
  },
  {
    "position": 264537,
    "token_type": "comment",
    "token_value": "/*\n \t * Search for the VAP that needs a txpow change, if any\n \t */"
  },
  {
    "position": 264651,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 264652,
    "token_type": "comment",
    "token_value": "ifdef ATH_CAP_TPC"
  },
  {
    "position": 264863,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 264864,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 264997,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 264998,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 265073,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 265074,
    "token_type": "comment",
    "token_value": "ifdef ATH_CAP_TPC"
  },
  {
    "position": 265187,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 265188,
    "token_type": "comment",
    "token_value": "else"
  },
  {
    "position": 265288,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 265289,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 265304,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 265305,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 265363,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 265392,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 265428,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 265462,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 265530,
    "token_type": "symbol",
    "token_value": "ieee80211_rateset"
  },
  {
    "position": 265683,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 265762,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 265763,
    "token_type": "string",
    "token_value": "%s: rate table too small (%u > %u)"
  },
  {
    "position": 265797,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 265799,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 265972,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 266075,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 266082,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 266083,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 266092,
    "token_type": "comment",
    "token_value": "/* Setup half/quarter rate table support */"
  },
  {
    "position": 266176,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 266205,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 266241,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 266275,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 266343,
    "token_type": "symbol",
    "token_value": "ieee80211_rateset"
  },
  {
    "position": 266590,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 266591,
    "token_type": "string",
    "token_value": "%s: rate table too small (%u > %u)"
  },
  {
    "position": 266625,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 266627,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 266814,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 267128,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 267129,
    "token_type": "string",
    "token_value": "%s: rate table too small (%u > %u)"
  },
  {
    "position": 267163,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 267165,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 267355,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 267495,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 267536,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 267572,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 267606,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 267674,
    "token_type": "symbol",
    "token_value": "ieee80211_rateset"
  },
  {
    "position": 267743,
    "token_type": "symbol",
    "token_value": "IEEE80211_MODE_11A"
  },
  {
    "position": 267844,
    "token_type": "symbol",
    "token_value": "IEEE80211_MODE_11B"
  },
  {
    "position": 267945,
    "token_type": "symbol",
    "token_value": "IEEE80211_MODE_11G"
  },
  {
    "position": 268046,
    "token_type": "symbol",
    "token_value": "IEEE80211_MODE_TURBO_A"
  },
  {
    "position": 268153,
    "token_type": "symbol",
    "token_value": "IEEE80211_MODE_TURBO_G"
  },
  {
    "position": 268293,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 268294,
    "token_type": "string",
    "token_value": "%s: invalid mode %u"
  },
  {
    "position": 268313,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 268315,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 268349,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 268411,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 268496,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 268497,
    "token_type": "string",
    "token_value": "%s: rate table too small (%u > %u)"
  },
  {
    "position": 268531,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 268533,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 268709,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 268812,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 268856,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 268904,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 268905,
    "token_type": "comment",
    "token_value": "define\tN(a)\t((int)(sizeof(a)"
  },
  {
    "position": 268933,
    "token_type": "comment",
    "token_value": "/"
  },
  {
    "position": 268934,
    "token_type": "comment",
    "token_value": "sizeof(a[0])))"
  },
  {
    "position": 268951,
    "token_type": "comment",
    "token_value": "/* NB: on/off times from the Atheros NDIS driver, w/ permission */"
  },
  {
    "position": 269059,
    "token_type": "comment",
    "token_value": "/* tx/rx 802.11 rate */"
  },
  {
    "position": 269105,
    "token_type": "comment",
    "token_value": "/* LED on time (ms) */"
  },
  {
    "position": 269150,
    "token_type": "comment",
    "token_value": "/* LED off time (ms) */"
  },
  {
    "position": 269200,
    "token_type": "string",
    "token_value": "108"
  },
  {
    "position": 269206,
    "token_type": "string",
    "token_value": "40"
  },
  {
    "position": 269211,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 269223,
    "token_type": "string",
    "token_value": "96"
  },
  {
    "position": 269228,
    "token_type": "string",
    "token_value": "44"
  },
  {
    "position": 269233,
    "token_type": "string",
    "token_value": "11"
  },
  {
    "position": 269245,
    "token_type": "string",
    "token_value": "72"
  },
  {
    "position": 269250,
    "token_type": "string",
    "token_value": "50"
  },
  {
    "position": 269255,
    "token_type": "string",
    "token_value": "13"
  },
  {
    "position": 269267,
    "token_type": "string",
    "token_value": "48"
  },
  {
    "position": 269272,
    "token_type": "string",
    "token_value": "57"
  },
  {
    "position": 269277,
    "token_type": "string",
    "token_value": "14"
  },
  {
    "position": 269289,
    "token_type": "string",
    "token_value": "36"
  },
  {
    "position": 269294,
    "token_type": "string",
    "token_value": "67"
  },
  {
    "position": 269299,
    "token_type": "string",
    "token_value": "16"
  },
  {
    "position": 269311,
    "token_type": "string",
    "token_value": "24"
  },
  {
    "position": 269316,
    "token_type": "string",
    "token_value": "80"
  },
  {
    "position": 269321,
    "token_type": "string",
    "token_value": "20"
  },
  {
    "position": 269333,
    "token_type": "string",
    "token_value": "22"
  },
  {
    "position": 269337,
    "token_type": "string",
    "token_value": "100"
  },
  {
    "position": 269343,
    "token_type": "string",
    "token_value": "25"
  },
  {
    "position": 269355,
    "token_type": "string",
    "token_value": "18"
  },
  {
    "position": 269359,
    "token_type": "string",
    "token_value": "133"
  },
  {
    "position": 269365,
    "token_type": "string",
    "token_value": "34"
  },
  {
    "position": 269377,
    "token_type": "string",
    "token_value": "12"
  },
  {
    "position": 269381,
    "token_type": "string",
    "token_value": "160"
  },
  {
    "position": 269387,
    "token_type": "string",
    "token_value": "40"
  },
  {
    "position": 269399,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 269403,
    "token_type": "string",
    "token_value": "200"
  },
  {
    "position": 269409,
    "token_type": "string",
    "token_value": "50"
  },
  {
    "position": 269422,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 269425,
    "token_type": "string",
    "token_value": "240"
  },
  {
    "position": 269431,
    "token_type": "string",
    "token_value": "58"
  },
  {
    "position": 269444,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 269447,
    "token_type": "string",
    "token_value": "267"
  },
  {
    "position": 269453,
    "token_type": "string",
    "token_value": "66"
  },
  {
    "position": 269466,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 269469,
    "token_type": "string",
    "token_value": "400"
  },
  {
    "position": 269474,
    "token_type": "string",
    "token_value": "100"
  },
  {
    "position": 269488,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 269491,
    "token_type": "string",
    "token_value": "500"
  },
  {
    "position": 269496,
    "token_type": "string",
    "token_value": "130"
  },
  {
    "position": 269574,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 269654,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 269655,
    "token_type": "string",
    "token_value": "no h/w rate set for phy mode %u"
  },
  {
    "position": 269686,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 269708,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 269824,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 269861,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 269868,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 269933,
    "token_type": "string",
    "token_value": "0xff"
  },
  {
    "position": 269986,
    "token_type": "string",
    "token_value": "500"
  },
  {
    "position": 270038,
    "token_type": "string",
    "token_value": "130"
  },
  {
    "position": 270287,
    "token_type": "comment",
    "token_value": "/* setup blink rate table to avoid per-packet lookup */"
  },
  {
    "position": 270355,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 270378,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 270457,
    "token_type": "comment",
    "token_value": "/* NB: this uses the last entry if the rate isn't found */"
  },
  {
    "position": 270519,
    "token_type": "comment",
    "token_value": "/* XXX beware of overflow */"
  },
  {
    "position": 270739,
    "token_type": "comment",
    "token_value": "/*\n \t * All protection frames are transmitted at 2Mb/s for\n \t * 11g, otherwise at 1Mb/s.\n \t * XXX select protection rate index from rate table.\n \t */"
  },
  {
    "position": 270938,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 270942,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 270948,
    "token_type": "comment",
    "token_value": "/* rate index used to send mgt frames */"
  },
  {
    "position": 271010,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 271014,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 271015,
    "token_type": "comment",
    "token_value": "undef N"
  },
  {
    "position": 271029,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 271030,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_FF"
  },
  {
    "position": 271096,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 271118,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 271139,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 271202,
    "token_type": "comment",
    "token_value": "/*\n \t * Approximate the frame length to be transmitted. A swag to add\n \t * the following maximal values to the skb payload:\n \t *   - 32: 802.11 encap + CRC\n \t *   - 24: encryption overhead (if wep bit)\n \t *   - 4 + 6: fast-frame header and padding\n \t *   - 16: 2 LLC FF tunnel headers\n \t *   - 14: 1 802.3 FF tunnel header (skb already accounts for 2nd)\n \t */"
  },
  {
    "position": 271586,
    "token_type": "string",
    "token_value": "32"
  },
  {
    "position": 271591,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 271595,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 271599,
    "token_type": "string",
    "token_value": "16"
  },
  {
    "position": 271604,
    "token_type": "string",
    "token_value": "14"
  },
  {
    "position": 271671,
    "token_type": "string",
    "token_value": "24"
  },
  {
    "position": 271903,
    "token_type": "comment",
    "token_value": "/*\n  * Determine if a data frame may be aggregated via ff tunneling.\n  *\n  *  NB: allowing EAPOL frames to be aggregated with other unicast traffic.\n  *      Do 802.1x EAPOL frames proceed in the clear? Then they couldn't\n  *      be aggregated with other types of frames when encryption is on?\n  *\n  *  NB: assumes lock on an_tx_ffbuf effectively held by txq lock mechanism.\n  */"
  },
  {
    "position": 272324,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 272346,
    "token_type": "symbol",
    "token_value": "ether_header"
  },
  {
    "position": 272378,
    "token_type": "symbol",
    "token_value": "ath_node"
  },
  {
    "position": 272399,
    "token_type": "symbol",
    "token_value": "sk_buff"
  },
  {
    "position": 272463,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 272503,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 272555,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 272630,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 272631,
    "token_type": "comment",
    "token_value": "define US_PER_4MS 4000"
  },
  {
    "position": 272655,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 272656,
    "token_type": "comment",
    "token_value": "define\tMIN(a,b)\t((a) < (b) ? (a) : (b))"
  },
  {
    "position": 272744,
    "token_type": "string",
    "token_value": "2346"
  },
  {
    "position": 273160,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273161,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 273279,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273280,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 273401,
    "token_type": "comment",
    "token_value": "/* if the 4 msec limit is set on the channel, take it into account */"
  },
  {
    "position": 273588,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 273691,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 273692,
    "token_type": "string",
    "token_value": "%s: FF TxOp violation"
  },
  {
    "position": 273713,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 273715,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 273813,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273814,
    "token_type": "comment",
    "token_value": "undef US_PER_4MS"
  },
  {
    "position": 273832,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273833,
    "token_type": "comment",
    "token_value": "undef MIN"
  },
  {
    "position": 273847,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273848,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 273857,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 273858,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 273909,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 273944,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 273983,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 273984,
    "token_type": "string",
    "token_value": "R (%p %llx) %08x %08x %08x %08x %08x %08x %c"
  },
  {
    "position": 274028,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 274030,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 274144,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 274158,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 274176,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274178,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274210,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 274215,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274216,
    "token_type": "string",
    "token_value": "*"
  },
  {
    "position": 274217,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274221,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274222,
    "token_type": "string",
    "token_value": "!"
  },
  {
    "position": 274223,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274268,
    "token_type": "symbol",
    "token_value": "ath_buf"
  },
  {
    "position": 274303,
    "token_type": "symbol",
    "token_value": "ath_desc"
  },
  {
    "position": 274342,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 274343,
    "token_type": "string",
    "token_value": "T (%p %llx) %08x %08x %08x %08x %08x %08x %08x %08x %c"
  },
  {
    "position": 274397,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 274399,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 274513,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 274527,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 274541,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 274555,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 274573,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274575,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274607,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 274612,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274613,
    "token_type": "string",
    "token_value": "*"
  },
  {
    "position": 274614,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274618,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274619,
    "token_type": "string",
    "token_value": "!"
  },
  {
    "position": 274620,
    "token_type": "string",
    "token_value": "'"
  },
  {
    "position": 274628,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 274629,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 274635,
    "token_type": "comment",
    "token_value": "/* AR_DEBUG */"
  },
  {
    "position": 274653,
    "token_type": "comment",
    "token_value": "/*\n  * Return netdevice statistics.\n  */"
  },
  {
    "position": 274709,
    "token_type": "symbol",
    "token_value": "net_device_stats"
  },
  {
    "position": 274749,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 274778,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 274814,
    "token_type": "symbol",
    "token_value": "net_device_stats"
  },
  {
    "position": 274862,
    "token_type": "comment",
    "token_value": "/* update according to private statistics */"
  },
  {
    "position": 275464,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 275505,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 275541,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 275581,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 275615,
    "token_type": "symbol",
    "token_value": "sockaddr"
  },
  {
    "position": 275651,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 275718,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 275719,
    "token_type": "string",
    "token_value": "%s: cannot set address; device running"
  },
  {
    "position": 275757,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 275759,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 275824,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 275825,
    "token_type": "string",
    "token_value": "%s: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x"
  },
  {
    "position": 275858,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 275860,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 275892,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 275909,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 275926,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 275946,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 275963,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 275980,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 276005,
    "token_type": "comment",
    "token_value": "/* XXX not right for multiple VAPs */"
  },
  {
    "position": 276346,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 276384,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 276425,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 276512,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 276513,
    "token_type": "string",
    "token_value": "%s: invalid %d, min %u, max %u"
  },
  {
    "position": 276543,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 276545,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 276646,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 276647,
    "token_type": "string",
    "token_value": "%s: %d"
  },
  {
    "position": 276653,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 276655,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 276768,
    "token_type": "comment",
    "token_value": "/* NB: the rx buffers may need to be reallocated */"
  },
  {
    "position": 276960,
    "token_type": "comment",
    "token_value": "/*\n  * Diagnostic interface to the HAL.  This is used by various\n  * tools to do things like retrieve register contents for\n  * debugging.  The mechanism is intentionally opaque so that\n  * it can change frequently w/o concern for compatibility.\n  */"
  },
  {
    "position": 277246,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 277268,
    "token_type": "symbol",
    "token_value": "ath_diag"
  },
  {
    "position": 277294,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 277494,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 277535,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Copy in data.\n \t\t */"
  },
  {
    "position": 277809,
    "token_type": "comment",
    "token_value": "/*\n \t\t * Allocate a buffer for the results (otherwise the HAL\n \t\t * returns a pointer to a buffer where we can read the\n \t\t * results).  Note that we depend on the HAL leaving this\n \t\t * pointer for us to use below in reclaiming the buffer;\n \t\t * may want to be more defensive.\n \t\t */"
  },
  {
    "position": 278676,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 278700,
    "token_type": "symbol",
    "token_value": "ifreq"
  },
  {
    "position": 278733,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 278769,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 278855,
    "token_type": "symbol",
    "token_value": "SIOCGATHSTATS"
  },
  {
    "position": 279160,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 279180,
    "token_type": "symbol",
    "token_value": "SIOCGATHDIAG"
  },
  {
    "position": 279293,
    "token_type": "symbol",
    "token_value": "ath_diag"
  },
  {
    "position": 279328,
    "token_type": "symbol",
    "token_value": "SIOCETHTOOL"
  },
  {
    "position": 279499,
    "token_type": "symbol",
    "token_value": "SIOC80211IFCREATE"
  },
  {
    "position": 279667,
    "token_type": "comment",
    "token_value": "/*\n  * Sysctls are split into ``static'' and ``dynamic'' tables.\n  * The former are defined at module load time and are used\n  * control parameters common to all devices.  The latter are\n  * tied to particular device instances and come and go with\n  * each device.  The split is currently a bit tenuous; many of\n  * the static ones probably should be dynamic but having them\n  * static (e.g. debug) means they can be set after a module is\n  * loaded and before bringing up a device.  The alternative\n  * is to add module parameters.\n  */"
  },
  {
    "position": 280208,
    "token_type": "comment",
    "token_value": "/*\n  * Dynamic (i.e. per-device) sysctls.  These are automatically\n  * mirrored in /proc/sys.\n  */"
  },
  {
    "position": 280333,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 280356,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 280379,
    "token_type": "string",
    "token_value": "3"
  },
  {
    "position": 280399,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 280418,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 280442,
    "token_type": "string",
    "token_value": "6"
  },
  {
    "position": 280464,
    "token_type": "string",
    "token_value": "7"
  },
  {
    "position": 280482,
    "token_type": "string",
    "token_value": "8"
  },
  {
    "position": 280504,
    "token_type": "string",
    "token_value": "9"
  },
  {
    "position": 280526,
    "token_type": "string",
    "token_value": "10"
  },
  {
    "position": 280549,
    "token_type": "string",
    "token_value": "11"
  },
  {
    "position": 280575,
    "token_type": "string",
    "token_value": "12"
  },
  {
    "position": 280597,
    "token_type": "string",
    "token_value": "18"
  },
  {
    "position": 280618,
    "token_type": "string",
    "token_value": "19"
  },
  {
    "position": 280646,
    "token_type": "string",
    "token_value": "20"
  },
  {
    "position": 280673,
    "token_type": "string",
    "token_value": "21"
  },
  {
    "position": 280694,
    "token_type": "string",
    "token_value": "22"
  },
  {
    "position": 280714,
    "token_type": "string",
    "token_value": "23"
  },
  {
    "position": 280735,
    "token_type": "string",
    "token_value": "26"
  },
  {
    "position": 280758,
    "token_type": "symbol",
    "token_value": "ATH_SYSCTL_DECL"
  },
  {
    "position": 280845,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 280883,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 281085,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 281132,
    "token_type": "symbol",
    "token_value": "ATH_SLOTTIME"
  },
  {
    "position": 281161,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 281294,
    "token_type": "comment",
    "token_value": "/* disable manual override */"
  },
  {
    "position": 281352,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 281410,
    "token_type": "symbol",
    "token_value": "ATH_ACKTIMEOUT"
  },
  {
    "position": 281510,
    "token_type": "symbol",
    "token_value": "ATH_CTSTIMEOUT"
  },
  {
    "position": 281610,
    "token_type": "symbol",
    "token_value": "ATH_SOFTLED"
  },
  {
    "position": 281833,
    "token_type": "symbol",
    "token_value": "ATH_LEDPIN"
  },
  {
    "position": 281850,
    "token_type": "comment",
    "token_value": "/* XXX validate? */"
  },
  {
    "position": 281917,
    "token_type": "symbol",
    "token_value": "ATH_DEBUG"
  },
  {
    "position": 281974,
    "token_type": "symbol",
    "token_value": "ATH_TXANTENNA"
  },
  {
    "position": 281994,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * antenna can be:\n \t\t\t\t * 0 = transmit diversity\n \t\t\t\t * 1 = antenna port 1\n \t\t\t\t * 2 = antenna port 2\n \t\t\t\t */"
  },
  {
    "position": 282130,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 282141,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 282227,
    "token_type": "symbol",
    "token_value": "ATH_RXANTENNA"
  },
  {
    "position": 282247,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * antenna can be:\n \t\t\t\t * 0 = receive diversity\n \t\t\t\t * 1 = antenna port 1\n \t\t\t\t * 2 = antenna port 2\n \t\t\t\t */"
  },
  {
    "position": 282382,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 282393,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 282483,
    "token_type": "symbol",
    "token_value": "ATH_DIVERSITY"
  },
  {
    "position": 282503,
    "token_type": "comment",
    "token_value": "/*\n \t\t\t\t * 0 = disallow use of diversity\n \t\t\t\t * 1 = allow use of diversity\n \t\t\t\t */"
  },
  {
    "position": 282603,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 282614,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 282644,
    "token_type": "comment",
    "token_value": "/* Don't enable diversity if XR is enabled */"
  },
  {
    "position": 282866,
    "token_type": "symbol",
    "token_value": "ATH_TXINTRPERIOD"
  },
  {
    "position": 282889,
    "token_type": "comment",
    "token_value": "/* XXX: validate? */"
  },
  {
    "position": 282963,
    "token_type": "symbol",
    "token_value": "ATH_FFTXQMIN"
  },
  {
    "position": 282982,
    "token_type": "comment",
    "token_value": "/* XXX validate? */"
  },
  {
    "position": 283051,
    "token_type": "symbol",
    "token_value": "ATH_TKIPMIC"
  },
  {
    "position": 283078,
    "token_type": "symbol",
    "token_value": "ieee80211com"
  },
  {
    "position": 283329,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 283330,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 283359,
    "token_type": "symbol",
    "token_value": "ATH_XR_POLL_PERIOD"
  },
  {
    "position": 283579,
    "token_type": "symbol",
    "token_value": "ATH_XR_POLL_COUNT"
  },
  {
    "position": 283778,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 283779,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 283794,
    "token_type": "symbol",
    "token_value": "ATH_ACKRATE"
  },
  {
    "position": 283901,
    "token_type": "symbol",
    "token_value": "ATH_INTMIT"
  },
  {
    "position": 283975,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 283979,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 284221,
    "token_type": "symbol",
    "token_value": "ATH_SLOTTIME"
  },
  {
    "position": 284289,
    "token_type": "symbol",
    "token_value": "ATH_ACKTIMEOUT"
  },
  {
    "position": 284361,
    "token_type": "symbol",
    "token_value": "ATH_CTSTIMEOUT"
  },
  {
    "position": 284433,
    "token_type": "symbol",
    "token_value": "ATH_SOFTLED"
  },
  {
    "position": 284491,
    "token_type": "symbol",
    "token_value": "ATH_LEDPIN"
  },
  {
    "position": 284547,
    "token_type": "symbol",
    "token_value": "ATH_COUNTRYCODE"
  },
  {
    "position": 284621,
    "token_type": "symbol",
    "token_value": "ATH_MAXVAPS"
  },
  {
    "position": 284676,
    "token_type": "symbol",
    "token_value": "ATH_REGDOMAIN"
  },
  {
    "position": 284746,
    "token_type": "symbol",
    "token_value": "ATH_DEBUG"
  },
  {
    "position": 284800,
    "token_type": "symbol",
    "token_value": "ATH_TXANTENNA"
  },
  {
    "position": 284862,
    "token_type": "symbol",
    "token_value": "ATH_RXANTENNA"
  },
  {
    "position": 284933,
    "token_type": "symbol",
    "token_value": "ATH_DIVERSITY"
  },
  {
    "position": 284995,
    "token_type": "symbol",
    "token_value": "ATH_TXINTRPERIOD"
  },
  {
    "position": 285063,
    "token_type": "symbol",
    "token_value": "ATH_FFTXQMIN"
  },
  {
    "position": 285123,
    "token_type": "symbol",
    "token_value": "ATH_TKIPMIC"
  },
  {
    "position": 285182,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 285183,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 285211,
    "token_type": "symbol",
    "token_value": "ATH_XR_POLL_PERIOD"
  },
  {
    "position": 285277,
    "token_type": "symbol",
    "token_value": "ATH_XR_POLL_COUNT"
  },
  {
    "position": 285337,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 285338,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 285352,
    "token_type": "symbol",
    "token_value": "ATH_ACKRATE"
  },
  {
    "position": 285410,
    "token_type": "symbol",
    "token_value": "ATH_INTMIT"
  },
  {
    "position": 285621,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 285626,
    "token_type": "comment",
    "token_value": "/* once a second */"
  },
  {
    "position": 285667,
    "token_type": "string",
    "token_value": "0x7fffffff"
  },
  {
    "position": 285680,
    "token_type": "comment",
    "token_value": "/* 32-bit big */"
  },
  {
    "position": 285791,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 285792,
    "token_type": "string",
    "token_value": "slottime"
  },
  {
    "position": 285800,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 285816,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 285946,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 285947,
    "token_type": "string",
    "token_value": "acktimeout"
  },
  {
    "position": 285957,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 285973,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 286105,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286106,
    "token_type": "string",
    "token_value": "ctstimeout"
  },
  {
    "position": 286116,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286132,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 286264,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286265,
    "token_type": "string",
    "token_value": "softled"
  },
  {
    "position": 286272,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286288,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 286417,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286418,
    "token_type": "string",
    "token_value": "ledpin"
  },
  {
    "position": 286424,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286440,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 286568,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286569,
    "token_type": "string",
    "token_value": "countrycode"
  },
  {
    "position": 286580,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286596,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 286729,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286730,
    "token_type": "string",
    "token_value": "maxvaps"
  },
  {
    "position": 286737,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286753,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 286882,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286883,
    "token_type": "string",
    "token_value": "regdomain"
  },
  {
    "position": 286892,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 286908,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 286998,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 286999,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 287056,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287057,
    "token_type": "string",
    "token_value": "debug"
  },
  {
    "position": 287062,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287078,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 287164,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 287165,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 287213,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287214,
    "token_type": "string",
    "token_value": "txantenna"
  },
  {
    "position": 287223,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287239,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 287370,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287371,
    "token_type": "string",
    "token_value": "rxantenna"
  },
  {
    "position": 287380,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287396,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 287527,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287528,
    "token_type": "string",
    "token_value": "diversity"
  },
  {
    "position": 287537,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287553,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 287684,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287685,
    "token_type": "string",
    "token_value": "txintrperiod"
  },
  {
    "position": 287697,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287713,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 287847,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287848,
    "token_type": "string",
    "token_value": "fftxqmin"
  },
  {
    "position": 287856,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 287872,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288002,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288003,
    "token_type": "string",
    "token_value": "tkipmic"
  },
  {
    "position": 288010,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288026,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288114,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 288115,
    "token_type": "comment",
    "token_value": "ifdef ATH_SUPERG_XR"
  },
  {
    "position": 288177,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288178,
    "token_type": "string",
    "token_value": "xrpollperiod"
  },
  {
    "position": 288190,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288206,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288342,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288343,
    "token_type": "string",
    "token_value": "xrpollcount"
  },
  {
    "position": 288354,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288370,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288464,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 288465,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 288513,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288514,
    "token_type": "string",
    "token_value": "ackrate"
  },
  {
    "position": 288521,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288537,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288666,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288667,
    "token_type": "string",
    "token_value": "intmit"
  },
  {
    "position": 288673,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 288689,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 288779,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 288803,
    "token_type": "symbol",
    "token_value": "ath_dynamic_sysctl_register"
  },
  {
    "position": 288838,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 288910,
    "token_type": "string",
    "token_value": "5"
  },
  {
    "position": 288928,
    "token_type": "symbol",
    "token_value": "ctl_table"
  },
  {
    "position": 289059,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289060,
    "token_type": "string",
    "token_value": "%s: no memory for sysctl table!"
  },
  {
    "position": 289091,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 289093,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289127,
    "token_type": "comment",
    "token_value": "/* \n \t * We want to reserve space for the name of the device separate\n \t * from the net_device structure, because when the name is changed\n \t * it is changed in the net_device structure and the message given\n \t * out.  Thus we won't know what the name it used to be if we rely\n \t * on it.\n \t */"
  },
  {
    "position": 289471,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 289539,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289540,
    "token_type": "string",
    "token_value": "%s: no memory for device name storage!"
  },
  {
    "position": 289578,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 289580,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289674,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 289682,
    "token_type": "comment",
    "token_value": "/* setup the table */"
  },
  {
    "position": 289729,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 289757,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 289797,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 289811,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289812,
    "token_type": "string",
    "token_value": "dev"
  },
  {
    "position": 289815,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 289835,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 289845,
    "token_type": "string",
    "token_value": "0555"
  },
  {
    "position": 289868,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 289895,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 289901,
    "token_type": "comment",
    "token_value": "/* [1] is NULL terminator */"
  },
  {
    "position": 289947,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 289988,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 290029,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 290039,
    "token_type": "string",
    "token_value": "0555"
  },
  {
    "position": 290062,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 290089,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 290095,
    "token_type": "comment",
    "token_value": "/* [3] is NULL terminator */"
  },
  {
    "position": 290126,
    "token_type": "comment",
    "token_value": "/* copy in pre-defined data */"
  },
  {
    "position": 290182,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 290244,
    "token_type": "comment",
    "token_value": "/* add in dynamic data references */"
  },
  {
    "position": 290292,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 290408,
    "token_type": "comment",
    "token_value": "/* and register everything */"
  },
  {
    "position": 290547,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 290548,
    "token_type": "string",
    "token_value": "%s: failed to register sysctls!"
  },
  {
    "position": 290579,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 290581,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 290683,
    "token_type": "comment",
    "token_value": "/* initialize values */"
  },
  {
    "position": 290756,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 290760,
    "token_type": "comment",
    "token_value": "/* default to auto-selection */"
  },
  {
    "position": 290856,
    "token_type": "symbol",
    "token_value": "ath_dynamic_sysctl_unregister"
  },
  {
    "position": 290893,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 291066,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 291105,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 291137,
    "token_type": "string",
    "token_value": "2"
  },
  {
    "position": 291247,
    "token_type": "comment",
    "token_value": "/*\n  * Announce various information on device/driver attach.\n  */"
  },
  {
    "position": 291327,
    "token_type": "symbol",
    "token_value": "ath_announce"
  },
  {
    "position": 291347,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 291368,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 291369,
    "token_type": "comment",
    "token_value": "define\tHAL_MODE_DUALBAND\t(HAL_MODE_11A|HAL_MODE_11B)"
  },
  {
    "position": 291431,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 291467,
    "token_type": "symbol",
    "token_value": "ath_hal"
  },
  {
    "position": 291522,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 291523,
    "token_type": "string",
    "token_value": "%s: mac %d.%d phy %d.%d"
  },
  {
    "position": 291546,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 291617,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 291636,
    "token_type": "string",
    "token_value": "0xf"
  },
  {
    "position": 291644,
    "token_type": "comment",
    "token_value": "/*\n \t * Print radio revision(s).  We check the wireless modes\n \t * to avoid falsely printing revs for inoperable parts.\n \t * Dual-band radio revs are returned in the 5 GHz rev number.\n \t */"
  },
  {
    "position": 292035,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292036,
    "token_type": "string",
    "token_value": "5 GHz radio %d.%d 2 GHz radio %d.%d"
  },
  {
    "position": 292072,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292104,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 292135,
    "token_type": "string",
    "token_value": "0xf"
  },
  {
    "position": 292169,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 292200,
    "token_type": "string",
    "token_value": "0xf"
  },
  {
    "position": 292225,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292226,
    "token_type": "string",
    "token_value": "radio %d.%d"
  },
  {
    "position": 292238,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292265,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 292296,
    "token_type": "string",
    "token_value": "0xf"
  },
  {
    "position": 292321,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292322,
    "token_type": "string",
    "token_value": "radio %d.%d"
  },
  {
    "position": 292334,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292361,
    "token_type": "string",
    "token_value": "4"
  },
  {
    "position": 292391,
    "token_type": "string",
    "token_value": "0xf"
  },
  {
    "position": 292406,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292407,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 292409,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292419,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 292420,
    "token_type": "comment",
    "token_value": "/*bootverbose*/"
  },
  {
    "position": 292461,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 292498,
    "token_type": "symbol",
    "token_value": "ath_txq"
  },
  {
    "position": 292540,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292541,
    "token_type": "string",
    "token_value": "%s: Use hw queue %u for %s traffic"
  },
  {
    "position": 292575,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 292577,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292658,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292659,
    "token_type": "string",
    "token_value": "%s: Use hw queue %u for CAB traffic"
  },
  {
    "position": 292694,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 292696,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292748,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292749,
    "token_type": "string",
    "token_value": "%s: Use hw queue %u for beacons"
  },
  {
    "position": 292780,
    "token_type": "string",
    "token_value": "\\n"
  },
  {
    "position": 292782,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 292820,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 292821,
    "token_type": "comment",
    "token_value": "undef HAL_MODE_DUALBAND"
  },
  {
    "position": 292851,
    "token_type": "comment",
    "token_value": "/*\n  * Static (i.e. global) sysctls.  Note that the HAL sysctls\n  * are located under ours by sharing the setting for DEV_ATH.\n  */"
  },
  {
    "position": 293027,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 293028,
    "token_type": "comment",
    "token_value": "ifdef AR_DEBUG"
  },
  {
    "position": 293085,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293086,
    "token_type": "string",
    "token_value": "debug"
  },
  {
    "position": 293091,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293107,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 293211,
    "token_type": "comment",
    "token_value": "#"
  },
  {
    "position": 293212,
    "token_type": "comment",
    "token_value": "endif"
  },
  {
    "position": 293260,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293261,
    "token_type": "string",
    "token_value": "countrycode"
  },
  {
    "position": 293272,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293288,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 293445,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293446,
    "token_type": "string",
    "token_value": "maxvaps"
  },
  {
    "position": 293453,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293469,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 293618,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293619,
    "token_type": "string",
    "token_value": "outdoor"
  },
  {
    "position": 293626,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293642,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 293791,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293792,
    "token_type": "string",
    "token_value": "xchanmode"
  },
  {
    "position": 293801,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293817,
    "token_type": "string",
    "token_value": "0444"
  },
  {
    "position": 293970,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293971,
    "token_type": "string",
    "token_value": "calibrate"
  },
  {
    "position": 293980,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 293996,
    "token_type": "string",
    "token_value": "0644"
  },
  {
    "position": 294174,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 294261,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 294262,
    "token_type": "string",
    "token_value": "ath"
  },
  {
    "position": 294265,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 294281,
    "token_type": "string",
    "token_value": "0555"
  },
  {
    "position": 294326,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 294414,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 294415,
    "token_type": "string",
    "token_value": "dev"
  },
  {
    "position": 294418,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 294434,
    "token_type": "string",
    "token_value": "0555"
  },
  {
    "position": 294474,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 294497,
    "token_type": "symbol",
    "token_value": "ctl_table_header"
  },
  {
    "position": 294543,
    "token_type": "symbol",
    "token_value": "ath_sysctl_register"
  },
  {
    "position": 294599,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 294766,
    "token_type": "string",
    "token_value": "1"
  },
  {
    "position": 294785,
    "token_type": "symbol",
    "token_value": "ath_sysctl_unregister"
  },
  {
    "position": 294966,
    "token_type": "symbol",
    "token_value": "ath_get_hal_status_desc"
  },
  {
    "position": 295027,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 295133,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 295134,
    "token_type": "string",
    "token_value": "\""
  },
  {
    "position": 295155,
    "token_type": "symbol",
    "token_value": "ath_rcv_dev_event"
  },
  {
    "position": 295180,
    "token_type": "symbol",
    "token_value": "notifier_block"
  },
  {
    "position": 295248,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 295274,
    "token_type": "symbol",
    "token_value": "net_device"
  },
  {
    "position": 295302,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 295326,
    "token_type": "symbol",
    "token_value": "ath_softc"
  },
  {
    "position": 295407,
    "token_type": "string",
    "token_value": "0"
  },
  {
    "position": 295452,
    "token_type": "symbol",
    "token_value": "NETDEV_CHANGENAME"
  },
  {
    "position": 295630,
    "token_type": "string",
    "token_value": "0"
  }
]